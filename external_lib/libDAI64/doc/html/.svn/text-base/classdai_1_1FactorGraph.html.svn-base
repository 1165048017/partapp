<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: dai::FactorGraph Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacedai.html">dai</a>::<a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a>
  </div>
</div>
<div class="contents">
<h1>dai::FactorGraph Class Reference</h1><!-- doxytag: class="dai::FactorGraph" --><code>#include &lt;<a class="el" href="factorgraph_8h-source.html">dai/factorgraph.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for dai::FactorGraph:</div>
<div class="dynsection">

<p><center><img src="classdai_1_1FactorGraph.png" usemap="#dai::FactorGraph_map" border="0" alt=""></center>
<map name="dai::FactorGraph_map">
<area href="classdai_1_1RegionGraph.html" alt="dai::RegionGraph" shape="rect" coords="0,56,196,80">
<area href="classdai_1_1DAIAlg.html" alt="dai::DAIAlg< dai::FactorGraph >" shape="rect" coords="206,56,402,80">
<area href="classdai_1_1DAIAlg.html" alt="dai::DAIAlg< dai::RegionGraph >" shape="rect" coords="0,112,196,136">
</map>
</div>

<p>
<a href="classdai_1_1FactorGraph-members.html">List of all members.</a><hr><a name="_details"></a><h2>Detailed Description</h2>
Represents a factor graph. 
<p>
Both Bayesian Networks and Markov random fields can be represented in a unifying representation, called <em>factor graph</em> [<a class="el" href="Bibliography.html#KFL01">KFL01</a>], implemented in libDAI by the <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> class.<p>
Consider a probability distribution over <img class="formulaInl" alt="$N$" src="form_6.png"> discrete random variables <img class="formulaInl" alt="$x_0,x_1,\dots,x_N$" src="form_7.png"> that factorizes as a product of factors, each of which depends on some subset of the variables: <p class="formulaDsp">
<img class="formulaDsp" alt="\[ P(x_0,x_1,\dots,x_N) = \frac{1}{Z} \prod_{I=0}^M f_I(x_I), \qquad Z = \sum_{x_0}\dots\sum_{x_N} \prod_{I=0}^M f_I(X_I). \]" src="form_8.png">
<p>
 Each factor <img class="formulaInl" alt="$f_I$" src="form_9.png"> is a function from an associated subset of variables <img class="formulaInl" alt="$X_I \subset \{x_0,x_1,\dots,x_N\}$" src="form_10.png"> to the nonnegative real numbers.<p>
For a Bayesian network, each factor corresponds to a (conditional) probability table, whereas for a Markov random field, each factor corresponds to a maximal clique of the undirected graph.<p>
Factor graphs explicitly express the factorization structure of the corresponding probability distribution. <table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="1552870151bb7f7a88b3120a777c1056"></a><!-- doxytag: member="dai::FactorGraph::Neighbor" ref="1552870151bb7f7a88b3120a777c1056" args="" -->
typedef <a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html">BipartiteGraph::Neighbor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#1552870151bb7f7a88b3120a777c1056">Neighbor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shorthand for <a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">BipartiteGraph::Neighbor</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="326942db90fe2dbdf99041d5d966019e"></a><!-- doxytag: member="dai::FactorGraph::Neighbors" ref="326942db90fe2dbdf99041d5d966019e" args="" -->
typedef <a class="el" href="classdai_1_1BipartiteGraph.html#031237b607d2868b80052e71b4149b29">BipartiteGraph::Neighbors</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#326942db90fe2dbdf99041d5d966019e">Neighbors</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shorthand for <a class="el" href="classdai_1_1BipartiteGraph.html#031237b607d2868b80052e71b4149b29" title="Describes the neighbors of some node.">BipartiteGraph::Neighbors</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="743243688f787418eff5352140980119"></a><!-- doxytag: member="dai::FactorGraph::Edge" ref="743243688f787418eff5352140980119" args="" -->
typedef <a class="el" href="classdai_1_1BipartiteGraph.html#ff511d0eba0fd2956c08b602029ba95f">BipartiteGraph::Edge</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#743243688f787418eff5352140980119">Edge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shorthand for <a class="el" href="classdai_1_1BipartiteGraph.html#ff511d0eba0fd2956c08b602029ba95f" title="Used as index of an edge: an Edge(a,b) corresponds to the edge between the a&#39;th...">BipartiteGraph::Edge</a>. <br></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="424fd4b5e9950b2510ff35e83e191a34"></a><!-- doxytag: member="dai::FactorGraph::FactorGraph" ref="424fd4b5e9950b2510ff35e83e191a34" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#424fd4b5e9950b2510ff35e83e191a34">FactorGraph</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e71fa240259d15df26741197922ee821"></a><!-- doxytag: member="dai::FactorGraph::FactorGraph" ref="e71fa240259d15df26741197922ee821" args="(const FactorGraph &amp;x)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#e71fa240259d15df26741197922ee821">FactorGraph</a> (const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6a72c598cfdebb009de69ba269017ff1"></a><!-- doxytag: member="dai::FactorGraph::operator=" ref="6a72c598cfdebb009de69ba269017ff1" args="(const FactorGraph &amp;x)" -->
<a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#6a72c598cfdebb009de69ba269017ff1">operator=</a> (const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="fd0bbc52192c65e207d721906e3e0a2b"></a><!-- doxytag: member="dai::FactorGraph::FactorGraph" ref="fd0bbc52192c65e207d721906e3e0a2b" args="(const std::vector&lt; Factor &gt; &amp;P)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#fd0bbc52192c65e207d721906e3e0a2b">FactorGraph</a> (const std::vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt; &amp;P)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from a vector of factors. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;typename FactorInputIterator, typename VarInputIterator&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#15bdffc0b20cdfc99953b8e25e111059">FactorGraph</a> (FactorInputIterator fact_begin, FactorInputIterator fact_end, VarInputIterator var_begin, VarInputIterator var_end, size_t nr_fact_hint=0, size_t nr_var_hint=0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from given factor and variable iterators.  <a href="#15bdffc0b20cdfc99953b8e25e111059"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a61b15f74745e593f7b4e5bcda9ab469"></a><!-- doxytag: member="dai::FactorGraph::~FactorGraph" ref="a61b15f74745e593f7b4e5bcda9ab469" args="()" -->
virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#a61b15f74745e593f7b4e5bcda9ab469">~FactorGraph</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="71544daf860d24d525f860f4151e621d"></a><!-- doxytag: member="dai::FactorGraph::clone" ref="71544daf860d24d525f860f4151e621d" args="() const " -->
virtual <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#71544daf860d24d525f860f4151e621d">clone</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clone *this (virtual copy constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4fc50242fef17ae21a1b4b559478ee29"></a><!-- doxytag: member="dai::FactorGraph::create" ref="4fc50242fef17ae21a1b4b559478ee29" args="() const " -->
virtual <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#4fc50242fef17ae21a1b4b559478ee29">create</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create (virtual default constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="87036afc568a8658dee9bff52f8fd3e1"></a><!-- doxytag: member="dai::FactorGraph::var" ref="87036afc568a8658dee9bff52f8fd3e1" args="(size_t i) const " -->
const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#87036afc568a8658dee9bff52f8fd3e1">var</a> (size_t i) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns const reference to i'th variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4e82ddbe1e2ca8a58bc7aec4d9fa61b6"></a><!-- doxytag: member="dai::FactorGraph::vars" ref="4e82ddbe1e2ca8a58bc7aec4d9fa61b6" args="() const " -->
const std::vector&lt; <a class="el" href="classdai_1_1Var.html">Var</a> &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#4e82ddbe1e2ca8a58bc7aec4d9fa61b6">vars</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns const reference to all factors. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4f73bace8b2ecd16654116467f38045b"></a><!-- doxytag: member="dai::FactorGraph::factor" ref="4f73bace8b2ecd16654116467f38045b" args="(size_t I)" -->
<a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#4f73bace8b2ecd16654116467f38045b">factor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns reference to I'th factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9a930964b0d006bb0d6ace88fb1da481"></a><!-- doxytag: member="dai::FactorGraph::factor" ref="9a930964b0d006bb0d6ace88fb1da481" args="(size_t I) const " -->
const <a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#9a930964b0d006bb0d6ace88fb1da481">factor</a> (size_t I) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns const reference to I'th factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="35030e580fdcab5abd877f0e0bd883d5"></a><!-- doxytag: member="dai::FactorGraph::factors" ref="35030e580fdcab5abd877f0e0bd883d5" args="() const " -->
const std::vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#35030e580fdcab5abd877f0e0bd883d5">factors</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns const reference to all factors. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="107d707b4ef22d83f19c40989c227d5d"></a><!-- doxytag: member="dai::FactorGraph::nrVars" ref="107d707b4ef22d83f19c40989c227d5d" args="() const " -->
size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#107d707b4ef22d83f19c40989c227d5d">nrVars</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns number of variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="de52f40e90ae438c985f9568811654a9"></a><!-- doxytag: member="dai::FactorGraph::nrFactors" ref="de52f40e90ae438c985f9568811654a9" args="() const " -->
size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#de52f40e90ae438c985f9568811654a9">nrFactors</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns number of factors. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a1b94e2729ef0a941f6dbee1b7ea1b24"></a><!-- doxytag: member="dai::FactorGraph::nrEdges" ref="a1b94e2729ef0a941f6dbee1b7ea1b24" args="() const " -->
size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#a1b94e2729ef0a941f6dbee1b7ea1b24">nrEdges</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates number of edges. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="dce52503905082b5288da10147358d03"></a><!-- doxytag: member="dai::FactorGraph::nbV" ref="dce52503905082b5288da10147358d03" args="(size_t i) const " -->
const <a class="el" href="classdai_1_1FactorGraph.html#326942db90fe2dbdf99041d5d966019e">Neighbors</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#dce52503905082b5288da10147358d03">nbV</a> (size_t i) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides read access to neighbors of variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="1b69b08da98de54b911cb8c1245d3622"></a><!-- doxytag: member="dai::FactorGraph::nbV" ref="1b69b08da98de54b911cb8c1245d3622" args="(size_t i)" -->
<a class="el" href="classdai_1_1FactorGraph.html#326942db90fe2dbdf99041d5d966019e">Neighbors</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#1b69b08da98de54b911cb8c1245d3622">nbV</a> (size_t i)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides full access to neighbors of variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d3ae273e55d134fe0eb6ed67492953d7"></a><!-- doxytag: member="dai::FactorGraph::nbF" ref="d3ae273e55d134fe0eb6ed67492953d7" args="(size_t I) const " -->
const <a class="el" href="classdai_1_1FactorGraph.html#326942db90fe2dbdf99041d5d966019e">Neighbors</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#d3ae273e55d134fe0eb6ed67492953d7">nbF</a> (size_t I) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides read access to neighbors of factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="10914ba06b0c939cc5d1f3fe7a1c27c2"></a><!-- doxytag: member="dai::FactorGraph::nbF" ref="10914ba06b0c939cc5d1f3fe7a1c27c2" args="(size_t I)" -->
<a class="el" href="classdai_1_1FactorGraph.html#326942db90fe2dbdf99041d5d966019e">Neighbors</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#10914ba06b0c939cc5d1f3fe7a1c27c2">nbF</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides full access to neighbors of factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cffe2211b3a588c92cdabe40071f0c77"></a><!-- doxytag: member="dai::FactorGraph::nbV" ref="cffe2211b3a588c92cdabe40071f0c77" args="(size_t i, size_t _I) const " -->
const <a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html">Neighbor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#cffe2211b3a588c92cdabe40071f0c77">nbV</a> (size_t i, size_t _I) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides read access to neighbor of variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="06ee72e5307fb2aa1af3cfcfec1fc449"></a><!-- doxytag: member="dai::FactorGraph::nbV" ref="06ee72e5307fb2aa1af3cfcfec1fc449" args="(size_t i, size_t _I)" -->
<a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html">Neighbor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#06ee72e5307fb2aa1af3cfcfec1fc449">nbV</a> (size_t i, size_t _I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides full access to neighbor of variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="882dbd45fd323d8020df45c0d23a85da"></a><!-- doxytag: member="dai::FactorGraph::nbF" ref="882dbd45fd323d8020df45c0d23a85da" args="(size_t I, size_t _i) const " -->
const <a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html">Neighbor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#882dbd45fd323d8020df45c0d23a85da">nbF</a> (size_t I, size_t _i) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides read access to neighbor of factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bb04181cfad3d5e461bff89c6fa0f83a"></a><!-- doxytag: member="dai::FactorGraph::nbF" ref="bb04181cfad3d5e461bff89c6fa0f83a" args="(size_t I, size_t _i)" -->
<a class="el" href="structdai_1_1BipartiteGraph_1_1Neighbor.html">Neighbor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#bb04181cfad3d5e461bff89c6fa0f83a">nbF</a> (size_t I, size_t _i)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides full access to neighbor of factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="25f3ffef7d09bbea7fe4ec69840395b3"></a><!-- doxytag: member="dai::FactorGraph::findVar" ref="25f3ffef7d09bbea7fe4ec69840395b3" args="(const Var &amp;n) const " -->
size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#25f3ffef7d09bbea7fe4ec69840395b3">findVar</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the index of a particular variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ae887d817c2e6e081d91e54083abc6ad"></a><!-- doxytag: member="dai::FactorGraph::findVars" ref="ae887d817c2e6e081d91e54083abc6ad" args="(VarSet &amp;ns) const " -->
std::set&lt; size_t &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#ae887d817c2e6e081d91e54083abc6ad">findVars</a> (<a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a set of indexes corresponding to a set of variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c7a2074bd52b7cb35a6473208140bb34"></a><!-- doxytag: member="dai::FactorGraph::findFactor" ref="c7a2074bd52b7cb35a6473208140bb34" args="(const VarSet &amp;ns) const " -->
size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#c7a2074bd52b7cb35a6473208140bb34">findFactor</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns index of the first factor that depends on the variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b0c02cc79dbbe2d23f67281b7af76ed1"></a><!-- doxytag: member="dai::FactorGraph::Delta" ref="b0c02cc79dbbe2d23f67281b7af76ed1" args="(unsigned i) const " -->
<a class="el" href="classdai_1_1VarSet.html">VarSet</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#b0c02cc79dbbe2d23f67281b7af76ed1">Delta</a> (unsigned i) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return all variables that occur in a factor involving the i'th variable, itself included. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6c74472eacbfc029cc6cc5ba4e865b1d"></a><!-- doxytag: member="dai::FactorGraph::Delta" ref="6c74472eacbfc029cc6cc5ba4e865b1d" args="(const VarSet &amp;ns) const " -->
<a class="el" href="classdai_1_1VarSet.html">VarSet</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#6c74472eacbfc029cc6cc5ba4e865b1d">Delta</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return all variables that occur in a factor involving some variable in ns, ns itself included. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bd749cf993fdc774b993e72d7d07bc40"></a><!-- doxytag: member="dai::FactorGraph::delta" ref="bd749cf993fdc774b993e72d7d07bc40" args="(unsigned i) const " -->
<a class="el" href="classdai_1_1VarSet.html">VarSet</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#bd749cf993fdc774b993e72d7d07bc40">delta</a> (unsigned i) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return all variables that occur in a factor involving the i'th variable, n itself excluded. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="358d94bc2adb7be856ea7b60e2e21096"></a><!-- doxytag: member="dai::FactorGraph::delta" ref="358d94bc2adb7be856ea7b60e2e21096" args="(const VarSet &amp;ns) const " -->
<a class="el" href="classdai_1_1VarSet.html">VarSet</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#358d94bc2adb7be856ea7b60e2e21096">delta</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return all variables that occur in a factor involving some variable in ns, ns itself excluded. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="506a66f1b25e49700f6ae564a5c33531"></a><!-- doxytag: member="dai::FactorGraph::setFactor" ref="506a66f1b25e49700f6ae564a5c33531" args="(size_t I, const Factor &amp;newFactor, bool backup=false)" -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#506a66f1b25e49700f6ae564a5c33531">setFactor</a> (size_t I, const <a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;newFactor, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the content of the I'th factor and make a backup of its old content if backup == true. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e620ed3291b0a1a229a94b0872c8ad81"></a><!-- doxytag: member="dai::FactorGraph::setFactors" ref="e620ed3291b0a1a229a94b0872c8ad81" args="(const std::map&lt; size_t, Factor &gt; &amp;facs, bool backup=false)" -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#e620ed3291b0a1a229a94b0872c8ad81">setFactors</a> (const std::map&lt; size_t, <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt; &amp;facs, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the contents of all factors as specified by facs and make a backup of the old contents if backup == true. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#3cb7d91ca96090372bd0aacbf70a8948">clamp</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n, size_t i, bool backup=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="42791a748401710f846e3ac1a3d7a10a"></a><!-- doxytag: member="dai::FactorGraph::makeCavity" ref="42791a748401710f846e3ac1a3d7a10a" args="(unsigned i, bool backup=false)" -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#42791a748401710f846e3ac1a3d7a10a">makeCavity</a> (unsigned i, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set all factors interacting with the i'th variable 1. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6965352b4e04b47fd7ad551d9c1916f2"></a><!-- doxytag: member="dai::FactorGraph::backupFactors" ref="6965352b4e04b47fd7ad551d9c1916f2" args="(const std::set&lt; size_t &gt; &amp;facs)" -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#6965352b4e04b47fd7ad551d9c1916f2">backupFactors</a> (const std::set&lt; size_t &gt; &amp;facs)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Backup the factors specified by indices in facs. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0fe64720797972b14f1b41486d339f81"></a><!-- doxytag: member="dai::FactorGraph::restoreFactors" ref="0fe64720797972b14f1b41486d339f81" args="()" -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#0fe64720797972b14f1b41486d339f81">restoreFactors</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restore all factors to the backup copies. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d1e3c45492a64959fec4736adf555528"></a><!-- doxytag: member="dai::FactorGraph::isConnected" ref="d1e3c45492a64959fec4736adf555528" args="() const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#d1e3c45492a64959fec4736adf555528">isConnected</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> is connected. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a4e258a9fc003b49491529dfcf45d56a"></a><!-- doxytag: member="dai::FactorGraph::isTree" ref="a4e258a9fc003b49491529dfcf45d56a" args="() const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#a4e258a9fc003b49491529dfcf45d56a">isTree</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> is a tree. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f1b9c45ee2670aca3d04c2733193f611"></a><!-- doxytag: member="dai::FactorGraph::isPairwise" ref="f1b9c45ee2670aca3d04c2733193f611" args="() const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#f1b9c45ee2670aca3d04c2733193f611">isPairwise</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if each factor depends on at most two variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f3c0f08798db25845cb518ec6cccbd05"></a><!-- doxytag: member="dai::FactorGraph::isBinary" ref="f3c0f08798db25845cb518ec6cccbd05" args="() const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#f3c0f08798db25845cb518ec6cccbd05">isBinary</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if each variable has only two possible values. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="89ee98ae7d3bc1723452e1c11ace4b51"></a><!-- doxytag: member="dai::FactorGraph::ReadFromFile" ref="89ee98ae7d3bc1723452e1c11ace4b51" args="(const char *filename)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#89ee98ae7d3bc1723452e1c11ace4b51">ReadFromFile</a> (const char *filename)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reads a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from a file. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0916dbc2ac40ad7e5bf0cca9740d3c2c"></a><!-- doxytag: member="dai::FactorGraph::WriteToFile" ref="0916dbc2ac40ad7e5bf0cca9740d3c2c" args="(const char *filename) const " -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#0916dbc2ac40ad7e5bf0cca9740d3c2c">WriteToFile</a> (const char *filename) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> to a file. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="607c9a821e789121cf2ccbfacc5f8d5f"></a><!-- doxytag: member="dai::FactorGraph::printDot" ref="607c9a821e789121cf2ccbfacc5f8d5f" args="(std::ostream &amp;os) const " -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#607c9a821e789121cf2ccbfacc5f8d5f">printDot</a> (std::ostream &amp;os) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> to a GraphViz .dot file. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9cd8cc192cac877725b2bae9f3e61a9f"></a><!-- doxytag: member="dai::FactorGraph::Cliques" ref="9cd8cc192cac877725b2bae9f3e61a9f" args="() const " -->
std::vector&lt; <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#9cd8cc192cac877725b2bae9f3e61a9f">Cliques</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the cliques in this <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#915d21c0da8c2c1f342371bef6adb0f5">clamped</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;v_i, size_t x) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clamp variable v_i to value state (i.e. multiply with a Kronecker delta <img class="formulaInl" alt="$\delta_{x_{v_i},x}$" src="form_11.png">);.  <a href="#915d21c0da8c2c1f342371bef6adb0f5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="213527d7bcd00ccedce6276311332500"></a><!-- doxytag: member="dai::FactorGraph::maximalFactors" ref="213527d7bcd00ccedce6276311332500" args="() const " -->
<a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#213527d7bcd00ccedce6276311332500">maximalFactors</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a copy of *this, where all factors that are subsumed by some larger factor are merged with the larger factors. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="39ce217df7d9ea85b2b04b8d65101230"></a><!-- doxytag: member="dai::FactorGraph::restoreFactor" ref="39ce217df7d9ea85b2b04b8d65101230" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#39ce217df7d9ea85b2b04b8d65101230">restoreFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Makes a backup of the I'th Factor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e2fe32e831db3e649e6ddd66762fea7c"></a><!-- doxytag: member="dai::FactorGraph::backupFactor" ref="e2fe32e831db3e649e6ddd66762fea7c" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#e2fe32e831db3e649e6ddd66762fea7c">backupFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restores the I'th Factor from the backup (it should be backed up first). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8b3606b4ee589e4a0fb8fcdbdff97bae"></a><!-- doxytag: member="dai::FactorGraph::backupFactors" ref="8b3606b4ee589e4a0fb8fcdbdff97bae" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#8b3606b4ee589e4a0fb8fcdbdff97bae">backupFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Makes a backup of all factors connected to a set of variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4e042494d8e453005d0c8bfd788dc687"></a><!-- doxytag: member="dai::FactorGraph::restoreFactors" ref="4e042494d8e453005d0c8bfd788dc687" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#4e042494d8e453005d0c8bfd788dc687">restoreFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restores all factors connected to a set of variables from their backups. <br></td></tr>
<tr><td colspan="2"><br><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="67a15374178683fedb49355701a30576"></a><!-- doxytag: member="dai::FactorGraph::G" ref="67a15374178683fedb49355701a30576" args="" -->
<a class="el" href="classdai_1_1BipartiteGraph.html">BipartiteGraph</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#67a15374178683fedb49355701a30576">G</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stores the neighborhood structure. <br></td></tr>
<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c2f9ce21f6b9947b11c2bd731bb882d9"></a><!-- doxytag: member="dai::FactorGraph::operator&lt;&lt;" ref="c2f9ce21f6b9947b11c2bd731bb882d9" args="(std::ostream &amp;os, const FactorGraph &amp;fg)" -->
std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#c2f9ce21f6b9947b11c2bd731bb882d9">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> to an output stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5b4639a278afc734c0d4b074f53d87b5"></a><!-- doxytag: member="dai::FactorGraph::operator&gt;&gt;" ref="5b4639a278afc734c0d4b074f53d87b5" args="(std::istream &amp;is, FactorGraph &amp;fg)" -->
std::istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html#5b4639a278afc734c0d4b074f53d87b5">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reads a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from an input stream. <br></td></tr>
</table>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="15bdffc0b20cdfc99953b8e25e111059"></a><!-- doxytag: member="dai::FactorGraph::FactorGraph" ref="15bdffc0b20cdfc99953b8e25e111059" args="(FactorInputIterator fact_begin, FactorInputIterator fact_end, VarInputIterator var_begin, VarInputIterator var_end, size_t nr_fact_hint=0, size_t nr_var_hint=0)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename FactorInputIterator, typename VarInputIterator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">dai::FactorGraph::FactorGraph           </td>
          <td>(</td>
          <td class="paramtype">FactorInputIterator&nbsp;</td>
          <td class="paramname"> <em>fact_begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FactorInputIterator&nbsp;</td>
          <td class="paramname"> <em>fact_end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">VarInputIterator&nbsp;</td>
          <td class="paramname"> <em>var_begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">VarInputIterator&nbsp;</td>
          <td class="paramname"> <em>var_end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>nr_fact_hint</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>nr_var_hint</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from given factor and variable iterators. 
<p>
<dl compact><dt><b>Template Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>FactorInputIterator</em>&nbsp;</td><td>Iterator with value_type Factor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>VarInputIterator</em>&nbsp;</td><td>Iterator with value_type <a class="el" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> </td></tr>
  </table>
</dl>
<dl class="pre" compact><dt><b>Precondition:</b></dt><dd>Assumes that the set of variables in [var_begin,var_end) is the union of the variables in the factors in [fact_begin, fact_end) </dd></dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="3cb7d91ca96090372bd0aacbf70a8948"></a><!-- doxytag: member="dai::FactorGraph::clamp" ref="3cb7d91ca96090372bd0aacbf70a8948" args="(const Var &amp;n, size_t i, bool backup=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dai::FactorGraph::clamp           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>backup</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clamp variable n to value i (i.e. multiply with a Kronecker delta <img class="formulaInl" alt="$\delta_{x_n, i}$" src="form_0.png">); If backup == true, make a backup of all factors that are changed 
<p>Reimplemented in <a class="el" href="classdai_1_1DAIAlg.html#b7d537f1a9d116617d8dce722ce65dc0">dai::DAIAlg&lt; dai::RegionGraph &gt;</a>, and <a class="el" href="classdai_1_1DAIAlg.html#b7d537f1a9d116617d8dce722ce65dc0">dai::DAIAlg&lt; dai::FactorGraph &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="915d21c0da8c2c1f342371bef6adb0f5"></a><!-- doxytag: member="dai::FactorGraph::clamped" ref="915d21c0da8c2c1f342371bef6adb0f5" args="(const Var &amp;v_i, size_t x) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> dai::FactorGraph::clamped           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v_i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>x</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clamp variable v_i to value state (i.e. multiply with a Kronecker delta <img class="formulaInl" alt="$\delta_{x_{v_i},x}$" src="form_11.png">);. 
<p>
This version changes the factor graph structure and thus returns a newly constructed <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> and keeps the current one constant, contrary to <a class="el" href="classdai_1_1FactorGraph.html#3cb7d91ca96090372bd0aacbf70a8948">clamp()</a> 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>include/dai/<a class="el" href="factorgraph_8h-source.html">factorgraph.h</a><li>src/factorgraph.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:07 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/bp.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>bp.h</h1><a href="bp_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_bp_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_bp_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="enum_8h.html" title="Defines the DAI_ENUM macro.">dai/enum.h</a>&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>dai {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00042"></a><a class="code" href="classdai_1_1BP.html">00042</a> <span class="keyword">class </span><a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a> {
<a name="l00043"></a>00043     <span class="keyword">private</span>:
<a name="l00044"></a>00044         <span class="keyword">typedef</span> std::vector&lt;size_t&gt; ind_t;
<a name="l00045"></a>00045         <span class="keyword">struct </span>EdgeProp {
<a name="l00046"></a>00046             ind_t  index;
<a name="l00047"></a>00047             <a class="code" href="classdai_1_1TProb.html" title="Represents a probability measure on a finite outcome space (i.e., corresponding to...">Prob</a>   message;
<a name="l00048"></a>00048             <a class="code" href="classdai_1_1TProb.html" title="Represents a probability measure on a finite outcome space (i.e., corresponding to...">Prob</a>   newMessage;
<a name="l00049"></a>00049             <span class="keywordtype">double</span> residual;
<a name="l00050"></a>00050         };
<a name="l00051"></a>00051         std::vector&lt;std::vector&lt;EdgeProp&gt; &gt; _edges;
<a name="l00053"></a>00053         <span class="keywordtype">double</span> _maxdiff;
<a name="l00055"></a>00055         <span class="keywordtype">size_t</span> _iters;
<a name="l00056"></a>00056     
<a name="l00057"></a>00057     <span class="keyword">public</span>:
<a name="l00059"></a><a class="code" href="structdai_1_1BP_1_1Properties.html">00059</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1BP_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00061"></a>00061             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(UpdateType,SEQFIX,SEQRND,SEQMAX,PARALL)
<a name="l00062"></a>00062 
<a name="l00063"></a>00063             
<a name="l00064"></a>00064             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(InfType,SUMPROD,MAXPROD)
<a name="l00065"></a>00065         
<a name="l00066"></a>00066             
<a name="l00067"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#d9c97ddfdf7a2dc1de3eafe8d57b61ee">00067</a>             size_t <a class="code" href="structdai_1_1BP_1_1Properties.html#d9c97ddfdf7a2dc1de3eafe8d57b61ee" title="Enumeration of possible update schedules.">verbose</a>;
<a name="l00068"></a>00068 
<a name="l00070"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#d6b27ba966d824597b805d9bc8226f72">00070</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1BP_1_1Properties.html#d6b27ba966d824597b805d9bc8226f72" title="Maximum number of iterations.">maxiter</a>;
<a name="l00071"></a>00071 
<a name="l00073"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#6e47e4800d489c1d213f1d9a0781deac">00073</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1BP_1_1Properties.html#6e47e4800d489c1d213f1d9a0781deac" title="Tolerance.">tol</a>;
<a name="l00074"></a>00074 
<a name="l00076"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#71181d319e94f063c6a2fddb591a2b1a">00076</a>             <span class="keywordtype">bool</span> <a class="code" href="structdai_1_1BP_1_1Properties.html#71181d319e94f063c6a2fddb591a2b1a" title="Do updates in logarithmic domain?">logdomain</a>;
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#c36caab04a3fe03e198842fc7e04a9bc">00079</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1BP_1_1Properties.html#c36caab04a3fe03e198842fc7e04a9bc" title="Damping constant.">damping</a>;
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#4e08295ab9d02c28a73270f16ab8f7b7">00082</a>             UpdateType <a class="code" href="structdai_1_1BP_1_1Properties.html#4e08295ab9d02c28a73270f16ab8f7b7" title="Update schedule.">updates</a>;
<a name="l00083"></a>00083 
<a name="l00085"></a><a class="code" href="structdai_1_1BP_1_1Properties.html#85f4804c6f8d3579a61ccb3aa3cf454d">00085</a>             InfType <a class="code" href="structdai_1_1BP_1_1Properties.html#85f4804c6f8d3579a61ccb3aa3cf454d" title="Type of inference: sum-product or max-product?">inference</a>;
<a name="l00086"></a>00086         } <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>;
<a name="l00087"></a>00087 
<a name="l00089"></a><a class="code" href="classdai_1_1BP.html#f40ab22b371e927fd728569fdbcc607a">00089</a>         static const <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1BP.html#f40ab22b371e927fd728569fdbcc607a" title="Name of this inference algorithm.">Name</a>;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     public:
<a name="l00093"></a><a class="code" href="classdai_1_1BP.html#79a81420bd4370cdaad9d6a8d85c83a5">00093</a>         <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a>() : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(), _edges(), _maxdiff(0.0), _iters(0U), <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>() {}
<a name="l00094"></a>00094 
<a name="l00096"></a><a class="code" href="classdai_1_1BP.html#e8480cbb4a614119a211ffc03221ba47">00096</a>         <a class="code" href="classdai_1_1BP.html#79a81420bd4370cdaad9d6a8d85c83a5" title="Default constructor.">BP</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a> &amp;x ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(x), _edges(x._edges), _maxdiff(x._maxdiff), _iters(x._iters), <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>) {}
<a name="l00097"></a>00097 
<a name="l00099"></a><a class="code" href="classdai_1_1BP.html#ba6124da6c2a11b01c0f66cbe8ae9562">00099</a>         <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a>&amp; <a class="code" href="classdai_1_1BP.html#ba6124da6c2a11b01c0f66cbe8ae9562" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a> &amp;x ) {
<a name="l00100"></a>00100             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00101"></a>00101                 <a class="code" href="classdai_1_1DAIAlg.html#364afd19b16ac9233fd4b235b76317c8" title="Assignment operator.">DAIAlgFG::operator=</a>( x );
<a name="l00102"></a>00102                 _edges = x.<a class="code" href="classdai_1_1BP.html#e061035ab3cae0cea9c2dfdceb6d92f7">_edges</a>;
<a name="l00103"></a>00103                 _maxdiff = x.<a class="code" href="classdai_1_1BP.html#a256b9e4baaca8882f6be52ee6cf1d2c" title="Maximum difference encountered so far.">_maxdiff</a>;
<a name="l00104"></a>00104                 _iters = x.<a class="code" href="classdai_1_1BP.html#4fd3a6c1e6289d20d4caa5a6a575199d" title="Number of iterations needed.">_iters</a>;
<a name="l00105"></a>00105                 <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a> = x.<a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>;
<a name="l00106"></a>00106             }
<a name="l00107"></a>00107             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109 
<a name="l00111"></a><a class="code" href="classdai_1_1BP.html#cdfb5e4da942d55f02540d7a5fc29145">00111</a>         <a class="code" href="classdai_1_1BP.html#79a81420bd4370cdaad9d6a8d85c83a5" title="Default constructor.">BP</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp; <a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(fg), _edges(), _maxdiff(0.0), _iters(0U), <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>() {
<a name="l00112"></a>00112             setProperties( opts );
<a name="l00113"></a>00113             construct();
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="classdai_1_1BP.html#fedbd91bf39951ac3efca096183d6b48">00119</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a>* <a class="code" href="classdai_1_1BP.html#fedbd91bf39951ac3efca096183d6b48" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1BP.html#79a81420bd4370cdaad9d6a8d85c83a5" title="Default constructor.">BP</a>(*<span class="keyword">this</span>); }
<a name="l00120"></a><a class="code" href="classdai_1_1BP.html#43d048b5417b74f94eca669eca5eead4">00120</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1BP.html" title="Approximate inference algorithm &amp;quot;(Loopy) Belief Propagation&amp;quot;.">BP</a>* <a class="code" href="classdai_1_1BP.html#43d048b5417b74f94eca669eca5eead4" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1BP.html#79a81420bd4370cdaad9d6a8d85c83a5" title="Default constructor.">BP</a>(); }
<a name="l00121"></a>00121         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1BP.html#79d6acb552bc11638fe46dc5a6f68c4d" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00122"></a>00122         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1BP.html#1ff12f6f4b486bd53a46a12f7956c99c" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n ) <span class="keyword">const</span>;
<a name="l00123"></a>00123         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1BP.html#1ff12f6f4b486bd53a46a12f7956c99c" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns ) <span class="keyword">const</span>;
<a name="l00124"></a>00124         <span class="keyword">virtual</span> std::vector&lt;Factor&gt; <a class="code" href="classdai_1_1BP.html#9abc95e4018fa099278fcdbf8a7941b4" title="Returns all &amp;quot;beliefs&amp;quot; (i.e., approximate marginal probability distribution)...">beliefs</a>() <span class="keyword">const</span>;
<a name="l00125"></a>00125         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1BP.html#ed06ca9607cb04cfeb05909366d179ce" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>() <span class="keyword">const</span>;
<a name="l00126"></a>00126         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1BP.html#83349319b22a2d71b1f4ef39709365f9" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00127"></a>00127         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1BP.html#83349319b22a2d71b1f4ef39709365f9" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns );
<a name="l00128"></a>00128         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1BP.html#65e6e4e56d227a17d086c5fc8931d3ff" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00129"></a><a class="code" href="classdai_1_1BP.html#9954b795f95ae1730d4e09a06afd8ee4">00129</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1BP.html#9954b795f95ae1730d4e09a06afd8ee4">maxDiff</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _maxdiff; }
<a name="l00130"></a><a class="code" href="classdai_1_1BP.html#be6cbc2992d38144198c8f4ea731a26e">00130</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1BP.html#be6cbc2992d38144198c8f4ea731a26e">Iterations</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _iters; }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> beliefV( <span class="keywordtype">size_t</span> i ) <span class="keyword">const</span>;
<a name="l00137"></a>00137         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> beliefF( <span class="keywordtype">size_t</span> I ) <span class="keyword">const</span>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keyword">private</span>:
<a name="l00141"></a>00141         <span class="keyword">const</span> <a class="code" href="classdai_1_1TProb.html" title="Represents a probability measure on a finite outcome space (i.e., corresponding to...">Prob</a> &amp; message(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _edges[i][_I].message; }
<a name="l00142"></a>00142         <a class="code" href="namespacedai.html#90f06137ef74bb483e30ee2c7e31b2c8" title="Represents a probability measure, with entries of type Real.">Prob</a> &amp; message(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I) { <span class="keywordflow">return</span> _edges[i][_I].message; }
<a name="l00143"></a>00143         <a class="code" href="namespacedai.html#90f06137ef74bb483e30ee2c7e31b2c8" title="Represents a probability measure, with entries of type Real.">Prob</a> &amp; newMessage(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I) { <span class="keywordflow">return</span> _edges[i][_I].newMessage; }
<a name="l00144"></a>00144         <span class="keyword">const</span> <a class="code" href="namespacedai.html#90f06137ef74bb483e30ee2c7e31b2c8" title="Represents a probability measure, with entries of type Real.">Prob</a> &amp; newMessage(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _edges[i][_I].newMessage; }
<a name="l00145"></a>00145         ind_t &amp; index(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I) { <span class="keywordflow">return</span> _edges[i][_I].index; }
<a name="l00146"></a>00146         <span class="keyword">const</span> ind_t &amp; index(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _edges[i][_I].index; }
<a name="l00147"></a>00147         <span class="keywordtype">double</span> &amp; residual(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I) { <span class="keywordflow">return</span> _edges[i][_I].residual; }
<a name="l00148"></a>00148         <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; residual(<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _edges[i][_I].residual; }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <span class="keywordtype">void</span> calcNewMessage( <span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I );
<a name="l00151"></a>00151         <span class="keywordtype">void</span> updateMessage( <span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I ) {
<a name="l00152"></a>00152             <span class="keywordflow">if</span>( <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>.<a class="code" href="structdai_1_1BP_1_1Properties.html#c36caab04a3fe03e198842fc7e04a9bc" title="Damping constant.">damping</a> == 0.0 ) {
<a name="l00153"></a>00153                 message(i,_I) = newMessage(i,_I);
<a name="l00154"></a>00154                 residual(i,_I) = 0.0;
<a name="l00155"></a>00155             } <span class="keywordflow">else</span> {
<a name="l00156"></a>00156                 message(i,_I) = (message(i,_I) ^ <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>.<a class="code" href="structdai_1_1BP_1_1Properties.html#c36caab04a3fe03e198842fc7e04a9bc" title="Damping constant.">damping</a>) * (newMessage(i,_I) ^ (1.0 - <a class="code" href="classdai_1_1BP.html#ba42a6eb1857b7f18f5072a25800ae63" title="Parameters of this inference algorithm.">props</a>.<a class="code" href="structdai_1_1BP_1_1Properties.html#c36caab04a3fe03e198842fc7e04a9bc" title="Damping constant.">damping</a>));
<a name="l00157"></a>00157                 residual(i,_I) = <a class="code" href="namespacedai.html#21104476f853192821ff6685732ac0af" title="Returns distance between two Factors (with identical vars()).">dist</a>( newMessage(i,_I), message(i,_I), Prob::DISTLINF );
<a name="l00158"></a>00158             }
<a name="l00159"></a>00159         }
<a name="l00160"></a>00160         <span class="keywordtype">void</span> findMaxResidual( <span class="keywordtype">size_t</span> &amp;i, <span class="keywordtype">size_t</span> &amp;_I );
<a name="l00161"></a>00161 
<a name="l00162"></a>00162         <span class="keywordtype">void</span> construct();
<a name="l00164"></a>00164         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> PropertySet &amp;opts );
<a name="l00165"></a>00165         PropertySet getProperties() <span class="keyword">const</span>;
<a name="l00166"></a>00166         std::string printProperties() <span class="keyword">const</span>;
<a name="l00167"></a>00167 };
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 } <span class="comment">// end of namespace dai</span>
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

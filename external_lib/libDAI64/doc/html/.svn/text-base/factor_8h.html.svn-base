<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/factor.h File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>factor.h File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
Defines TFactor&lt;T&gt; and Factor classes. 
<p>

<p>
<code>#include &lt;iostream&gt;</code><br>
<code>#include &lt;cmath&gt;</code><br>
<code>#include &lt;<a class="el" href="prob_8h-source.html">dai/prob.h</a>&gt;</code><br>
<code>#include &lt;<a class="el" href="varset_8h-source.html">dai/varset.h</a>&gt;</code><br>
<code>#include &lt;<a class="el" href="index_8h-source.html">dai/index.h</a>&gt;</code><br>

<p>
<a href="factor_8h-source.html">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html">dai</a></td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1TFactor.html">dai::TFactor&lt; T &gt;</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a probability factor.  <a href="classdai_1_1TFactor.html#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7515abf9952cd312e95a34ada0670e85"></a><!-- doxytag: member="factor.h::Factor" ref="7515abf9952cd312e95a34ada0670e85" args="" -->
typedef TFactor&lt; Real &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85">dai::Factor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a factor with probability entries represented as Real. <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="dbcd0bf0cd16bda03f4483530611dbae"></a><!-- doxytag: member="factor.h::operator&lt;&lt;" ref="dbcd0bf0cd16bda03f4483530611dbae" args="(std::ostream &amp;os, const TFactor&lt; T &gt; &amp;P)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#dbcd0bf0cd16bda03f4483530611dbae">dai::operator&lt;&lt;</a> (std::ostream &amp;os, const TFactor&lt; T &gt; &amp;P)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a Factor to an output stream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="21104476f853192821ff6685732ac0af"></a><!-- doxytag: member="factor.h::dist" ref="21104476f853192821ff6685732ac0af" args="(const TFactor&lt; T &gt; &amp;x, const TFactor&lt; T &gt; &amp;y, Prob::DistType dt)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">Real&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#21104476f853192821ff6685732ac0af">dai::dist</a> (const TFactor&lt; T &gt; &amp;x, const TFactor&lt; T &gt; &amp;y, Prob::DistType dt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns distance between two Factors (with identical vars()). <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="26014cccb4cc16b53e83d350e280a705"></a><!-- doxytag: member="factor.h::max" ref="26014cccb4cc16b53e83d350e280a705" args="(const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">TFactor&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#26014cccb4cc16b53e83d350e280a705">dai::max</a> (const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pointwise maximum of two Factors. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="0957f2d605d64a2e13b8dc3eb9fc8800"></a><!-- doxytag: member="factor.h::min" ref="0957f2d605d64a2e13b8dc3eb9fc8800" args="(const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">TFactor&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#0957f2d605d64a2e13b8dc3eb9fc8800">dai::min</a> (const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pointwise minimum of two Factors. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="716237fb73c302a0ee0d3e334d71517c"></a><!-- doxytag: member="factor.h::MutualInfo" ref="716237fb73c302a0ee0d3e334d71517c" args="(const TFactor&lt; T &gt; &amp;P)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">Real&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#716237fb73c302a0ee0d3e334d71517c">dai::MutualInfo</a> (const TFactor&lt; T &gt; &amp;P)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates the mutual information between the two variables in P. <br></td></tr>
</table>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/mf.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>mf.h</h1><a href="mf_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_mf_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_mf_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>dai {
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00041"></a><a class="code" href="classdai_1_1MF.html">00041</a> <span class="keyword">class </span><a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a> {
<a name="l00042"></a>00042     <span class="keyword">private</span>:
<a name="l00043"></a>00043         std::vector&lt;Factor&gt;  _beliefs;
<a name="l00045"></a>00045         <span class="keywordtype">double</span> _maxdiff;
<a name="l00047"></a>00047         <span class="keywordtype">size_t</span> _iters;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keyword">public</span>:
<a name="l00051"></a><a class="code" href="structdai_1_1MF_1_1Properties.html">00051</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1MF_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00053"></a><a class="code" href="structdai_1_1MF_1_1Properties.html#3ec9f65a2ddfbae3b757c00c589a0777">00053</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1MF_1_1Properties.html#3ec9f65a2ddfbae3b757c00c589a0777" title="Verbosity.">verbose</a>;
<a name="l00054"></a>00054 
<a name="l00056"></a><a class="code" href="structdai_1_1MF_1_1Properties.html#5818c3f97e389ce353ce791129a0d542">00056</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1MF_1_1Properties.html#5818c3f97e389ce353ce791129a0d542" title="Maximum number of iterations.">maxiter</a>;
<a name="l00057"></a>00057 
<a name="l00059"></a><a class="code" href="structdai_1_1MF_1_1Properties.html#70d6b996d4e0f9327a6f6f23aafae953">00059</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1MF_1_1Properties.html#70d6b996d4e0f9327a6f6f23aafae953" title="Tolerance.">tol</a>;
<a name="l00060"></a>00060 
<a name="l00062"></a><a class="code" href="structdai_1_1MF_1_1Properties.html#ba47da336eebca6bc7c066304ef47ab7">00062</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1MF_1_1Properties.html#ba47da336eebca6bc7c066304ef47ab7" title="Damping constant.">damping</a>;
<a name="l00063"></a>00063         } <a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>;
<a name="l00064"></a>00064 
<a name="l00066"></a><a class="code" href="classdai_1_1MF.html#ad41c263042fe7c780d404b4b32574f8">00066</a>         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1MF.html#ad41c263042fe7c780d404b4b32574f8" title="Name of this inference algorithm.">Name</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="keyword">public</span>:
<a name="l00070"></a><a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c">00070</a>         <a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c" title="Default constructor.">MF</a>() : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(), _beliefs(), _maxdiff(0.0), _iters(0U), <a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>() {}
<a name="l00071"></a>00071 
<a name="l00073"></a><a class="code" href="classdai_1_1MF.html#813ea21faea74d26067ac0876d2f89d6">00073</a>         <a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c" title="Default constructor.">MF</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a> &amp;x ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(x), _beliefs(x._beliefs), _maxdiff(x._maxdiff), _iters(x._iters), <a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>) {}
<a name="l00074"></a>00074 
<a name="l00076"></a><a class="code" href="classdai_1_1MF.html#d8f30354060027fbb96f303947163dbc">00076</a>         <a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a>&amp; <a class="code" href="classdai_1_1MF.html#d8f30354060027fbb96f303947163dbc" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a> &amp;x ) {
<a name="l00077"></a>00077             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00078"></a>00078                 <a class="code" href="classdai_1_1DAIAlg.html#364afd19b16ac9233fd4b235b76317c8" title="Assignment operator.">DAIAlgFG::operator=</a>( x );
<a name="l00079"></a>00079                 _beliefs = x.<a class="code" href="classdai_1_1MF.html#970549645b5ae875cef11eac5b9a0a18">_beliefs</a>;
<a name="l00080"></a>00080                 _maxdiff = x.<a class="code" href="classdai_1_1MF.html#361bacefc5c8c5dd4a4ee5a16f045adf" title="Maximum difference encountered so far.">_maxdiff</a>;
<a name="l00081"></a>00081                 _iters   = x.<a class="code" href="classdai_1_1MF.html#71257d2e7e00cecb2ff74cb1a26eeac2" title="Number of iterations needed.">_iters</a>;
<a name="l00082"></a>00082                 <a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>    = x.<a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>;
<a name="l00083"></a>00083             }
<a name="l00084"></a>00084             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 
<a name="l00088"></a><a class="code" href="classdai_1_1MF.html#968fe2b9d9cc604a9d81c9ea15be8d72">00088</a>         <a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c" title="Default constructor.">MF</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp;<a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(fg), _beliefs(), _maxdiff(0.0), _iters(0U), <a class="code" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c" title="Parameters of this inference algorithm.">props</a>() {
<a name="l00089"></a>00089             setProperties( opts );
<a name="l00090"></a>00090             construct();
<a name="l00091"></a>00091         }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 
<a name="l00096"></a><a class="code" href="classdai_1_1MF.html#c209b5cd623a33d0d1b0041d0a7cdf10">00096</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a>* <a class="code" href="classdai_1_1MF.html#c209b5cd623a33d0d1b0041d0a7cdf10" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c" title="Default constructor.">MF</a>(*<span class="keyword">this</span>); }
<a name="l00097"></a><a class="code" href="classdai_1_1MF.html#d74dbcd156314d1b6072c80917847587">00097</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1MF.html" title="Approximate inference algorithm &amp;quot;Mean Field&amp;quot;.">MF</a>* <a class="code" href="classdai_1_1MF.html#d74dbcd156314d1b6072c80917847587" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c" title="Default constructor.">MF</a>(); }
<a name="l00098"></a>00098         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1MF.html#f4e80fe7390fbb3e2496b1056b05c5e4" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00099"></a>00099         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1MF.html#cee4df06c59d8e6ab4663129d59b419e" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n ) <span class="keyword">const</span>;
<a name="l00100"></a>00100         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1MF.html#cee4df06c59d8e6ab4663129d59b419e" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns ) <span class="keyword">const</span>;
<a name="l00101"></a>00101         <span class="keyword">virtual</span> std::vector&lt;Factor&gt; <a class="code" href="classdai_1_1MF.html#a6c307192d3b4141e2d1b0b46f3319a8" title="Returns all &amp;quot;beliefs&amp;quot; (i.e., approximate marginal probability distribution)...">beliefs</a>() <span class="keyword">const</span>;
<a name="l00102"></a>00102         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1MF.html#ad8b559b72143257ca997bd5975a1d69" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>() <span class="keyword">const</span>;
<a name="l00103"></a>00103         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1MF.html#eb993d502d0cb97424ebff82e0cf6839" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00104"></a>00104         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1MF.html#eb993d502d0cb97424ebff82e0cf6839" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns );
<a name="l00105"></a>00105         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1MF.html#bd9d1de4bfb3fb538c9949a7c82d7984" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00106"></a><a class="code" href="classdai_1_1MF.html#032b149026f011a5cbcd01eb08a3b8dc">00106</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1MF.html#032b149026f011a5cbcd01eb08a3b8dc">maxDiff</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _maxdiff; }
<a name="l00107"></a><a class="code" href="classdai_1_1MF.html#e2daf3cd007572d19d6156f2484db4fd">00107</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1MF.html#e2daf3cd007572d19d6156f2484db4fd">Iterations</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _iters; }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> beliefV( <span class="keywordtype">size_t</span> i ) <span class="keyword">const</span>;
<a name="l00115"></a>00115         
<a name="l00116"></a>00116     <span class="keyword">private</span>:
<a name="l00117"></a>00117         <span class="keywordtype">void</span> construct();
<a name="l00118"></a>00118         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00119"></a>00119         <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> getProperties() <span class="keyword">const</span>;
<a name="l00120"></a>00120         std::string printProperties() <span class="keyword">const</span>;
<a name="l00121"></a>00121 };
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 } <span class="comment">// end of namespace dai</span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

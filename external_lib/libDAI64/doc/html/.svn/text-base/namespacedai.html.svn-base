<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: dai Namespace Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li class="current"><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="namespaces.html"><span>Namespace List</span></a></li>
      <li><a href="namespacemembers.html"><span>Namespace&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>dai Namespace Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
Namespace for libDAI. 
<p>

<p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1BipartiteGraph.html">BipartiteGraph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the neighborhood structure of nodes in a bipartite graph.  <a href="classdai_1_1BipartiteGraph.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1BP.html">BP</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm "(Loopy) Belief Propagation".  <a href="classdai_1_1BP.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1ClusterGraph.html">ClusterGraph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A <a class="el" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> is a hypergraph with VarSets as nodes.  <a href="classdai_1_1ClusterGraph.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1InfAlg.html">InfAlg</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classdai_1_1InfAlg.html" title="InfAlg is an abstract base class, defining the common interface of all inference...">InfAlg</a> is an abstract base class, defining the common interface of all inference algorithms in libDAI.  <a href="classdai_1_1InfAlg.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html">DAIAlg</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Combines an <a class="el" href="classdai_1_1InfAlg.html" title="InfAlg is an abstract base class, defining the common interface of all inference...">InfAlg</a> and a graphical model, e.g., a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> or <a class="el" href="classdai_1_1RegionGraph.html" title="A RegionGraph is a bipartite graph consisting of outer regions (type FRegion) and...">RegionGraph</a>.  <a href="classdai_1_1DAIAlg.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1ExactInf.html">ExactInf</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Exact inference algorithm using brute force enumeration (mainly useful for testing purposes).  <a href="classdai_1_1ExactInf.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1Exception.html">Exception</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents an exception (based on std::runtime_error).  <a href="classdai_1_1Exception.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1TFactor.html">TFactor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a probability factor.  <a href="classdai_1_1TFactor.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a factor graph.  <a href="classdai_1_1FactorGraph.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1HAK.html">HAK</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm: implementation of single-loop ("Generalized Belief Propagation") and double-loop algorithms by Heskes, Albers and Kappen.  <a href="classdai_1_1HAK.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1IndexFor.html">IndexFor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tool for looping over the states of several variables.  <a href="classdai_1_1IndexFor.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MultiFor.html">MultiFor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a> makes it easy to perform a dynamic number of nested for loops.  <a href="classdai_1_1MultiFor.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1Permute.html">Permute</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tool for calculating permutations of multiple indices.  <a href="classdai_1_1Permute.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1State.html">State</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Contains the joint state of variables within a <a class="el" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> and useful things to do with this information.  <a href="classdai_1_1State.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1JTree.html">JTree</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Exact inference algorithm using junction tree.  <a href="classdai_1_1JTree.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html">LC</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm "Loop Corrected Belief Propagation" by Mooij and Kappen.  <a href="classdai_1_1LC.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html">MF</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm "Mean Field".  <a href="classdai_1_1MF.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MR.html">MR</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm by Montanari and Rizzo.  <a href="classdai_1_1MR.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1TProb.html">TProb</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a probability measure on a finite outcome space (i.e., corresponding to a discrete random variable).  <a href="classdai_1_1TProb.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1PropertySet.html">PropertySet</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a set of properties, mapping keys (of type PropertyKey) to values (of type PropertyValue).  <a href="classdai_1_1PropertySet.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1Region.html">Region</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A <a class="el" href="classdai_1_1Region.html" title="A Region is a set of variables with a counting number.">Region</a> is a set of variables with a counting number.  <a href="classdai_1_1Region.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1FRegion.html">FRegion</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A <a class="el" href="classdai_1_1FRegion.html" title="A FRegion is a factor with a counting number.">FRegion</a> is a factor with a counting number.  <a href="classdai_1_1FRegion.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1RegionGraph.html">RegionGraph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A <a class="el" href="classdai_1_1RegionGraph.html" title="A RegionGraph is a bipartite graph consisting of outer regions (type FRegion) and...">RegionGraph</a> is a bipartite graph consisting of outer regions (type <a class="el" href="classdai_1_1FRegion.html" title="A FRegion is a factor with a counting number.">FRegion</a>) and inner regions (type <a class="el" href="classdai_1_1Region.html" title="A Region is a set of variables with a counting number.">Region</a>).  <a href="classdai_1_1RegionGraph.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1smallSet.html">smallSet</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a set (optimized for a small number of elements).  <a href="classdai_1_1smallSet.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1TreeEP.html">TreeEP</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Approximate inference algorithm "TreeEP" by Minka and Qi.  <a href="classdai_1_1TreeEP.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1hash__map.html">hash_map</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classdai_1_1hash__map.html" title="hash_map is an alias for std::tr1::unordered_map.">hash_map</a> is an alias for std::tr1::unordered_map.  <a href="classdai_1_1hash__map.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1Diffs.html">Diffs</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to keep track of the progress made by iterative algorithms.  <a href="classdai_1_1Diffs.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1Var.html">Var</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a discrete random variable.  <a href="classdai_1_1Var.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1VarSet.html">VarSet</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a set of variables.  <a href="classdai_1_1VarSet.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DEdge.html">DEdge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a directed edge pointing from n1 to n2.  <a href="classdai_1_1DEdge.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1UEdge.html">UEdge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Undirected edge between nodes n1 and n2.  <a href="classdai_1_1UEdge.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1WeightedGraph.html">WeightedGraph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents an undirected weighted graph, with weights of type T.  <a href="classdai_1_1WeightedGraph.html#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d2fa14208786f0746805efc9fbf3e56e"></a><!-- doxytag: member="dai::_rnd_gen_type" ref="d2fa14208786f0746805efc9fbf3e56e" args="" -->
typedef boost::minstd_rand&nbsp;</td><td class="memItemRight" valign="bottom"><b>_rnd_gen_type</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4d66d71f2b2c7ac4845bba057eb7cee5"></a><!-- doxytag: member="dai::DAIAlgFG" ref="4d66d71f2b2c7ac4845bba057eb7cee5" args="" -->
typedef <a class="el" href="classdai_1_1DAIAlg.html">DAIAlg</a>&lt; <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#4d66d71f2b2c7ac4845bba057eb7cee5">DAIAlgFG</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for inference algorithms that operate on a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6b5cb6d79a324915d2c88ad368437e21"></a><!-- doxytag: member="dai::DAIAlgRG" ref="6b5cb6d79a324915d2c88ad368437e21" args="" -->
typedef <a class="el" href="classdai_1_1DAIAlg.html">DAIAlg</a>&lt; <a class="el" href="classdai_1_1RegionGraph.html">RegionGraph</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#6b5cb6d79a324915d2c88ad368437e21">DAIAlgRG</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for inference algorithms that operate on a <a class="el" href="classdai_1_1RegionGraph.html" title="A RegionGraph is a bipartite graph consisting of outer regions (type FRegion) and...">RegionGraph</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7515abf9952cd312e95a34ada0670e85"></a><!-- doxytag: member="dai::Factor" ref="7515abf9952cd312e95a34ada0670e85" args="" -->
typedef <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; <a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85">Factor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a factor with probability entries represented as Real. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e7d0472fdc89a8635825d01940e91cbf"></a><!-- doxytag: member="dai::Real" ref="e7d0472fdc89a8635825d01940e91cbf" args="" -->
typedef double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Real number (alias for double, could be changed to long double if necessary). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="90f06137ef74bb483e30ee2c7e31b2c8"></a><!-- doxytag: member="dai::Prob" ref="90f06137ef74bb483e30ee2c7e31b2c8" args="" -->
typedef <a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; <a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#90f06137ef74bb483e30ee2c7e31b2c8">Prob</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a probability measure, with entries of type Real. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cc877a85f4f4dbb6a0d58c434bb2b996"></a><!-- doxytag: member="dai::PropertyKey" ref="cc877a85f4f4dbb6a0d58c434bb2b996" args="" -->
typedef std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996">PropertyKey</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Type of the key of a Property. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="eb056b768d73d02c5796c4012f4170c7"></a><!-- doxytag: member="dai::PropertyValue" ref="eb056b768d73d02c5796c4012f4170c7" args="" -->
typedef boost::any&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7">PropertyValue</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Type of the value of a Property. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cbc670414e04eecf5c284e42d9d036e3"></a><!-- doxytag: member="dai::Property" ref="cbc670414e04eecf5c284e42d9d036e3" args="" -->
typedef std::pair&lt; <a class="el" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996">PropertyKey</a>, <br>
<a class="el" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7">PropertyValue</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#cbc670414e04eecf5c284e42d9d036e3">Property</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A Property is a pair of a key and a corresponding value. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ee930c2594ad57112ff5e230c4ca3391"></a><!-- doxytag: member="dai::UEdgeVec" ref="ee930c2594ad57112ff5e230c4ca3391" args="" -->
typedef std::vector&lt; <a class="el" href="classdai_1_1UEdge.html">UEdge</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391">UEdgeVec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector of <a class="el" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e7764251ab4d4b2d4fbec214eac83079"></a><!-- doxytag: member="dai::DEdgeVec" ref="e7764251ab4d4b2d4fbec214eac83079" args="" -->
typedef std::vector&lt; <a class="el" href="classdai_1_1DEdge.html">DEdge</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector of <a class="el" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="dfcfd53771d59db79ddd826928e76400"></a><!-- doxytag: member="dai::Graph" ref="dfcfd53771d59db79ddd826928e76400" args="" -->
typedef std::set&lt; <a class="el" href="classdai_1_1UEdge.html">UEdge</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400">Graph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents an undirected graph. <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#4b9e5254e7ec388e69aa68dfc54509e0">newInfAlg</a> (const std::string &amp;name, const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;opts)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a new approximate inference algorithm.  <a href="#4b9e5254e7ec388e69aa68dfc54509e0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="aca72feba62fa99197ef6b9f8bc72e3e"></a><!-- doxytag: member="dai::calcMarginal" ref="aca72feba62fa99197ef6b9f8bc72e3e" args="(const InfAlg &amp;obj, const VarSet &amp;ns, bool reInit)" -->
<a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#aca72feba62fa99197ef6b9f8bc72e3e">calcMarginal</a> (const <a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> &amp;obj, const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns, bool reInit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates the marginal of obj on ns by clamping all variables in ns and calculating logZ for each joined state. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="22940584470b8ef98412e92427fb8a91"></a><!-- doxytag: member="dai::calcPairBeliefs" ref="22940584470b8ef98412e92427fb8a91" args="(const InfAlg &amp;obj, const VarSet &amp;ns, bool reInit)" -->
vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#22940584470b8ef98412e92427fb8a91">calcPairBeliefs</a> (const <a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> &amp;obj, const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns, bool reInit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates beliefs of all pairs in ns (by clamping nodes in ns and calculating logZ and the beliefs for each state). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3ef899f27a3662e771e978bca7615f33"></a><!-- doxytag: member="dai::calcMarginal2ndO" ref="3ef899f27a3662e771e978bca7615f33" args="(const InfAlg &amp;obj, const VarSet &amp;ns, bool reInit)" -->
<a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#3ef899f27a3662e771e978bca7615f33">calcMarginal2ndO</a> (const <a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> &amp;obj, const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns, bool reInit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates beliefs of all pairs in ns (by clamping pairs in ns and calculating logZ for each joined state). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5a70c8cebb3df468779b93704af33a2e"></a><!-- doxytag: member="dai::calcPairBeliefsNew" ref="5a70c8cebb3df468779b93704af33a2e" args="(const InfAlg &amp;obj, const VarSet &amp;ns, bool reInit)" -->
vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#5a70c8cebb3df468779b93704af33a2e">calcPairBeliefsNew</a> (const <a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> &amp;obj, const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns, bool reInit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates 2nd order interactions of the marginal of obj on ns. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5142341b00644dce3b6f982cc6d283c0"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="5142341b00644dce3b6f982cc6d283c0" args="(ostream &amp;os, const FactorGraph &amp;fg)" -->
ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#5142341b00644dce3b6f982cc6d283c0">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> to an output stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9d1623757eae10cc61ff92dcd98b7290"></a><!-- doxytag: member="dai::operator&gt;&gt;" ref="9d1623757eae10cc61ff92dcd98b7290" args="(istream &amp;is, FactorGraph &amp;fg)" -->
istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#9d1623757eae10cc61ff92dcd98b7290">operator&gt;&gt;</a> (istream &amp;is, <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reads a <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> from an input stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c63c2f1d67d01aeda5c3cdd95843ea86"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="c63c2f1d67d01aeda5c3cdd95843ea86" args="(std::ostream &amp;os, const Property &amp;p)" -->
std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#c63c2f1d67d01aeda5c3cdd95843ea86">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="namespacedai.html#cbc670414e04eecf5c284e42d9d036e3">Property</a> &amp;p)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a Property object to an output stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b339baefa9f588de2fba07526d8df7ba"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="b339baefa9f588de2fba07526d8df7ba" args="(std::ostream &amp;os, const PropertySet &amp;ps)" -->
std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#b339baefa9f588de2fba07526d8df7ba">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;ps)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a <a class="el" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> object to an output stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ab0479dd285fd4021ecaa80947d40da3"></a><!-- doxytag: member="dai::operator&gt;&gt;" ref="ab0479dd285fd4021ecaa80947d40da3" args="(std::istream &amp;is, PropertySet &amp;ps)" -->
std::istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#ab0479dd285fd4021ecaa80947d40da3">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;ps)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reads a <a class="el" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> object from an input stream, storing values as strings. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0e910ae9247869ee549df8eed173a6df"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="0e910ae9247869ee549df8eed173a6df" args="(ostream &amp;os, const RegionGraph &amp;rg)" -->
ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#0e910ae9247869ee549df8eed173a6df">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classdai_1_1RegionGraph.html">RegionGraph</a> &amp;rg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send <a class="el" href="classdai_1_1RegionGraph.html" title="A RegionGraph is a bipartite graph consisting of outer regions (type FRegion) and...">RegionGraph</a> to output stream. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b27c0799ddef29bb3833477e32c53862"></a><!-- doxytag: member="dai::toc" ref="b27c0799ddef29bb3833477e32c53862" args="()" -->
double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#b27c0799ddef29bb3833477e32c53862">toc</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the time in seconds. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8676cd0faacaec12b2acf0e0472e3280"></a><!-- doxytag: member="dai::_rnd_gen" ref="8676cd0faacaec12b2acf0e0472e3280" args="(42U)" -->
_rnd_gen_type&nbsp;</td><td class="memItemRight" valign="bottom"><b>_rnd_gen</b> (42U)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c351fd5d4833c533592d179d97f64ef8"></a><!-- doxytag: member="dai::_uni_dist" ref="c351fd5d4833c533592d179d97f64ef8" args="(0, 1)" -->
boost::uniform_real&nbsp;</td><td class="memItemRight" valign="bottom"><b>_uni_dist</b> (0, 1)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="917c487cfce021627972a12d644c0e9d"></a><!-- doxytag: member="dai::_uni_rnd" ref="917c487cfce021627972a12d644c0e9d" args="(_rnd_gen, _uni_dist)" -->
boost::variate_generator<br>
&lt; _rnd_gen_type <br>
&amp;, boost::uniform_real&lt;&gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><b>_uni_rnd</b> (_rnd_gen, _uni_dist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e8632edc2f82d536ec59fd5a50e8bf47"></a><!-- doxytag: member="dai::_normal_rnd" ref="e8632edc2f82d536ec59fd5a50e8bf47" args="(_rnd_gen, _normal_dist)" -->
boost::variate_generator<br>
&lt; _rnd_gen_type <br>
&amp;, boost::normal_distribution&lt;&gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><b>_normal_rnd</b> (_rnd_gen, _normal_dist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e699eca7ca4d6e971b54c2b4a95942d4"></a><!-- doxytag: member="dai::rnd_seed" ref="e699eca7ca4d6e971b54c2b4a95942d4" args="(size_t seed)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#e699eca7ca4d6e971b54c2b4a95942d4">rnd_seed</a> (size_t seed)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the random seed. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="409fb3c0ffc14bf9e03a45014a9b4093"></a><!-- doxytag: member="dai::rnd_uniform" ref="409fb3c0ffc14bf9e03a45014a9b4093" args="()" -->
double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#409fb3c0ffc14bf9e03a45014a9b4093">rnd_uniform</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a real number, distributed uniformly on [0,1). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4367d2d1c1518023dd91b645d641fce7"></a><!-- doxytag: member="dai::rnd_stdnormal" ref="4367d2d1c1518023dd91b645d641fce7" args="()" -->
double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#4367d2d1c1518023dd91b645d641fce7">rnd_stdnormal</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a real number from a standard-normal distribution. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c02317b960b112637976333f90d1f937"></a><!-- doxytag: member="dai::rnd_int" ref="c02317b960b112637976333f90d1f937" args="(int min, int max)" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#c02317b960b112637976333f90d1f937">rnd_int</a> (int min, int max)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a random integer in interval [min, max]. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="602bda76af8301b981bc9147793d72e0"></a><!-- doxytag: member="dai::GrowRootedTree" ref="602bda76af8301b981bc9147793d72e0" args="(const Graph &amp;T, size_t Root)" -->
<a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#602bda76af8301b981bc9147793d72e0">GrowRootedTree</a> (const <a class="el" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400">Graph</a> &amp;T, size_t Root)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a rooted tree from a tree and a root. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7e19e088006a5e91e0d34d26cf6f3a8d"></a><!-- doxytag: member="dai::RandomDRegularGraph" ref="7e19e088006a5e91e0d34d26cf6f3a8d" args="(size_t N, size_t d)" -->
<a class="el" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391">UEdgeVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#7e19e088006a5e91e0d34d26cf6f3a8d">RandomDRegularGraph</a> (size_t N, size_t d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a random undirected graph of N nodes, where each node has connectivity d. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="dbcd0bf0cd16bda03f4483530611dbae"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="dbcd0bf0cd16bda03f4483530611dbae" args="(std::ostream &amp;os, const TFactor&lt; T &gt; &amp;P)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#dbcd0bf0cd16bda03f4483530611dbae">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;P)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a Factor to an output stream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="21104476f853192821ff6685732ac0af"></a><!-- doxytag: member="dai::dist" ref="21104476f853192821ff6685732ac0af" args="(const TFactor&lt; T &gt; &amp;x, const TFactor&lt; T &gt; &amp;y, Prob::DistType dt)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a>&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#21104476f853192821ff6685732ac0af">dist</a> (const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;x, const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;y, <a class="el" href="classdai_1_1TProb.html#492487fd71f6e87673853e5e2fda2f27">Prob::DistType</a> dt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns distance between two Factors (with identical vars()). <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="26014cccb4cc16b53e83d350e280a705"></a><!-- doxytag: member="dai::max" ref="26014cccb4cc16b53e83d350e280a705" args="(const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#26014cccb4cc16b53e83d350e280a705">max</a> (const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;P, const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;Q)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pointwise maximum of two Factors. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="0957f2d605d64a2e13b8dc3eb9fc8800"></a><!-- doxytag: member="dai::min" ref="0957f2d605d64a2e13b8dc3eb9fc8800" args="(const TFactor&lt; T &gt; &amp;P, const TFactor&lt; T &gt; &amp;Q)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#0957f2d605d64a2e13b8dc3eb9fc8800">min</a> (const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;P, const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;Q)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pointwise minimum of two Factors. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="716237fb73c302a0ee0d3e334d71517c"></a><!-- doxytag: member="dai::MutualInfo" ref="716237fb73c302a0ee0d3e334d71517c" args="(const TFactor&lt; T &gt; &amp;P)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a>&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#716237fb73c302a0ee0d3e334d71517c">MutualInfo</a> (const <a class="el" href="classdai_1_1TFactor.html">TFactor</a>&lt; T &gt; &amp;P)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates the mutual information between the two variables in P. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="db3928b138c1ec8f06433a84a670f56c"></a><!-- doxytag: member="dai::min" ref="db3928b138c1ec8f06433a84a670f56c" args="(const TProb&lt; T &gt; &amp;a, const TProb&lt; T &gt; &amp;b)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#db3928b138c1ec8f06433a84a670f56c">min</a> (const <a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt; &amp;a, const <a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt; &amp;b)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns TProb&lt;T&gt; containing the pointwise minimum of a and b (which should have equal size). <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="1d1e1236b5993b3cbdca8302d5305021"></a><!-- doxytag: member="dai::max" ref="1d1e1236b5993b3cbdca8302d5305021" args="(const TProb&lt; T &gt; &amp;a, const TProb&lt; T &gt; &amp;b)" -->
template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#1d1e1236b5993b3cbdca8302d5305021">max</a> (const <a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt; &amp;a, const <a class="el" href="classdai_1_1TProb.html">TProb</a>&lt; T &gt; &amp;b)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns TProb&lt;T&gt; containing the pointwise maximum of a and b (which should have equal size). <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="1a0b1c88c46fb8763c2c783cc3fe9a62"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="1a0b1c88c46fb8763c2c783cc3fe9a62" args="(std::ostream &amp;os, const std::vector&lt; T &gt; &amp;x)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#1a0b1c88c46fb8763c2c783cc3fe9a62">operator&lt;&lt;</a> (std::ostream &amp;os, const std::vector&lt; T &gt; &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a std::vector to a std::ostream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="4f8ad5d0c47c7fdfe17e5d0f4c0a32d9"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="4f8ad5d0c47c7fdfe17e5d0f4c0a32d9" args="(std::ostream &amp;os, const std::set&lt; T &gt; &amp;x)" -->
template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#4f8ad5d0c47c7fdfe17e5d0f4c0a32d9">operator&lt;&lt;</a> (std::ostream &amp;os, const std::set&lt; T &gt; &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a std::set to a std::ostream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="5913957fb1c3c3d3fbd1f3102b8eb04c"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="5913957fb1c3c3d3fbd1f3102b8eb04c" args="(std::ostream &amp;os, const std::map&lt; T1, T2 &gt; &amp;x)" -->
template&lt;class T1, class T2&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#5913957fb1c3c3d3fbd1f3102b8eb04c">operator&lt;&lt;</a> (std::ostream &amp;os, const std::map&lt; T1, T2 &gt; &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a std::map to a std::ostream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="575f6202aa88de6bf5146b85d8832eb5"></a><!-- doxytag: member="dai::operator&lt;&lt;" ref="575f6202aa88de6bf5146b85d8832eb5" args="(std::ostream &amp;os, const std::pair&lt; T1, T2 &gt; &amp;x)" -->
template&lt;class T1, class T2&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#575f6202aa88de6bf5146b85d8832eb5">operator&lt;&lt;</a> (std::ostream &amp;os, const std::pair&lt; T1, T2 &gt; &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Writes a std::pair to a std::ostream. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a>&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#7ede01daa445869cce29730d0cc29d74">MinSpanningTreePrims</a> (const <a class="el" href="classdai_1_1WeightedGraph.html">WeightedGraph</a>&lt; T &gt; &amp;G)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Uses Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G.  <a href="#7ede01daa445869cce29730d0cc29d74"></a><br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a>&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#461d882462bc6625c3874e1481fd9d68">MaxSpanningTreePrims</a> (const <a class="el" href="classdai_1_1WeightedGraph.html">WeightedGraph</a>&lt; T &gt; &amp;<a class="el" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400">Graph</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Use Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G.  <a href="#461d882462bc6625c3874e1481fd9d68"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="db5bd6385f9f88d7f191c8c7dc8d2d74"></a><!-- doxytag: member="dai::_normal_dist" ref="db5bd6385f9f88d7f191c8c7dc8d2d74" args="" -->
boost::normal_distribution&nbsp;</td><td class="memItemRight" valign="bottom"><b>_normal_dist</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#faf76457d5d1ad9cfd37feb44ae94669">DAINames</a> []</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Contains the names of all approximate inference algorithms compiled into libDAI.  <a href="#faf76457d5d1ad9cfd37feb44ae94669"></a><br></td></tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="4b9e5254e7ec388e69aa68dfc54509e0"></a><!-- doxytag: member="dai::newInfAlg" ref="4b9e5254e7ec388e69aa68dfc54509e0" args="(const std::string &amp;name, const FactorGraph &amp;fg, const PropertySet &amp;opts)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classdai_1_1InfAlg.html">InfAlg</a> * dai::newInfAlg           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const FactorGraph &amp;&nbsp;</td>
          <td class="paramname"> <em>fg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PropertySet &amp;&nbsp;</td>
          <td class="paramname"> <em>opts</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs a new approximate inference algorithm. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>The name of the approximate inference algorithm (should be one of the names in DAINames). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>fg</em>&nbsp;</td><td>The <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> that the algorithm should be applied to. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>opts</em>&nbsp;</td><td>A <a class="el" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> specifying the options for the algorithm. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Returns a pointer to the new <a class="el" href="classdai_1_1InfAlg.html" title="InfAlg is an abstract base class, defining the common interface of all inference...">InfAlg</a> object; it is the responsibility of the caller to delete it later. </dd></dl>

</div>
</div><p>
<a class="anchor" name="7ede01daa445869cce29730d0cc29d74"></a><!-- doxytag: member="dai::MinSpanningTreePrims" ref="7ede01daa445869cce29730d0cc29d74" args="(const WeightedGraph&lt; T &gt; &amp;G)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a> dai::MinSpanningTreePrims           </td>
          <td>(</td>
          <td class="paramtype">const WeightedGraph&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>G</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Uses Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G. 
<p>
Uses implementation in Boost Graph Library. 
</div>
</div><p>
<a class="anchor" name="461d882462bc6625c3874e1481fd9d68"></a><!-- doxytag: member="dai::MaxSpanningTreePrims" ref="461d882462bc6625c3874e1481fd9d68" args="(const WeightedGraph&lt; T &gt; &amp;Graph)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">DEdgeVec</a> dai::MaxSpanningTreePrims           </td>
          <td>(</td>
          <td class="paramtype">const WeightedGraph&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>Graph</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Use Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G. 
<p>
Uses implementation in Boost Graph Library. 
</div>
</div><p>
<hr><h2>Variable Documentation</h2>
<a class="anchor" name="faf76457d5d1ad9cfd37feb44ae94669"></a><!-- doxytag: member="dai::DAINames" ref="faf76457d5d1ad9cfd37feb44ae94669" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespacedai.html#faf76457d5d1ad9cfd37feb44ae94669">dai::DAINames</a>[]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    <a class="code" href="classdai_1_1ExactInf.html#2280f2174f843cb88eb715d51536b812" title="Name of this inference algorithm.">ExactInf::Name</a>,

    <a class="code" href="classdai_1_1BP.html#f40ab22b371e927fd728569fdbcc607a" title="Name of this inference algorithm.">BP::Name</a>, 


    <a class="code" href="classdai_1_1MF.html#ad41c263042fe7c780d404b4b32574f8" title="Name of this inference algorithm.">MF::Name</a>,


    <a class="code" href="classdai_1_1HAK.html#a729615f0c298f6e7e2b84ed0e3fb2e4" title="Name of this inference algorithm.">HAK::Name</a>,


    <a class="code" href="classdai_1_1LC.html#a0993f897e7c68145cfbd658f5511e64" title="Name of this inference algorithm.">LC::Name</a>,


    <a class="code" href="classdai_1_1TreeEP.html#28af8be0b7d337c266286118351059f9" title="Name of this inference method.">TreeEP::Name</a>,


    <a class="code" href="classdai_1_1JTree.html#e7c0a2ebb2675cb6f8441eae09f7f826" title="Name of this inference algorithm.">JTree::Name</a>,


    <a class="code" href="classdai_1_1MR.html#bc953e4a7a7d821f25e0ccbcdf8d304f" title="Name of this inference method.">MR::Name</a>,

    <span class="stringliteral">""</span>
}
</pre></div>Contains the names of all approximate inference algorithms compiled into libDAI. 
<p>

</div>
</div><p>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:05 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

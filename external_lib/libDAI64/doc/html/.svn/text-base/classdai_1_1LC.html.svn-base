<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: dai::LC Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacedai.html">dai</a>::<a class="el" href="classdai_1_1LC.html">LC</a>
  </div>
</div>
<div class="contents">
<h1>dai::LC Class Reference</h1><!-- doxytag: class="dai::LC" --><!-- doxytag: inherits="dai::DAIAlg" --><code>#include &lt;<a class="el" href="lc_8h-source.html">dai/lc.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for dai::LC:</div>
<div class="dynsection">

<p><center><img src="classdai_1_1LC.png" usemap="#dai::LC_map" border="0" alt=""></center>
<map name="dai::LC_map">
<area href="classdai_1_1DAIAlg.html" alt="dai::DAIAlg< GRM >" shape="rect" coords="0,56,194,80">
<area href="classdai_1_1InfAlg.html" alt="dai::InfAlg" shape="rect" coords="0,0,194,24">
</map>
</div>

<p>
<a href="classdai_1_1LC-members.html">List of all members.</a><hr><a name="_details"></a><h2>Detailed Description</h2>
Approximate inference algorithm "Loop Corrected Belief Propagation" by Mooij and Kappen. <table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e46e76de9def71e83ff7d95604e641b4"></a><!-- doxytag: member="dai::LC::LC" ref="e46e76de9def71e83ff7d95604e641b4" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4">LC</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="2f9f79af763757bbc8507e63c0440a27"></a><!-- doxytag: member="dai::LC::LC" ref="2f9f79af763757bbc8507e63c0440a27" args="(const LC &amp;x)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#2f9f79af763757bbc8507e63c0440a27">LC</a> (const <a class="el" href="classdai_1_1LC.html">LC</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d8650f8491916e9d9fd96f2b9a76ed53"></a><!-- doxytag: member="dai::LC::operator=" ref="d8650f8491916e9d9fd96f2b9a76ed53" args="(const LC &amp;x)" -->
<a class="el" href="classdai_1_1LC.html">LC</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#d8650f8491916e9d9fd96f2b9a76ed53">operator=</a> (const <a class="el" href="classdai_1_1LC.html">LC</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f7876f0893b969c4d2842927085c18e3"></a><!-- doxytag: member="dai::LC::LC" ref="f7876f0893b969c4d2842927085c18e3" args="(const FactorGraph &amp;fg, const PropertySet &amp;opts)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#f7876f0893b969c4d2842927085c18e3">LC</a> (const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;opts)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct from <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> fg and <a class="el" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> opts. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="48ba6a58d10b8802d690e5e92ec5abe9"></a><!-- doxytag: member="dai::LC::backupFactor" ref="48ba6a58d10b8802d690e5e92ec5abe9" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#48ba6a58d10b8802d690e5e92ec5abe9">backupFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save factor I. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0176904d3b4b9d083288ea8c4a2dc8bc"></a><!-- doxytag: member="dai::LC::backupFactors" ref="0176904d3b4b9d083288ea8c4a2dc8bc" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#0176904d3b4b9d083288ea8c4a2dc8bc">backupFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save Factors involving ns. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bf8dbd2797ec871e86566a6dfc0864e3"></a><!-- doxytag: member="dai::LC::restoreFactor" ref="bf8dbd2797ec871e86566a6dfc0864e3" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#bf8dbd2797ec871e86566a6dfc0864e3">restoreFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restore factor I. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3ce97e9370f1cdc785526c1a6c1eaadf"></a><!-- doxytag: member="dai::LC::restoreFactors" ref="3ce97e9370f1cdc785526c1a6c1eaadf" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#3ce97e9370f1cdc785526c1a6c1eaadf">restoreFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restore Factors involving ns. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b7d537f1a9d116617d8dce722ce65dc0"></a><!-- doxytag: member="dai::LC::clamp" ref="b7d537f1a9d116617d8dce722ce65dc0" args="(const Var &amp;n, size_t i, bool backup=false)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#b7d537f1a9d116617d8dce722ce65dc0">clamp</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n, size_t i, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clamp variable n to value i (i.e. multiply with a Kronecker delta <img class="formulaInl" alt="$\delta_{x_n, i}$" src="form_0.png">). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7f0b8452352080a1e35ab9a68cb589fd"></a><!-- doxytag: member="dai::LC::makeCavity" ref="7f0b8452352080a1e35ab9a68cb589fd" args="(size_t i, bool backup=false)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#7f0b8452352080a1e35ab9a68cb589fd">makeCavity</a> (size_t i, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set all factors interacting with var(i) to 1. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9348542c22d04ed804388f1fe3009fa3"></a><!-- doxytag: member="dai::LC::fg" ref="9348542c22d04ed804388f1fe3009fa3" args="()" -->
<a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3">fg</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get reference to underlying <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="35400e471b8c3c98bef6c74ceac8fa16"></a><!-- doxytag: member="dai::LC::fg" ref="35400e471b8c3c98bef6c74ceac8fa16" args="() const " -->
const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#35400e471b8c3c98bef6c74ceac8fa16">fg</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get const reference to underlying <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td colspan="2"><div class="groupHeader">General InfAlg interface</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0e98719468000085434e9fc0419d53d0"></a><!-- doxytag: member="dai::LC::clone" ref="0e98719468000085434e9fc0419d53d0" args="() const " -->
virtual <a class="el" href="classdai_1_1LC.html">LC</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#0e98719468000085434e9fc0419d53d0">clone</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="94a6ba124dc5b56dca2693f19f5093d7"></a><!-- doxytag: member="dai::LC::create" ref="94a6ba124dc5b56dca2693f19f5093d7" args="() const " -->
virtual <a class="el" href="classdai_1_1LC.html">LC</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#94a6ba124dc5b56dca2693f19f5093d7">create</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a pointer to a newly constructed object *this (i.e., virtual default constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7600e9344f474bfc866531044fc02b45"></a><!-- doxytag: member="dai::LC::identify" ref="7600e9344f474bfc866531044fc02b45" args="() const " -->
virtual std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#7600e9344f474bfc866531044fc02b45">identify</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Identifies itself for logging purposes. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="af4d1578168f9f1ed4622b971f76e21c"></a><!-- doxytag: member="dai::LC::belief" ref="af4d1578168f9f1ed4622b971f76e21c" args="(const Var &amp;n) const " -->
virtual <a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#af4d1578168f9f1ed4622b971f76e21c">belief</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the "belief" (i.e., approximate marginal probability distribution) of a variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8399d420190caeb55a3a13a62e454d8e"></a><!-- doxytag: member="dai::LC::belief" ref="8399d420190caeb55a3a13a62e454d8e" args="(const VarSet &amp;) const " -->
virtual <a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#8399d420190caeb55a3a13a62e454d8e">belief</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the "belief" (i.e., approximate marginal probability distribution) of a set of variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="73b806c54ec2001a34c4e5777833820f"></a><!-- doxytag: member="dai::LC::beliefs" ref="73b806c54ec2001a34c4e5777833820f" args="() const " -->
virtual std::vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#73b806c54ec2001a34c4e5777833820f">beliefs</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns all "beliefs" (i.e., approximate marginal probability distribution) calculated by the algorithm. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="76364b27eb464d03a1cbf214acdcc5dc"></a><!-- doxytag: member="dai::LC::logZ" ref="76364b27eb464d03a1cbf214acdcc5dc" args="() const " -->
virtual <a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#76364b27eb464d03a1cbf214acdcc5dc">logZ</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the logarithm of the (approximated) partition sum (normalizing constant of the factor graph). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#007ab11f0d08d0ed23ae141230b122cc">init</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes all data structures of the approximate inference algorithm.  <a href="#007ab11f0d08d0ed23ae141230b122cc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#b077c808ad6ca6b9e134746d0846ea5d">init</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes all data structures corresponding to some set of variables.  <a href="#b077c808ad6ca6b9e134746d0846ea5d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ff5884412fd193b8c525c3ccdd84b40b"></a><!-- doxytag: member="dai::LC::run" ref="ff5884412fd193b8c525c3ccdd84b40b" args="()" -->
virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#ff5884412fd193b8c525c3ccdd84b40b">run</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Runs the approximate inference algorithm. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#32b30963958c3f408d1c5a618fcf418d">maxDiff</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#8654c28fad78fa6cd850b2207b271086">Iterations</a> () const </td></tr>

<tr><td colspan="2"><div class="groupHeader">Additional interface specific for LC</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b436b2c4f3f7f5ecb426852306ce68b8"></a><!-- doxytag: member="dai::LC::CalcCavityDist" ref="b436b2c4f3f7f5ecb426852306ce68b8" args="(size_t i, const std::string &amp;name, const PropertySet &amp;opts)" -->
double&nbsp;</td><td class="memItemRight" valign="bottom"><b>CalcCavityDist</b> (size_t i, const std::string &amp;name, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;opts)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ef45360a369721b4a42b91837969bb59"></a><!-- doxytag: member="dai::LC::InitCavityDists" ref="ef45360a369721b4a42b91837969bb59" args="(const std::string &amp;name, const PropertySet &amp;opts)" -->
double&nbsp;</td><td class="memItemRight" valign="bottom"><b>InitCavityDists</b> (const std::string &amp;name, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;opts)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8f378501c011772b7bf9a753af3e131d"></a><!-- doxytag: member="dai::LC::SetCavityDists" ref="8f378501c011772b7bf9a753af3e131d" args="(std::vector&lt; Factor &gt; &amp;Q)" -->
long&nbsp;</td><td class="memItemRight" valign="bottom"><b>SetCavityDists</b> (std::vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt; &amp;Q)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0fddd5b0eee7c54f4294aeed0a01acc2"></a><!-- doxytag: member="dai::LC::NewPancake" ref="0fddd5b0eee7c54f4294aeed0a01acc2" args="(size_t i, size_t _I, bool &amp;hasNaNs)" -->
<a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>NewPancake</b> (size_t i, size_t _I, bool &amp;hasNaNs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c0b31ad501fc7051874162a000165894"></a><!-- doxytag: member="dai::LC::CalcBelief" ref="c0b31ad501fc7051874162a000165894" args="(size_t i)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>CalcBelief</b> (size_t i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6272f35e369c9afe6d7564ee2da063ed"></a><!-- doxytag: member="dai::LC::belief" ref="6272f35e369c9afe6d7564ee2da063ed" args="(size_t i) const " -->
const <a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>belief</b> (size_t i) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e7b919d633b102c51165c7e67a6ab9cb"></a><!-- doxytag: member="dai::LC::pancake" ref="e7b919d633b102c51165c7e67a6ab9cb" args="(size_t i) const " -->
const <a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>pancake</b> (size_t i) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="1e33809feff60fd0c6b2cffa1b614fca"></a><!-- doxytag: member="dai::LC::cavitydist" ref="1e33809feff60fd0c6b2cffa1b614fca" args="(size_t i) const " -->
const <a class="el" href="classdai_1_1TFactor.html">Factor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>cavitydist</b> (size_t i) const </td></tr>

<tr><td colspan="2"><br><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cbaf0aaf68d0645f215be238f58c8dd9"></a><!-- doxytag: member="dai::LC::props" ref="cbaf0aaf68d0645f215be238f58c8dd9" args="" -->
struct <a class="el" href="structdai_1_1LC_1_1Properties.html">dai::LC::Properties</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9">props</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Parameters of this inference algorithm. <br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a0993f897e7c68145cfbd658f5511e64"></a><!-- doxytag: member="dai::LC::Name" ref="a0993f897e7c68145cfbd658f5511e64" args="" -->
static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1LC.html#a0993f897e7c68145cfbd658f5511e64">Name</a> = &quot;LC&quot;</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Name of this inference algorithm. <br></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdai_1_1LC_1_1Properties.html">Properties</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Parameters of this inference algorithm.  <a href="structdai_1_1LC_1_1Properties.html#_details">More...</a><br></td></tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="007ab11f0d08d0ed23ae141230b122cc"></a><!-- doxytag: member="dai::LC::init" ref="007ab11f0d08d0ed23ae141230b122cc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dai::LC::init           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initializes all data structures of the approximate inference algorithm. 
<p>
This method should be called at least once before <a class="el" href="classdai_1_1LC.html#ff5884412fd193b8c525c3ccdd84b40b" title="Runs the approximate inference algorithm.">run()</a> is called 
<p>Implements <a class="el" href="classdai_1_1InfAlg.html#99dd53d1aaccf09a4b977a49a983cc85">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="b077c808ad6ca6b9e134746d0846ea5d"></a><!-- doxytag: member="dai::LC::init" ref="b077c808ad6ca6b9e134746d0846ea5d" args="(const VarSet &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void dai::LC::init           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>ns</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initializes all data structures corresponding to some set of variables. 
<p>
This method can be used to do a partial initialization after a part of the factor graph has changed. Instead of initializing all data structures, it only initializes those involving the variables in ns. 
<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7d006e89e01a2f3e2a40b0f7f6e37ae5">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="32b30963958c3f408d1c5a618fcf418d"></a><!-- doxytag: member="dai::LC::maxDiff" ref="32b30963958c3f408d1c5a618fcf418d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double dai::LC::maxDiff           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return maximum difference between single node beliefs in the last pass <dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classdai_1_1Exception.html" title="Represents an exception (based on std::runtime_error).">Exception</a></em>&nbsp;</td><td>if not implemented/supported </td></tr>
  </table>
</dl>

<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7e1ca7da15403d5d2af4a855186c0b46">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="8654c28fad78fa6cd850b2207b271086"></a><!-- doxytag: member="dai::LC::Iterations" ref="8654c28fad78fa6cd850b2207b271086" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dai::LC::Iterations           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return number of passes over the factorgraph <dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classdai_1_1Exception.html" title="Represents an exception (based on std::runtime_error).">Exception</a></em>&nbsp;</td><td>if not implemented/supported </td></tr>
  </table>
</dl>

<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7a93807863cc0a2025c1a78bdf1e14b8">dai::InfAlg</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>include/dai/<a class="el" href="lc_8h-source.html">lc.h</a><li>src/lc.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:08 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

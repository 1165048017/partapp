<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/weightedgraph.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>weightedgraph.h</h1><a href="weightedgraph_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_weightedgraph_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_weightedgraph_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="comment">// MA</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;climits&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;cassert&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;boost/graph/adjacency_list.hpp&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;boost/graph/prim_minimum_spanning_tree.hpp&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">namespace </span>dai {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00048"></a><a class="code" href="classdai_1_1DEdge.html">00048</a> <span class="keyword">class </span><a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> {
<a name="l00049"></a>00049     <span class="keyword">public</span>:
<a name="l00050"></a><a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d">00050</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a>;  
<a name="l00051"></a><a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38">00051</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a>;  
<a name="l00052"></a>00052     
<a name="l00054"></a><a class="code" href="classdai_1_1DEdge.html#f5427cbe19ce225fe7b56dd2d035a7a0">00054</a>         <a class="code" href="classdai_1_1DEdge.html#f5427cbe19ce225fe7b56dd2d035a7a0" title="Default constructor.">DEdge</a>() {}
<a name="l00055"></a>00055 
<a name="l00057"></a><a class="code" href="classdai_1_1DEdge.html#0936737355725c765b6902303fb75b04">00057</a>         <a class="code" href="classdai_1_1DEdge.html#f5427cbe19ce225fe7b56dd2d035a7a0" title="Default constructor.">DEdge</a>( <span class="keywordtype">size_t</span> m1, <span class="keywordtype">size_t</span> m2 ) : <a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a>(m1), <a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a>(m2) {}
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="classdai_1_1DEdge.html#ac85e6f5aa72f552c3d6a6fd7941d2db">00060</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1DEdge.html#ac85e6f5aa72f552c3d6a6fd7941d2db" title="Tests for equality.">operator==</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> &amp;x )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a> == x.<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a>) &amp;&amp; (<a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a> == x.<a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a>)); }
<a name="l00061"></a>00061 
<a name="l00063"></a><a class="code" href="classdai_1_1DEdge.html#a13e5a5126ff6c0b754af96349c8f613">00063</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1DEdge.html#a13e5a5126ff6c0b754af96349c8f613" title="Tests for inequality.">operator!=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> &amp;x )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == x); }
<a name="l00064"></a>00064 
<a name="l00066"></a><a class="code" href="classdai_1_1DEdge.html#b2378683166fd3eb5518edce5823c1ed">00066</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1DEdge.html#b2378683166fd3eb5518edce5823c1ed" title="Smaller-than operator (performs lexicographical comparison).">operator&lt;</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> &amp;x )<span class="keyword"> const </span>{
<a name="l00067"></a>00067             <span class="keywordflow">return</span>( (<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a> &lt; x.<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a>) || ((<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a> == x.<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a>) &amp;&amp; (<a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a> &lt; x.<a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a>)) );
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="classdai_1_1DEdge.html#c12ac5065e77dc3040d464405fe1f609">00071</a>         <span class="keyword">friend</span> std::ostream &amp; <a class="code" href="classdai_1_1DEdge.html#c12ac5065e77dc3040d464405fe1f609" title="Writes a DEdge to an output stream.">operator &lt;&lt; </a>(std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> &amp; e) {
<a name="l00072"></a>00072             os &lt;&lt; <span class="stringliteral">"("</span> &lt;&lt; e.<a class="code" href="classdai_1_1DEdge.html#7e45508d3b566c073f176ea845497c0d" title="First node index.">n1</a> &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; e.<a class="code" href="classdai_1_1DEdge.html#0836ffc192d1e2ebdac4d4e8242feb38" title="Second node index.">n2</a> &lt;&lt; <span class="stringliteral">")"</span>;
<a name="l00073"></a>00073             <span class="keywordflow">return</span> os;
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 };
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="classdai_1_1UEdge.html">00079</a> <span class="keyword">class </span><a class="code" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a> {
<a name="l00080"></a>00080     <span class="keyword">public</span>:
<a name="l00081"></a><a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c">00081</a>         <span class="keywordtype">size_t</span>  <a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>;  
<a name="l00082"></a><a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723">00082</a>         <span class="keywordtype">size_t</span>  <a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>;  
<a name="l00083"></a>00083     
<a name="l00085"></a><a class="code" href="classdai_1_1UEdge.html#42ec52c9396a94aafd7fd62a9b36067e">00085</a>         <a class="code" href="classdai_1_1UEdge.html#42ec52c9396a94aafd7fd62a9b36067e" title="Default constructor.">UEdge</a>() {}
<a name="l00086"></a>00086 
<a name="l00088"></a><a class="code" href="classdai_1_1UEdge.html#1e7819b6b776d0715207b251a8c951fe">00088</a>         <a class="code" href="classdai_1_1UEdge.html#42ec52c9396a94aafd7fd62a9b36067e" title="Default constructor.">UEdge</a>( <span class="keywordtype">size_t</span> m1, <span class="keywordtype">size_t</span> m2 ) : <a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>(m1), <a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>(m2) {}
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="classdai_1_1UEdge.html#31d68730f49619179aff649cbe5c3d3d">00091</a>         <a class="code" href="classdai_1_1UEdge.html#42ec52c9396a94aafd7fd62a9b36067e" title="Default constructor.">UEdge</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a> &amp; e ) : <a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>(e.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>), <a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>(e.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>) {}
<a name="l00092"></a>00092 
<a name="l00094"></a><a class="code" href="classdai_1_1UEdge.html#6104711a37099d2bea16ebc26f35592d">00094</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1UEdge.html#6104711a37099d2bea16ebc26f35592d" title="Tests for inequality (disregarding the ordering of n1 and n2).">operator==</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a> &amp;x ) {
<a name="l00095"></a>00095             <span class="keywordflow">return</span> ((<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a> == x.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>) &amp;&amp; (<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a> == x.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>)) || ((<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a> == x.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>) &amp;&amp; (<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a> == x.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>));
<a name="l00096"></a>00096         }
<a name="l00097"></a>00097 
<a name="l00099"></a><a class="code" href="classdai_1_1UEdge.html#c18760d5642f14aa1b64e0d3c611cb0f">00099</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1UEdge.html#c18760d5642f14aa1b64e0d3c611cb0f" title="Smaller-than operator.">operator&lt;</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a> &amp;x )<span class="keyword"> const </span>{
<a name="l00100"></a>00100             <span class="keywordtype">size_t</span> s = <a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>, l = <a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>;
<a name="l00101"></a>00101             <span class="keywordflow">if</span>( s &gt; l )
<a name="l00102"></a>00102                 std::swap( s, l );
<a name="l00103"></a>00103             <span class="keywordtype">size_t</span> xs = x.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a>, xl = x.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a>;
<a name="l00104"></a>00104             <span class="keywordflow">if</span>( xs &gt; xl )
<a name="l00105"></a>00105                 std::swap( xs, xl );
<a name="l00106"></a>00106             <span class="keywordflow">return</span>( (s &lt; xs) || ((s == xs) &amp;&amp; (l &lt; xl)) );
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108 
<a name="l00110"></a><a class="code" href="classdai_1_1UEdge.html#d723be19b6d346867d5477ae26cc4bf1">00110</a>         <span class="keyword">friend</span> std::ostream &amp; <a class="code" href="classdai_1_1UEdge.html#d723be19b6d346867d5477ae26cc4bf1" title="Writes a UEdge to an output stream.">operator &lt;&lt; </a>(std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a> &amp; e) {
<a name="l00111"></a>00111             <span class="keywordflow">if</span>( e.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a> &lt; e.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a> )
<a name="l00112"></a>00112                 os &lt;&lt; <span class="stringliteral">"{"</span> &lt;&lt; e.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a> &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; e.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a> &lt;&lt; <span class="stringliteral">"}"</span>;
<a name="l00113"></a>00113             <span class="keywordflow">else</span>
<a name="l00114"></a>00114                 os &lt;&lt; <span class="stringliteral">"{"</span> &lt;&lt; e.<a class="code" href="classdai_1_1UEdge.html#f2c3cb4413b81fe69fcc4cbedbd17723" title="Second node index.">n2</a> &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; e.<a class="code" href="classdai_1_1UEdge.html#d977fc954195ab7913c57d50639da25c" title="First node index.">n1</a> &lt;&lt; <span class="stringliteral">"}"</span>;
<a name="l00115"></a>00115             <span class="keywordflow">return</span> os;
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117 };
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 
<a name="l00121"></a><a class="code" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391">00121</a> <span class="keyword">typedef</span> std::vector&lt;UEdge&gt;  <a class="code" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391" title="Vector of UEdge.">UEdgeVec</a>;
<a name="l00122"></a>00122 
<a name="l00124"></a><a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">00124</a> <span class="keyword">typedef</span> std::vector&lt;DEdge&gt;  <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a>;
<a name="l00125"></a>00125 
<a name="l00127"></a><a class="code" href="classdai_1_1WeightedGraph.html">00127</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph</a> : <span class="keyword">public</span> std::map&lt;UEdge, T&gt; {};
<a name="l00128"></a>00128 
<a name="l00130"></a><a class="code" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400">00130</a> <span class="keyword">typedef</span> std::set&lt;UEdge&gt;     <a class="code" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400" title="Represents an undirected graph.">Graph</a>;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 
<a name="l00134"></a>00134 
<a name="l00136"></a><a class="code" href="namespacedai.html#7ede01daa445869cce29730d0cc29d74">00136</a> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> <a class="code" href="namespacedai.html#7ede01daa445869cce29730d0cc29d74" title="Uses Prim&amp;#39;s algorithm to construct a minimal spanning tree from the (positively)...">MinSpanningTreePrims</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;</a> &amp;G ) {
<a name="l00137"></a>00137     <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> result;
<a name="l00138"></a>00138     <span class="keywordflow">if</span>( G.size() &gt; 0 ) {
<a name="l00139"></a>00139         <span class="keyword">using namespace </span>boost;
<a name="l00140"></a>00140         <span class="keyword">using namespace </span>std;
<a name="l00141"></a>00141         <span class="keyword">typedef</span> adjacency_list&lt; vecS, vecS, undirectedS, property&lt;vertex_distance_t, int&gt;, property&lt;edge_weight_t, double&gt; &gt; boostGraph;
<a name="l00142"></a>00142         <span class="keyword">typedef</span> pair&lt;size_t, size_t&gt; E;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144         set&lt;size_t&gt; nodes;
<a name="l00145"></a>00145         vector&lt;E&gt; edges;
<a name="l00146"></a>00146         vector&lt;double&gt; weights;
<a name="l00147"></a>00147         edges.reserve( G.size() );
<a name="l00148"></a>00148         weights.reserve( G.size() );
<a name="l00149"></a>00149         <span class="keywordflow">for</span>( <span class="keyword">typename</span> <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;::const_iterator</a> e = G.begin(); e != G.end(); e++ ) {
<a name="l00150"></a>00150             weights.push_back( e-&gt;second );
<a name="l00151"></a>00151             edges.push_back( E( e-&gt;first.n1, e-&gt;first.n2 ) );
<a name="l00152"></a>00152             nodes.insert( e-&gt;first.n1 );
<a name="l00153"></a>00153             nodes.insert( e-&gt;first.n2 );
<a name="l00154"></a>00154         }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156         boostGraph g( edges.begin(), edges.end(), weights.begin(), nodes.size() );
<a name="l00157"></a>00157         vector&lt; graph_traits&lt; boostGraph &gt;::vertex_descriptor &gt; p( num_vertices(g) );
<a name="l00158"></a>00158         prim_minimum_spanning_tree( g, &amp;(p[0]) );
<a name="l00159"></a>00159 
<a name="l00160"></a>00160         <span class="comment">// Store tree edges in result</span>
<a name="l00161"></a>00161         result.reserve( nodes.size() - 1 );
<a name="l00162"></a>00162         <span class="keywordtype">size_t</span> root = 0;
<a name="l00163"></a>00163         <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> i = 0; i != p.size(); i++ )
<a name="l00164"></a>00164             <span class="keywordflow">if</span>( p[i] != i )
<a name="l00165"></a>00165                 result.push_back( <a class="code" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a>( p[i], i ) );
<a name="l00166"></a>00166             <span class="keywordflow">else</span>
<a name="l00167"></a>00167                 root = i;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         <span class="comment">// We have to store the minimum spanning tree in the right</span>
<a name="l00170"></a>00170         <span class="comment">// order, such that for all (i1, j1), (i2, j2) in result,</span>
<a name="l00171"></a>00171         <span class="comment">// if j1 == i2 then (i1, j1) comes before (i2, j2) in result.</span>
<a name="l00172"></a>00172         <span class="comment">// We do this by reordering the contents of result, effectively</span>
<a name="l00173"></a>00173         <span class="comment">// growing the tree starting at the root. At each step, </span>
<a name="l00174"></a>00174         <span class="comment">// result[0..N-1] are the edges already added to the tree,</span>
<a name="l00175"></a>00175         <span class="comment">// whereas the other elements of result still have to be added.</span>
<a name="l00176"></a>00176         <span class="comment">// The elements of nodes are the vertices that still have to</span>
<a name="l00177"></a>00177         <span class="comment">// be added to the tree.</span>
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <span class="comment">// Start with the root</span>
<a name="l00180"></a>00180         nodes.erase( root );
<a name="l00181"></a>00181         <span class="keywordtype">size_t</span> N = 0;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <span class="comment">// Iteratively add edges and nodes to the growing tree</span>
<a name="l00184"></a>00184         <span class="keywordflow">while</span>( N != result.size() ) {
<a name="l00185"></a>00185             <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> e = N; e != result.size(); e++ ) {
<a name="l00186"></a>00186                 <span class="keywordtype">bool</span> e1_in_tree = !nodes.count( result[e].n1 );
<a name="l00187"></a>00187                 <span class="keywordflow">if</span>( e1_in_tree ) {
<a name="l00188"></a>00188                     nodes.erase( result[e].n2 );
<a name="l00189"></a>00189                     swap( result[N], result[e] );
<a name="l00190"></a>00190                     N++;
<a name="l00191"></a>00191                     <span class="keywordflow">break</span>;
<a name="l00192"></a>00192                 }
<a name="l00193"></a>00193             }
<a name="l00194"></a>00194         }
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="keywordflow">return</span> result;
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00202"></a>00202 
<a name="l00204"></a><a class="code" href="namespacedai.html#461d882462bc6625c3874e1481fd9d68">00204</a> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> <a class="code" href="namespacedai.html#461d882462bc6625c3874e1481fd9d68" title="Use Prim&amp;#39;s algorithm to construct a minimal spanning tree from the (positively)...">MaxSpanningTreePrims</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;</a> &amp; <a class="code" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400" title="Represents an undirected graph.">Graph</a> ) {
<a name="l00205"></a>00205     T maxweight = Graph.begin()-&gt;second;
<a name="l00206"></a>00206     <span class="keywordflow">for</span>( <span class="keyword">typename</span> <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;::const_iterator</a> it = Graph.begin(); it != Graph.end(); it++ )
<a name="l00207"></a>00207         <span class="keywordflow">if</span>( it-&gt;second &gt; maxweight )
<a name="l00208"></a>00208             maxweight = it-&gt;second;
<a name="l00209"></a>00209     <span class="comment">// make a copy of the graph</span>
<a name="l00210"></a>00210     <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;</a> gr( Graph );
<a name="l00211"></a>00211     <span class="comment">// invoke MinSpanningTreePrims with negative weights</span>
<a name="l00212"></a>00212     <span class="comment">// (which have to be shifted to satisfy positivity criterion)</span>
<a name="l00213"></a>00213     <span class="keywordflow">for</span>( <span class="keyword">typename</span> <a class="code" href="classdai_1_1WeightedGraph.html" title="Represents an undirected weighted graph, with weights of type T.">WeightedGraph&lt;T&gt;::iterator</a> it = gr.begin(); it != gr.end(); it++ )
<a name="l00214"></a>00214         it-&gt;second = maxweight - it-&gt;second;
<a name="l00215"></a>00215     <span class="keywordflow">return</span> <a class="code" href="namespacedai.html#7ede01daa445869cce29730d0cc29d74" title="Uses Prim&amp;#39;s algorithm to construct a minimal spanning tree from the (positively)...">MinSpanningTreePrims</a>( gr );
<a name="l00216"></a>00216 }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00220"></a>00220 <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> <a class="code" href="namespacedai.html#602bda76af8301b981bc9147793d72e0" title="Constructs a rooted tree from a tree and a root.">GrowRootedTree</a>( <span class="keyword">const</span> <a class="code" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400" title="Represents an undirected graph.">Graph</a> &amp; T, <span class="keywordtype">size_t</span> Root );
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00224"></a>00224 <a class="code" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391" title="Vector of UEdge.">UEdgeVec</a> <a class="code" href="namespacedai.html#7e19e088006a5e91e0d34d26cf6f3a8d" title="Constructs a random undirected graph of N nodes, where each node has connectivity...">RandomDRegularGraph</a>( <span class="keywordtype">size_t</span> N, <span class="keywordtype">size_t</span> d );
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 } <span class="comment">// end of namespace dai</span>
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: dai::MF Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacedai.html">dai</a>::<a class="el" href="classdai_1_1MF.html">MF</a>
  </div>
</div>
<div class="contents">
<h1>dai::MF Class Reference</h1><!-- doxytag: class="dai::MF" --><!-- doxytag: inherits="dai::DAIAlg" --><code>#include &lt;<a class="el" href="mf_8h-source.html">dai/mf.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for dai::MF:</div>
<div class="dynsection">

<p><center><img src="classdai_1_1MF.png" usemap="#dai::MF_map" border="0" alt=""></center>
<map name="dai::MF_map">
<area href="classdai_1_1DAIAlg.html" alt="dai::DAIAlg< GRM >" shape="rect" coords="0,56,194,80">
<area href="classdai_1_1InfAlg.html" alt="dai::InfAlg" shape="rect" coords="0,0,194,24">
</map>
</div>

<p>
<a href="classdai_1_1MF-members.html">List of all members.</a><hr><a name="_details"></a><h2>Detailed Description</h2>
Approximate inference algorithm "Mean Field". <table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="2e40d786c9e8d34864fe09e1da56632c"></a><!-- doxytag: member="dai::MF::MF" ref="2e40d786c9e8d34864fe09e1da56632c" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#2e40d786c9e8d34864fe09e1da56632c">MF</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="813ea21faea74d26067ac0876d2f89d6"></a><!-- doxytag: member="dai::MF::MF" ref="813ea21faea74d26067ac0876d2f89d6" args="(const MF &amp;x)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#813ea21faea74d26067ac0876d2f89d6">MF</a> (const <a class="el" href="classdai_1_1MF.html">MF</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d8f30354060027fbb96f303947163dbc"></a><!-- doxytag: member="dai::MF::operator=" ref="d8f30354060027fbb96f303947163dbc" args="(const MF &amp;x)" -->
<a class="el" href="classdai_1_1MF.html">MF</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#d8f30354060027fbb96f303947163dbc">operator=</a> (const <a class="el" href="classdai_1_1MF.html">MF</a> &amp;x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="968fe2b9d9cc604a9d81c9ea15be8d72"></a><!-- doxytag: member="dai::MF::MF" ref="968fe2b9d9cc604a9d81c9ea15be8d72" args="(const FactorGraph &amp;fg, const PropertySet &amp;opts)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#968fe2b9d9cc604a9d81c9ea15be8d72">MF</a> (const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;fg, const <a class="el" href="classdai_1_1PropertySet.html">PropertySet</a> &amp;opts)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct from <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> fg and <a class="el" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> opts. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="48ba6a58d10b8802d690e5e92ec5abe9"></a><!-- doxytag: member="dai::MF::backupFactor" ref="48ba6a58d10b8802d690e5e92ec5abe9" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#48ba6a58d10b8802d690e5e92ec5abe9">backupFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save factor I. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0176904d3b4b9d083288ea8c4a2dc8bc"></a><!-- doxytag: member="dai::MF::backupFactors" ref="0176904d3b4b9d083288ea8c4a2dc8bc" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#0176904d3b4b9d083288ea8c4a2dc8bc">backupFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save Factors involving ns. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bf8dbd2797ec871e86566a6dfc0864e3"></a><!-- doxytag: member="dai::MF::restoreFactor" ref="bf8dbd2797ec871e86566a6dfc0864e3" args="(size_t I)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#bf8dbd2797ec871e86566a6dfc0864e3">restoreFactor</a> (size_t I)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restore factor I. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3ce97e9370f1cdc785526c1a6c1eaadf"></a><!-- doxytag: member="dai::MF::restoreFactors" ref="3ce97e9370f1cdc785526c1a6c1eaadf" args="(const VarSet &amp;ns)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#3ce97e9370f1cdc785526c1a6c1eaadf">restoreFactors</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Restore Factors involving ns. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b7d537f1a9d116617d8dce722ce65dc0"></a><!-- doxytag: member="dai::MF::clamp" ref="b7d537f1a9d116617d8dce722ce65dc0" args="(const Var &amp;n, size_t i, bool backup=false)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#b7d537f1a9d116617d8dce722ce65dc0">clamp</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n, size_t i, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clamp variable n to value i (i.e. multiply with a Kronecker delta <img class="formulaInl" alt="$\delta_{x_n, i}$" src="form_0.png">). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7f0b8452352080a1e35ab9a68cb589fd"></a><!-- doxytag: member="dai::MF::makeCavity" ref="7f0b8452352080a1e35ab9a68cb589fd" args="(size_t i, bool backup=false)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#7f0b8452352080a1e35ab9a68cb589fd">makeCavity</a> (size_t i, bool backup=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set all factors interacting with var(i) to 1. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9348542c22d04ed804388f1fe3009fa3"></a><!-- doxytag: member="dai::MF::fg" ref="9348542c22d04ed804388f1fe3009fa3" args="()" -->
<a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3">fg</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get reference to underlying <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="35400e471b8c3c98bef6c74ceac8fa16"></a><!-- doxytag: member="dai::MF::fg" ref="35400e471b8c3c98bef6c74ceac8fa16" args="() const " -->
const <a class="el" href="classdai_1_1FactorGraph.html">FactorGraph</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DAIAlg.html#35400e471b8c3c98bef6c74ceac8fa16">fg</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get const reference to underlying <a class="el" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a>. <br></td></tr>
<tr><td colspan="2"><div class="groupHeader">General InfAlg interface</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c209b5cd623a33d0d1b0041d0a7cdf10"></a><!-- doxytag: member="dai::MF::clone" ref="c209b5cd623a33d0d1b0041d0a7cdf10" args="() const " -->
virtual <a class="el" href="classdai_1_1MF.html">MF</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#c209b5cd623a33d0d1b0041d0a7cdf10">clone</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="d74dbcd156314d1b6072c80917847587"></a><!-- doxytag: member="dai::MF::create" ref="d74dbcd156314d1b6072c80917847587" args="() const " -->
virtual <a class="el" href="classdai_1_1MF.html">MF</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#d74dbcd156314d1b6072c80917847587">create</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a pointer to a newly constructed object *this (i.e., virtual default constructor). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f4e80fe7390fbb3e2496b1056b05c5e4"></a><!-- doxytag: member="dai::MF::identify" ref="f4e80fe7390fbb3e2496b1056b05c5e4" args="() const " -->
virtual std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#f4e80fe7390fbb3e2496b1056b05c5e4">identify</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Identifies itself for logging purposes. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cee4df06c59d8e6ab4663129d59b419e"></a><!-- doxytag: member="dai::MF::belief" ref="cee4df06c59d8e6ab4663129d59b419e" args="(const Var &amp;n) const " -->
virtual <a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#cee4df06c59d8e6ab4663129d59b419e">belief</a> (const <a class="el" href="classdai_1_1Var.html">Var</a> &amp;n) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the "belief" (i.e., approximate marginal probability distribution) of a variable. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="704446500780ea4e2b834bb03cff0e24"></a><!-- doxytag: member="dai::MF::belief" ref="704446500780ea4e2b834bb03cff0e24" args="(const VarSet &amp;ns) const " -->
virtual <a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#704446500780ea4e2b834bb03cff0e24">belief</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the "belief" (i.e., approximate marginal probability distribution) of a set of variables. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a6c307192d3b4141e2d1b0b46f3319a8"></a><!-- doxytag: member="dai::MF::beliefs" ref="a6c307192d3b4141e2d1b0b46f3319a8" args="() const " -->
virtual std::vector&lt; <a class="el" href="classdai_1_1TFactor.html">Factor</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#a6c307192d3b4141e2d1b0b46f3319a8">beliefs</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns all "beliefs" (i.e., approximate marginal probability distribution) calculated by the algorithm. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ad8b559b72143257ca997bd5975a1d69"></a><!-- doxytag: member="dai::MF::logZ" ref="ad8b559b72143257ca997bd5975a1d69" args="() const " -->
virtual <a class="el" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf">Real</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#ad8b559b72143257ca997bd5975a1d69">logZ</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the logarithm of the (approximated) partition sum (normalizing constant of the factor graph). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#eb993d502d0cb97424ebff82e0cf6839">init</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes all data structures of the approximate inference algorithm.  <a href="#eb993d502d0cb97424ebff82e0cf6839"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#49ddd5c9c9f51ee9fb5e153b7194ac71">init</a> (const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;ns)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes all data structures corresponding to some set of variables.  <a href="#49ddd5c9c9f51ee9fb5e153b7194ac71"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bd9d1de4bfb3fb538c9949a7c82d7984"></a><!-- doxytag: member="dai::MF::run" ref="bd9d1de4bfb3fb538c9949a7c82d7984" args="()" -->
virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#bd9d1de4bfb3fb538c9949a7c82d7984">run</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Runs the approximate inference algorithm. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#032b149026f011a5cbcd01eb08a3b8dc">maxDiff</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#e2daf3cd007572d19d6156f2484db4fd">Iterations</a> () const </td></tr>

<tr><td colspan="2"><div class="groupHeader">Additional interface specific for MF</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b5f9fa5f11b2ec4377db1d1c1360cf86"></a><!-- doxytag: member="dai::MF::beliefV" ref="b5f9fa5f11b2ec4377db1d1c1360cf86" args="(size_t i) const " -->
<a class="el" href="classdai_1_1TFactor.html">Factor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>beliefV</b> (size_t i) const </td></tr>

<tr><td colspan="2"><br><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7fe9b554132a55d416199fcea7da014c"></a><!-- doxytag: member="dai::MF::props" ref="7fe9b554132a55d416199fcea7da014c" args="" -->
struct <a class="el" href="structdai_1_1MF_1_1Properties.html">dai::MF::Properties</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#7fe9b554132a55d416199fcea7da014c">props</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Parameters of this inference algorithm. <br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ad41c263042fe7c780d404b4b32574f8"></a><!-- doxytag: member="dai::MF::Name" ref="ad41c263042fe7c780d404b4b32574f8" args="" -->
static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1MF.html#ad41c263042fe7c780d404b4b32574f8">Name</a> = &quot;MF&quot;</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Name of this inference algorithm. <br></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdai_1_1MF_1_1Properties.html">Properties</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Parameters of this inference algorithm.  <a href="structdai_1_1MF_1_1Properties.html#_details">More...</a><br></td></tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="eb993d502d0cb97424ebff82e0cf6839"></a><!-- doxytag: member="dai::MF::init" ref="eb993d502d0cb97424ebff82e0cf6839" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dai::MF::init           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initializes all data structures of the approximate inference algorithm. 
<p>
This method should be called at least once before <a class="el" href="classdai_1_1MF.html#bd9d1de4bfb3fb538c9949a7c82d7984" title="Runs the approximate inference algorithm.">run()</a> is called 
<p>Implements <a class="el" href="classdai_1_1InfAlg.html#99dd53d1aaccf09a4b977a49a983cc85">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="49ddd5c9c9f51ee9fb5e153b7194ac71"></a><!-- doxytag: member="dai::MF::init" ref="49ddd5c9c9f51ee9fb5e153b7194ac71" args="(const VarSet &amp;ns)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void dai::MF::init           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classdai_1_1VarSet.html">VarSet</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>ns</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initializes all data structures corresponding to some set of variables. 
<p>
This method can be used to do a partial initialization after a part of the factor graph has changed. Instead of initializing all data structures, it only initializes those involving the variables in ns. 
<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7d006e89e01a2f3e2a40b0f7f6e37ae5">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="032b149026f011a5cbcd01eb08a3b8dc"></a><!-- doxytag: member="dai::MF::maxDiff" ref="032b149026f011a5cbcd01eb08a3b8dc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double dai::MF::maxDiff           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return maximum difference between single node beliefs in the last pass <dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classdai_1_1Exception.html" title="Represents an exception (based on std::runtime_error).">Exception</a></em>&nbsp;</td><td>if not implemented/supported </td></tr>
  </table>
</dl>

<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7e1ca7da15403d5d2af4a855186c0b46">dai::InfAlg</a>.</p>

</div>
</div><p>
<a class="anchor" name="e2daf3cd007572d19d6156f2484db4fd"></a><!-- doxytag: member="dai::MF::Iterations" ref="e2daf3cd007572d19d6156f2484db4fd" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dai::MF::Iterations           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return number of passes over the factorgraph <dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classdai_1_1Exception.html" title="Represents an exception (based on std::runtime_error).">Exception</a></em>&nbsp;</td><td>if not implemented/supported </td></tr>
  </table>
</dl>

<p>Implements <a class="el" href="classdai_1_1InfAlg.html#7a93807863cc0a2025c1a78bdf1e14b8">dai::InfAlg</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>include/dai/<a class="el" href="mf_8h-source.html">mf.h</a><li>src/mf.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:08 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

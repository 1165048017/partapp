<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/treeep.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>treeep.h</h1><a href="treeep_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_treeep_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_treeep_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="varset_8h.html" title="Defines VarSet class.">dai/varset.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="regiongraph_8h.html" title="Defines classes Region, FRegion and RegionGraph.">dai/regiongraph.h</a>&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="clustergraph_8h.html" title="Defines class ClusterGraph.">dai/clustergraph.h</a>&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="weightedgraph_8h.html" title="Defines some utility functions for weighted graphs.">dai/weightedgraph.h</a>&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;<a class="code" href="jtree_8h.html" title="Defines class JTree.">dai/jtree.h</a>&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;<a class="code" href="enum_8h.html" title="Defines the DAI_ENUM macro.">dai/enum.h</a>&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">namespace </span>dai {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00048"></a><a class="code" href="classdai_1_1TreeEP.html">00048</a> <span class="keyword">class </span><a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a> {
<a name="l00049"></a>00049     <span class="keyword">private</span>:
<a name="l00051"></a>00051         <span class="keywordtype">double</span>                  _maxdiff;
<a name="l00053"></a>00053         <span class="keywordtype">size_t</span>                  _iters;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     <span class="keyword">public</span>:
<a name="l00057"></a><a class="code" href="structdai_1_1TreeEP_1_1Properties.html">00057</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1JTree_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00059"></a>00059             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(TypeType,ORG,ALT)
<a name="l00060"></a>00060 
<a name="l00061"></a>00061             
<a name="l00062"></a><a class="code" href="structdai_1_1TreeEP_1_1Properties.html#f41d83b6886eed09e080420be1fe0486">00062</a>             size_t <a class="code" href="structdai_1_1TreeEP_1_1Properties.html#f41d83b6886eed09e080420be1fe0486" title="Enumeration of possible choices for the tree.">verbose</a>;
<a name="l00063"></a>00063 
<a name="l00065"></a><a class="code" href="structdai_1_1TreeEP_1_1Properties.html#58b7b2658dfa173a64a1683a6ac5425d">00065</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1TreeEP_1_1Properties.html#58b7b2658dfa173a64a1683a6ac5425d" title="Maximum number of iterations.">maxiter</a>;
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="structdai_1_1TreeEP_1_1Properties.html#084e74547be3ae87576ce6ee849fea5f">00068</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1TreeEP_1_1Properties.html#084e74547be3ae87576ce6ee849fea5f" title="Tolerance.">tol</a>;
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="structdai_1_1TreeEP_1_1Properties.html#f80877d6d20176db4bc8367b6185e2d3">00071</a>             TypeType <a class="code" href="structdai_1_1TreeEP_1_1Properties.html#f80877d6d20176db4bc8367b6185e2d3" title="How to choose the tree.">type</a>;
<a name="l00072"></a>00072         } <a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>; <span class="comment">// FIXME: should be props2 because of conflict with JTree::props?</span>
<a name="l00073"></a>00073 
<a name="l00075"></a><a class="code" href="classdai_1_1TreeEP.html#28af8be0b7d337c266286118351059f9">00075</a>         static const <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1TreeEP.html#28af8be0b7d337c266286118351059f9" title="Name of this inference method.">Name</a>;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     private:
<a name="l00078"></a>00078         class TreeEPSubTree {
<a name="l00079"></a>00079             <span class="keyword">private</span>:
<a name="l00080"></a>00080                 std::vector&lt;Factor&gt;  _Qa;
<a name="l00081"></a>00081                 std::vector&lt;Factor&gt;  _Qb;
<a name="l00082"></a>00082                 <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a>             _RTree;
<a name="l00083"></a>00083                 std::vector&lt;size_t&gt;  _a;        <span class="comment">// _Qa[alpha]  &lt;-&gt;  superTree.Qa[_a[alpha]]</span>
<a name="l00084"></a>00084                 std::vector&lt;size_t&gt;  _b;        <span class="comment">// _Qb[beta]   &lt;-&gt;  superTree.Qb[_b[beta]]</span>
<a name="l00085"></a>00085                                                 <span class="comment">// _Qb[beta]   &lt;-&gt;  _RTree[beta]    </span>
<a name="l00086"></a>00086                 <span class="keyword">const</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> *       _I;
<a name="l00087"></a>00087                 <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>               _ns;
<a name="l00088"></a>00088                 <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>               _nsrem;
<a name="l00089"></a>00089                 <span class="keywordtype">double</span>               _logZ;
<a name="l00090"></a>00090                 
<a name="l00091"></a>00091                 
<a name="l00092"></a>00092             <span class="keyword">public</span>:
<a name="l00093"></a>00093                 TreeEPSubTree() : _Qa(), _Qb(), _RTree(), _a(), _b(), _I(NULL), _ns(), _nsrem(), _logZ(0.0) {}
<a name="l00094"></a>00094                 TreeEPSubTree( <span class="keyword">const</span> TreeEPSubTree &amp;x) : _Qa(x._Qa), _Qb(x._Qb), _RTree(x._RTree), _a(x._a), _b(x._b), _I(x._I), _ns(x._ns), _nsrem(x._nsrem), _logZ(x._logZ) {}
<a name="l00095"></a>00095                 TreeEPSubTree &amp; <a class="code" href="classdai_1_1TreeEP.html#c3f12eb0685ac91e4f3970accb65b0dd" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> TreeEPSubTree&amp; x ) {
<a name="l00096"></a>00096                     <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00097"></a>00097                         _Qa         = x._Qa;
<a name="l00098"></a>00098                         _Qb         = x._Qb;
<a name="l00099"></a>00099                         _RTree      = x._RTree;
<a name="l00100"></a>00100                         _a          = x._a;
<a name="l00101"></a>00101                         _b          = x._b;
<a name="l00102"></a>00102                         _I          = x._I;
<a name="l00103"></a>00103                         _ns         = x._ns;
<a name="l00104"></a>00104                         _nsrem      = x._nsrem;
<a name="l00105"></a>00105                         _logZ       = x._logZ;
<a name="l00106"></a>00106                     }
<a name="l00107"></a>00107                     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00108"></a>00108                 }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110                 TreeEPSubTree( <span class="keyword">const</span> <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> &amp;subRTree, <span class="keyword">const</span> <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> &amp;jt_RTree, <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;jt_Qa, <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;jt_Qb, <span class="keyword">const</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> *I );
<a name="l00111"></a>00111                 <span class="keywordtype">void</span> <a class="code" href="classdai_1_1TreeEP.html#fff5580fa87ce391223a2e2867527248" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00112"></a>00112                 <span class="keywordtype">void</span> InvertAndMultiply( <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;<a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>, <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;<a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a> );
<a name="l00113"></a>00113                 <span class="keywordtype">void</span> HUGIN_with_I( std::vector&lt;Factor&gt; &amp;Qa, std::vector&lt;Factor&gt; &amp;Qb );
<a name="l00114"></a>00114                 <span class="keywordtype">double</span> <a class="code" href="classdai_1_1TreeEP.html#c02c63b00dc84333b7cc1fa5b1c45667" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>( <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;Qa, <span class="keyword">const</span> std::vector&lt;Factor&gt; &amp;Qb ) <span class="keyword">const</span>;
<a name="l00115"></a>00115                 <span class="keyword">const</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> *&amp; I() { <span class="keywordflow">return</span> _I; }
<a name="l00116"></a>00116         };
<a name="l00117"></a>00117 
<a name="l00118"></a>00118         std::map&lt;size_t, TreeEPSubTree&gt;  _Q;
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     <span class="keyword">public</span>:
<a name="l00122"></a><a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8">00122</a>         <a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8" title="Default constructor.">TreeEP</a>() : <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>(), _maxdiff(0.0), _iters(0), <a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>(), _Q() {}
<a name="l00123"></a>00123 
<a name="l00125"></a><a class="code" href="classdai_1_1TreeEP.html#a07d388e9201b937cc7275dc9c2d2c8e">00125</a>         <a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8" title="Default constructor.">TreeEP</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a> &amp;x ) : <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>(x), _maxdiff(x._maxdiff), _iters(x._iters), <a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>), _Q(x._Q) {
<a name="l00126"></a>00126             <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> I = 0; I &lt; nrFactors(); I++ )
<a name="l00127"></a>00127                 <span class="keywordflow">if</span>( offtree( I ) )
<a name="l00128"></a>00128                     _Q[I].I() = &amp;factor(I);
<a name="l00129"></a>00129         }
<a name="l00130"></a>00130 
<a name="l00132"></a><a class="code" href="classdai_1_1TreeEP.html#c3f12eb0685ac91e4f3970accb65b0dd">00132</a>         <a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a>&amp; <a class="code" href="classdai_1_1TreeEP.html#c3f12eb0685ac91e4f3970accb65b0dd" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a> &amp;x ) {
<a name="l00133"></a>00133             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00134"></a>00134                 <a class="code" href="classdai_1_1JTree.html#e57eeabbe31424e37ede02ec83d8c89b" title="Assignment operator.">JTree::operator=</a>( x );
<a name="l00135"></a>00135                 _maxdiff = x.<a class="code" href="classdai_1_1TreeEP.html#82e03d6338d8d9af0452ee4ab1aa22eb" title="Maximum difference encountered so far.">_maxdiff</a>;
<a name="l00136"></a>00136                 _iters   = x.<a class="code" href="classdai_1_1TreeEP.html#1e9a1f014ff7c93a8c51c70972ea19aa" title="Number of iterations needed.">_iters</a>;
<a name="l00137"></a>00137                 <a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>    = x.<a class="code" href="classdai_1_1TreeEP.html#b81687eb1c926bb9cbfc62de14bad58b" title="Parameters of this inference algorithm.">props</a>;
<a name="l00138"></a>00138                 _Q       = x.<a class="code" href="classdai_1_1TreeEP.html#9222fc80cc7725816b26d834fe887cf0">_Q</a>;
<a name="l00139"></a>00139                 <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> I = 0; I &lt; nrFactors(); I++ )
<a name="l00140"></a>00140                     <span class="keywordflow">if</span>( offtree( I ) )
<a name="l00141"></a>00141                         _Q[I].I() = &amp;factor(I);
<a name="l00142"></a>00142             }
<a name="l00143"></a>00143             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00144"></a>00144         }
<a name="l00145"></a>00145 
<a name="l00147"></a>00147         <a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8" title="Default constructor.">TreeEP</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp;<a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00151"></a>00151 
<a name="l00152"></a><a class="code" href="classdai_1_1TreeEP.html#bf27fc154e99ec5a03a95ac50e5898d8">00152</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a>* <a class="code" href="classdai_1_1TreeEP.html#bf27fc154e99ec5a03a95ac50e5898d8" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8" title="Default constructor.">TreeEP</a>(*<span class="keyword">this</span>); }
<a name="l00153"></a><a class="code" href="classdai_1_1TreeEP.html#7edffafcc35bc49aba8d31ad1b16e686">00153</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TreeEP.html" title="Approximate inference algorithm &amp;quot;TreeEP&amp;quot; by Minka and Qi.">TreeEP</a>* <a class="code" href="classdai_1_1TreeEP.html#7edffafcc35bc49aba8d31ad1b16e686" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1TreeEP.html#5220ad0f0e713305a248963ff65533f8" title="Default constructor.">TreeEP</a>(); }
<a name="l00154"></a>00154         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1TreeEP.html#47053ddaff024856fcb870ce38d99370" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00155"></a>00155         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1TreeEP.html#c02c63b00dc84333b7cc1fa5b1c45667" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>() <span class="keyword">const</span>;
<a name="l00156"></a>00156         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1TreeEP.html#fff5580fa87ce391223a2e2867527248" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00157"></a><a class="code" href="classdai_1_1TreeEP.html#3cc3718d1fbdf67db23a846283f99d08">00157</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1TreeEP.html#fff5580fa87ce391223a2e2867527248" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;<span class="comment">/*ns*/</span> ) { <a class="code" href="classdai_1_1TreeEP.html#fff5580fa87ce391223a2e2867527248" title="Initializes all data structures of the approximate inference algorithm.">init</a>(); }
<a name="l00158"></a>00158         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1TreeEP.html#aecaf7e050a913c082a2ce5b9f97d744" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00159"></a><a class="code" href="classdai_1_1TreeEP.html#d1214cd7bc0899d1a8dc4523bacdb488">00159</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1TreeEP.html#d1214cd7bc0899d1a8dc4523bacdb488">maxDiff</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _maxdiff; }
<a name="l00160"></a><a class="code" href="classdai_1_1TreeEP.html#e18e681d1f078e42445d39f8605df7d4">00160</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1TreeEP.html#e18e681d1f078e42445d39f8605df7d4">Iterations</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _iters; }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168     <span class="keyword">private</span>:
<a name="l00169"></a>00169         <span class="keywordtype">void</span> ConstructRG( <span class="keyword">const</span> <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> &amp;tree );
<a name="l00170"></a>00170         <span class="keywordtype">bool</span> offtree( <span class="keywordtype">size_t</span> I )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (fac2OR[I] == -1U); }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> PropertySet &amp;opts );
<a name="l00173"></a>00173         PropertySet getProperties() <span class="keyword">const</span>;
<a name="l00174"></a>00174         std::string printProperties() <span class="keyword">const</span>;
<a name="l00175"></a>00175 };
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 } <span class="comment">// end of namespace dai</span>
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

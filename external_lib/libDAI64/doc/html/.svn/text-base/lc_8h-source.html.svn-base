<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/lc.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>lc.h</h1><a href="lc_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_lc_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_lc_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="enum_8h.html" title="Defines the DAI_ENUM macro.">dai/enum.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;<a class="code" href="exceptions_8h.html" title="Defines Exception class and the DAI_THROW macro.">dai/exceptions.h</a>&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">namespace </span>dai {
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00043"></a><a class="code" href="classdai_1_1LC.html">00043</a> <span class="keyword">class </span><a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a> {
<a name="l00044"></a>00044     <span class="keyword">private</span>:
<a name="l00045"></a>00045         std::vector&lt;Factor&gt;      _pancakes;      <span class="comment">// used by all LC types (psi_I is stored in the pancake)</span>
<a name="l00046"></a>00046         std::vector&lt;Factor&gt;      _cavitydists;   <span class="comment">// used by all LC types to store the approximate cavity distribution</span>
<a name="l00048"></a>00048 <span class="comment"></span>        std::vector&lt;std::vector&lt;Factor&gt; &gt;      _phis;
<a name="l00049"></a>00049 
<a name="l00051"></a>00051         std::vector&lt;Factor&gt;      _beliefs;
<a name="l00052"></a>00052 
<a name="l00054"></a>00054         <span class="keywordtype">double</span>                  _maxdiff;
<a name="l00056"></a>00056         <span class="keywordtype">size_t</span>                  _iters;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keyword">public</span>:
<a name="l00060"></a><a class="code" href="structdai_1_1LC_1_1Properties.html">00060</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1LC_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00062"></a>00062             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(CavityType,FULL,PAIR,PAIR2,UNIFORM)
<a name="l00063"></a>00063 
<a name="l00064"></a>00064             
<a name="l00065"></a>00065             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(UpdateType,SEQFIX,SEQRND,NONE)
<a name="l00066"></a>00066 
<a name="l00067"></a>00067             
<a name="l00068"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#f36169e6a7ba3a27df32007bea3a42d9">00068</a>             size_t <a class="code" href="structdai_1_1LC_1_1Properties.html#f36169e6a7ba3a27df32007bea3a42d9" title="Enumeration of possible ways to initialize the cavities.">verbose</a>;
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#62730c262e688ac59512cf3018b5f4e8">00071</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1LC_1_1Properties.html#62730c262e688ac59512cf3018b5f4e8" title="Maximum number of iterations.">maxiter</a>;
<a name="l00072"></a>00072 
<a name="l00074"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#31e75ccf9a1fcb72af41fe3c7d336d98">00074</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1LC_1_1Properties.html#31e75ccf9a1fcb72af41fe3c7d336d98" title="Tolerance.">tol</a>;
<a name="l00075"></a>00075 
<a name="l00077"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#f03789fceacde90d75ebe5f1b19eaafb">00077</a>             <span class="keywordtype">bool</span> <a class="code" href="structdai_1_1LC_1_1Properties.html#f03789fceacde90d75ebe5f1b19eaafb" title="Complete or partial reinit of cavity graphs?">reinit</a>;
<a name="l00078"></a>00078 
<a name="l00080"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#5a6aea1ff16d15198aad0392ed9b9110">00080</a>             <span class="keywordtype">double</span> <a class="code" href="structdai_1_1LC_1_1Properties.html#5a6aea1ff16d15198aad0392ed9b9110" title="Damping constant.">damping</a>;
<a name="l00081"></a>00081 
<a name="l00083"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#76cb44f7bdd84b4d8fa0eb5b37d4d14d">00083</a>             CavityType <a class="code" href="structdai_1_1LC_1_1Properties.html#76cb44f7bdd84b4d8fa0eb5b37d4d14d" title="How to initialize the cavities.">cavity</a>;
<a name="l00084"></a>00084 
<a name="l00086"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#771b51ab1d382bae136f76e6fcc9b481">00086</a>             UpdateType <a class="code" href="structdai_1_1LC_1_1Properties.html#771b51ab1d382bae136f76e6fcc9b481" title="What update schedule to use.">updates</a>;
<a name="l00087"></a>00087 
<a name="l00089"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#8e4cbe17245261c2e6996edf3926365c">00089</a>             std::<span class="keywordtype">string</span> <a class="code" href="structdai_1_1LC_1_1Properties.html#8e4cbe17245261c2e6996edf3926365c" title="Name of the algorithm used to initialize the cavity distributions.">cavainame</a>;      <span class="comment">// FIXME: needs assignment operator?</span>
<a name="l00090"></a>00090 
<a name="l00092"></a><a class="code" href="structdai_1_1LC_1_1Properties.html#276fd4fc9a94cf5dace3de93ceefc027">00092</a>             <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> <a class="code" href="structdai_1_1LC_1_1Properties.html#276fd4fc9a94cf5dace3de93ceefc027" title="Parameters for the algorithm used to initialize the cavity distributions.">cavaiopts</a>;      <span class="comment">// FIXME: needs assignment operator?</span>
<a name="l00093"></a>00093         } <a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>;
<a name="l00094"></a>00094 
<a name="l00096"></a><a class="code" href="classdai_1_1LC.html#a0993f897e7c68145cfbd658f5511e64">00096</a>         static const <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1LC.html#a0993f897e7c68145cfbd658f5511e64" title="Name of this inference algorithm.">Name</a>;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     public:
<a name="l00100"></a><a class="code" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4">00100</a>         <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a>() : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(), _pancakes(), _cavitydists(), _phis(), _beliefs(), _maxdiff(), _iters(), <a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>() {}
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classdai_1_1LC.html#2f9f79af763757bbc8507e63c0440a27">00103</a>         <a class="code" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4" title="Default constructor.">LC</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a> &amp;x ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(x), _pancakes(x._pancakes), _cavitydists(x._cavitydists), _phis(x._phis), _beliefs(x._beliefs), _maxdiff(x._maxdiff), _iters(x._iters), <a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>) {}
<a name="l00104"></a>00104 
<a name="l00106"></a><a class="code" href="classdai_1_1LC.html#d8650f8491916e9d9fd96f2b9a76ed53">00106</a>         <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a>&amp; <a class="code" href="classdai_1_1LC.html#d8650f8491916e9d9fd96f2b9a76ed53" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a> &amp;x ) {
<a name="l00107"></a>00107             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00108"></a>00108                 <a class="code" href="classdai_1_1DAIAlg.html#364afd19b16ac9233fd4b235b76317c8" title="Assignment operator.">DAIAlgFG::operator=</a>( x );
<a name="l00109"></a>00109                 _pancakes     = x.<a class="code" href="classdai_1_1LC.html#5e7935f10e10a338388585d386b2a410">_pancakes</a>;
<a name="l00110"></a>00110                 _cavitydists  = x.<a class="code" href="classdai_1_1LC.html#2e31e6034841d1d73c92e2abff3c9ed6">_cavitydists</a>;
<a name="l00111"></a>00111                 _phis         = x.<a class="code" href="classdai_1_1LC.html#042485bf668f05096eb316ce9ea8d9b1" title="_phis[i][_I] corresponds to ">_phis</a>;
<a name="l00112"></a>00112                 _beliefs      = x.<a class="code" href="classdai_1_1LC.html#e46a55eed6268e16f8d525a698c92bfd" title="Single variable beliefs.">_beliefs</a>;
<a name="l00113"></a>00113                 _maxdiff      = x.<a class="code" href="classdai_1_1LC.html#6e88f6f2c7f4941a153f6e8c451c6200" title="Maximum difference encountered so far.">_maxdiff</a>;
<a name="l00114"></a>00114                 _iters        = x.<a class="code" href="classdai_1_1LC.html#b9a6ef3efc0f0312b32989a317f93be0" title="Number of iterations needed.">_iters</a>;
<a name="l00115"></a>00115                 <a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>         = x.<a class="code" href="classdai_1_1LC.html#cbaf0aaf68d0645f215be238f58c8dd9" title="Parameters of this inference algorithm.">props</a>;
<a name="l00116"></a>00116             }
<a name="l00117"></a>00117             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119 
<a name="l00121"></a>00121         <a class="code" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4" title="Default constructor.">LC</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp;<a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classdai_1_1LC.html#0e98719468000085434e9fc0419d53d0">00126</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a>* <a class="code" href="classdai_1_1LC.html#0e98719468000085434e9fc0419d53d0" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4" title="Default constructor.">LC</a>(*<span class="keyword">this</span>); }
<a name="l00127"></a><a class="code" href="classdai_1_1LC.html#94a6ba124dc5b56dca2693f19f5093d7">00127</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1LC.html" title="Approximate inference algorithm &amp;quot;Loop Corrected Belief Propagation&amp;quot; by...">LC</a>* <a class="code" href="classdai_1_1LC.html#94a6ba124dc5b56dca2693f19f5093d7" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1LC.html#e46e76de9def71e83ff7d95604e641b4" title="Default constructor.">LC</a>(); }
<a name="l00128"></a>00128         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1LC.html#7600e9344f474bfc866531044fc02b45" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00129"></a><a class="code" href="classdai_1_1LC.html#af4d1578168f9f1ed4622b971f76e21c">00129</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1LC.html#af4d1578168f9f1ed4622b971f76e21c" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n )<span class="keyword"> const </span>{ <span class="keywordflow">return</span>( _beliefs[findVar(n)] ); }
<a name="l00130"></a><a class="code" href="classdai_1_1LC.html#8399d420190caeb55a3a13a62e454d8e">00130</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1LC.html#af4d1578168f9f1ed4622b971f76e21c" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;<span class="comment">/*ns*/</span> )<span class="keyword"> const </span>{ <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(NOT_IMPLEMENTED); <span class="keywordflow">return</span> <a class="code" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85" title="Represents a factor with probability entries represented as Real.">Factor</a>(); }
<a name="l00131"></a><a class="code" href="classdai_1_1LC.html#73b806c54ec2001a34c4e5777833820f">00131</a>         <span class="keyword">virtual</span> std::vector&lt;Factor&gt; <a class="code" href="classdai_1_1LC.html#73b806c54ec2001a34c4e5777833820f" title="Returns all &amp;quot;beliefs&amp;quot; (i.e., approximate marginal probability distribution)...">beliefs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _beliefs; }
<a name="l00132"></a><a class="code" href="classdai_1_1LC.html#76364b27eb464d03a1cbf214acdcc5dc">00132</a>         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1LC.html#76364b27eb464d03a1cbf214acdcc5dc" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>()<span class="keyword"> const </span>{ <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(NOT_IMPLEMENTED); <span class="keywordflow">return</span> 0.0; }
<a name="l00133"></a>00133         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1LC.html#007ab11f0d08d0ed23ae141230b122cc" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00134"></a><a class="code" href="classdai_1_1LC.html#b077c808ad6ca6b9e134746d0846ea5d">00134</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1LC.html#007ab11f0d08d0ed23ae141230b122cc" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;<span class="comment">/*ns*/</span> ) { <a class="code" href="classdai_1_1LC.html#007ab11f0d08d0ed23ae141230b122cc" title="Initializes all data structures of the approximate inference algorithm.">init</a>(); }
<a name="l00135"></a>00135         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1LC.html#ff5884412fd193b8c525c3ccdd84b40b" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00136"></a><a class="code" href="classdai_1_1LC.html#32b30963958c3f408d1c5a618fcf418d">00136</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1LC.html#32b30963958c3f408d1c5a618fcf418d">maxDiff</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _maxdiff; }
<a name="l00137"></a><a class="code" href="classdai_1_1LC.html#8654c28fad78fa6cd850b2207b271086">00137</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1LC.html#8654c28fad78fa6cd850b2207b271086">Iterations</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _iters; }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         <span class="keywordtype">double</span> CalcCavityDist( <span class="keywordtype">size_t</span> i, <span class="keyword">const</span> std::string &amp;name, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00144"></a>00144         <span class="keywordtype">double</span> InitCavityDists( <span class="keyword">const</span> std::string &amp;name, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00145"></a>00145         <span class="keywordtype">long</span> SetCavityDists( std::vector&lt;Factor&gt; &amp;Q );
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> NewPancake (<span class="keywordtype">size_t</span> i, <span class="keywordtype">size_t</span> _I, <span class="keywordtype">bool</span> &amp; hasNaNs);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149         <span class="keywordtype">void</span> CalcBelief (<span class="keywordtype">size_t</span> i);
<a name="l00150"></a>00150         <span class="keyword">const</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> &amp;<a class="code" href="classdai_1_1LC.html#af4d1578168f9f1ed4622b971f76e21c" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a> (<span class="keywordtype">size_t</span> i)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _beliefs[i]; };
<a name="l00151"></a>00151         <span class="keyword">const</span> <a class="code" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85" title="Represents a factor with probability entries represented as Real.">Factor</a> &amp;pancake (<span class="keywordtype">size_t</span> i)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _pancakes[i]; };
<a name="l00152"></a>00152         <span class="keyword">const</span> <a class="code" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85" title="Represents a factor with probability entries represented as Real.">Factor</a> &amp;cavitydist (<span class="keywordtype">size_t</span> i)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _cavitydists[i]; };
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keyword">private</span>:
<a name="l00156"></a>00156         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> PropertySet &amp;opts );
<a name="l00157"></a>00157         PropertySet getProperties() <span class="keyword">const</span>;
<a name="l00158"></a>00158         std::string printProperties() <span class="keyword">const</span>;
<a name="l00159"></a>00159 };
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 } <span class="comment">// end of namespace dai</span>
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

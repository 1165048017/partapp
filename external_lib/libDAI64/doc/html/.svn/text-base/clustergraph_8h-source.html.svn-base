<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/clustergraph.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>clustergraph.h</h1><a href="clustergraph_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_clustergraph_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_clustergraph_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="varset_8h.html" title="Defines VarSet class.">dai/varset.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="bipgraph_8h.html" title="Defines BipartiteGraph class.">dai/bipgraph.h</a>&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>dai {
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00041"></a>00041 
<a name="l00044"></a><a class="code" href="classdai_1_1ClusterGraph.html">00044</a>     <span class="keyword">class </span><a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> {
<a name="l00045"></a>00045         <span class="keyword">public</span>:
<a name="l00047"></a><a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc">00047</a>             <a class="code" href="classdai_1_1BipartiteGraph.html" title="Represents the neighborhood structure of nodes in a bipartite graph.">BipartiteGraph</a>       <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>;
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57">00050</a>             std::vector&lt;Var&gt;     <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>;
<a name="l00051"></a>00051 
<a name="l00053"></a><a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2">00053</a>             std::vector&lt;VarSet&gt;  <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>;
<a name="l00054"></a>00054 
<a name="l00056"></a><a class="code" href="classdai_1_1ClusterGraph.html#f3157e5f5baf0f36a8c37c43c4a70818">00056</a>             <span class="keyword">typedef</span> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">BipartiteGraph::Neighbor</a> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">Neighbor</a>;
<a name="l00057"></a>00057 
<a name="l00059"></a><a class="code" href="classdai_1_1ClusterGraph.html#c5d233b46473ce14c1773db35cb8100d">00059</a>             <span class="keyword">typedef</span> <a class="code" href="classdai_1_1BipartiteGraph.html#ff511d0eba0fd2956c08b602029ba95f" title="Used as index of an edge: an Edge(a,b) corresponds to the edge between the a&amp;#39;th...">BipartiteGraph::Edge</a>     <a class="code" href="classdai_1_1ClusterGraph.html#c5d233b46473ce14c1773db35cb8100d" title="Shorthand for BipartiteGraph::Edge.">Edge</a>;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <span class="keyword">public</span>:
<a name="l00063"></a><a class="code" href="classdai_1_1ClusterGraph.html#d2e6d97e39753c1524026e8dbe52387a">00063</a>             <a class="code" href="classdai_1_1ClusterGraph.html#d2e6d97e39753c1524026e8dbe52387a" title="Default constructor.">ClusterGraph</a>() : <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>(), <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>(), <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>() {}
<a name="l00064"></a>00064 
<a name="l00066"></a>00066             <a class="code" href="classdai_1_1ClusterGraph.html#d2e6d97e39753c1524026e8dbe52387a" title="Default constructor.">ClusterGraph</a>( <span class="keyword">const</span> std::vector&lt;VarSet&gt; &amp; cls );
<a name="l00067"></a>00067             
<a name="l00069"></a><a class="code" href="classdai_1_1ClusterGraph.html#591f12b43ccc7d0f046169c03d61c948">00069</a>             <a class="code" href="classdai_1_1ClusterGraph.html#d2e6d97e39753c1524026e8dbe52387a" title="Default constructor.">ClusterGraph</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> &amp;x ) : <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>(x.<a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>), <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>(x.<a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>), <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>(x.<a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>) {}
<a name="l00070"></a>00070 
<a name="l00072"></a><a class="code" href="classdai_1_1ClusterGraph.html#6397064f5586477caff7d3aec485248f">00072</a>             <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a>&amp; <a class="code" href="classdai_1_1ClusterGraph.html#6397064f5586477caff7d3aec485248f" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> &amp;x ) {
<a name="l00073"></a>00073                 <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00074"></a>00074                     <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a> = x.<a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>;
<a name="l00075"></a>00075                     <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a> = x.<a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>;
<a name="l00076"></a>00076                     <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a> = x.<a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>;
<a name="l00077"></a>00077                 }
<a name="l00078"></a>00078                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00079"></a>00079             }
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="classdai_1_1ClusterGraph.html#768d5b0b1636909630dfca1a0f4df878">00082</a>             <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1ClusterGraph.html#768d5b0b1636909630dfca1a0f4df878" title="Returns true if cluster I is not contained in a larger cluster.">isMaximal</a>( <span class="keywordtype">size_t</span> I )<span class="keyword"> const </span>{
<a name="l00083"></a>00083 <span class="preprocessor">#ifdef DAI_DEBUG</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>                assert( I &lt; <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#476ff8dc5b1306ecd70cf6517c323e13" title="Returns number of nodes of type 2.">nr2</a>() );
<a name="l00085"></a>00085 <span class="preprocessor">#endif</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>                <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp; clI = <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>[I];
<a name="l00087"></a>00087                 <span class="keywordtype">bool</span> maximal = <span class="keyword">true</span>;
<a name="l00088"></a>00088                 <span class="comment">// The following may not be optimal, since it may repeatedly test the same cluster *J</span>
<a name="l00089"></a>00089                 <span class="keywordflow">foreach</span>( <span class="keyword">const</span> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">Neighbor</a> &amp;i, <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#427276f5d42f52d8d15130e2aa8a66f2" title="Returns constant reference to the _i1&amp;#39;th neighbor of node i2 of type 2.">nb2</a>(I) ) {
<a name="l00090"></a>00090                     <span class="keywordflow">foreach</span>( <span class="keyword">const</span> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">Neighbor</a> &amp;J, <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i) )
<a name="l00091"></a>00091                         <span class="keywordflow">if</span>( (J != I) &amp;&amp; (clI &lt;&lt; <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>[J]) ) {
<a name="l00092"></a>00092                             maximal = <span class="keyword">false</span>;
<a name="l00093"></a>00093                             <span class="keywordflow">break</span>;
<a name="l00094"></a>00094                         }
<a name="l00095"></a>00095                     <span class="keywordflow">if</span>( !maximal )
<a name="l00096"></a>00096                         <span class="keywordflow">break</span>;
<a name="l00097"></a>00097                 }
<a name="l00098"></a>00098                 <span class="keywordflow">return</span> maximal;
<a name="l00099"></a>00099             }
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="classdai_1_1ClusterGraph.html#13cfa2d4973d387d55ba0a54d4676a6e">00102</a>             <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a>&amp; <a class="code" href="classdai_1_1ClusterGraph.html#13cfa2d4973d387d55ba0a54d4676a6e" title="Erases all VarSets that are not maximal.">eraseNonMaximal</a>() {
<a name="l00103"></a>00103                 <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> I = 0; I &lt; <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#476ff8dc5b1306ecd70cf6517c323e13" title="Returns number of nodes of type 2.">nr2</a>(); ) {
<a name="l00104"></a>00104                     <span class="keywordflow">if</span>( !<a class="code" href="classdai_1_1ClusterGraph.html#768d5b0b1636909630dfca1a0f4df878" title="Returns true if cluster I is not contained in a larger cluster.">isMaximal</a>(I) ) {
<a name="l00105"></a>00105                         <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.erase( <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.begin() + I );
<a name="l00106"></a>00106                         <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#0c00ea323841f04187f9f7ac82a413fa" title="Removes node n2 of type 2 and all incident edges.">erase2</a>(I);
<a name="l00107"></a>00107                     } <span class="keywordflow">else</span>
<a name="l00108"></a>00108                         I++;
<a name="l00109"></a>00109                 }
<a name="l00110"></a>00110                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00111"></a>00111             }
<a name="l00112"></a>00112 
<a name="l00114"></a><a class="code" href="classdai_1_1ClusterGraph.html#6a3592792de64c05211abc9aebf525d2">00114</a>             <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1ClusterGraph.html#6a3592792de64c05211abc9aebf525d2" title="Returns number of clusters.">size</a>()<span class="keyword"> const </span>{
<a name="l00115"></a>00115                 <span class="keywordflow">return</span> <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#476ff8dc5b1306ecd70cf6517c323e13" title="Returns number of nodes of type 2.">nr2</a>();
<a name="l00116"></a>00116             }
<a name="l00117"></a>00117 
<a name="l00119"></a><a class="code" href="classdai_1_1ClusterGraph.html#bd0f148c5953b0ec4340e1b1c37ab0ef">00119</a>             <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1ClusterGraph.html#bd0f148c5953b0ec4340e1b1c37ab0ef" title="Returns index of variable n.">findVar</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n )<span class="keyword"> const </span>{
<a name="l00120"></a>00120                 <span class="keywordflow">return</span> find( <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.begin(), <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.end(), n ) - <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.begin();
<a name="l00121"></a>00121             }
<a name="l00122"></a>00122 
<a name="l00124"></a><a class="code" href="classdai_1_1ClusterGraph.html#b193856e886cf22d9773282dd4a01f20">00124</a>             <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1ClusterGraph.html#b193856e886cf22d9773282dd4a01f20" title="Returns true if vars with indices i1 and i2 are adjacent, i.e., both contained in...">adj</a>( <span class="keywordtype">size_t</span> i1, <span class="keywordtype">size_t</span> i2 ) {
<a name="l00125"></a>00125                 <span class="keywordtype">bool</span> result = <span class="keyword">false</span>;
<a name="l00126"></a>00126                 <span class="keywordflow">foreach</span>( <span class="keyword">const</span> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">Neighbor</a> &amp;I, <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i1) )
<a name="l00127"></a>00127                     <span class="keywordflow">if</span>( find( <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#427276f5d42f52d8d15130e2aa8a66f2" title="Returns constant reference to the _i1&amp;#39;th neighbor of node i2 of type 2.">nb2</a>(I).begin(), <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#427276f5d42f52d8d15130e2aa8a66f2" title="Returns constant reference to the _i1&amp;#39;th neighbor of node i2 of type 2.">nb2</a>(I).end(), i2 ) != <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#427276f5d42f52d8d15130e2aa8a66f2" title="Returns constant reference to the _i1&amp;#39;th neighbor of node i2 of type 2.">nb2</a>(I).end() ) {
<a name="l00128"></a>00128                         result = <span class="keyword">true</span>;
<a name="l00129"></a>00129                         <span class="keywordflow">break</span>;
<a name="l00130"></a>00130                     }
<a name="l00131"></a>00131                 <span class="keywordflow">return</span> result;
<a name="l00132"></a>00132             }
<a name="l00133"></a>00133             
<a name="l00135"></a><a class="code" href="classdai_1_1ClusterGraph.html#bcb07aa0dd6b564c9af98f07ff3a486e">00135</a>             <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> <a class="code" href="classdai_1_1ClusterGraph.html#bcb07aa0dd6b564c9af98f07ff3a486e" title="Returns union of clusters that contain the variable with index i.">Delta</a>( <span class="keywordtype">size_t</span> i )<span class="keyword"> const </span>{
<a name="l00136"></a>00136                 <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> result;
<a name="l00137"></a>00137                 <span class="keywordflow">foreach</span>( <span class="keyword">const</span> <a class="code" href="structdai_1_1BipartiteGraph_1_1Neighbor.html" title="Describes a neighboring node of some other node in a BipartiteGraph.">Neighbor</a> &amp;I, <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i) )
<a name="l00138"></a>00138                     result |= <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>[I];
<a name="l00139"></a>00139                 <span class="keywordflow">return</span> result;
<a name="l00140"></a>00140             }
<a name="l00141"></a>00141 
<a name="l00143"></a><a class="code" href="classdai_1_1ClusterGraph.html#da8f45f04be422aaf399e02565013d6c">00143</a>             <span class="keywordtype">void</span> <a class="code" href="classdai_1_1ClusterGraph.html#da8f45f04be422aaf399e02565013d6c" title="Inserts a cluster (if it does not already exist).">insert</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;cl ) {
<a name="l00144"></a>00144                 <span class="keywordflow">if</span>( find( <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.begin(), <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.end(), cl ) == <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.end() ) {
<a name="l00145"></a>00145                     <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.push_back( cl );
<a name="l00146"></a>00146                     <span class="comment">// add variables (if necessary) and calculate neighborhood of new cluster</span>
<a name="l00147"></a>00147                     std::vector&lt;size_t&gt; nbs;
<a name="l00148"></a>00148                     <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> n = cl.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); n != cl.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); n++ ) {
<a name="l00149"></a>00149                         <span class="keywordtype">size_t</span> iter = find( <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.begin(), <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.end(), *n ) - <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.begin();
<a name="l00150"></a>00150                         nbs.push_back( iter );
<a name="l00151"></a>00151                         <span class="keywordflow">if</span>( iter == <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.size() ) {
<a name="l00152"></a>00152                             <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#3ae6385791a1a89ad14512c2ada59ece" title="Adds a node of type 1 without neighbors.">add1</a>();
<a name="l00153"></a>00153                             <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>.push_back( *n );
<a name="l00154"></a>00154                         }
<a name="l00155"></a>00155                     }
<a name="l00156"></a>00156                     <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#10188a609f7356eb6ded1e125e736a20" title="Adds a node of type 2 without neighbors.">add2</a>( nbs.begin(), nbs.end(), nbs.size() );
<a name="l00157"></a>00157                 }
<a name="l00158"></a>00158             }
<a name="l00159"></a>00159 
<a name="l00161"></a><a class="code" href="classdai_1_1ClusterGraph.html#407cabb372ced5d4399cea029f1e1bf0">00161</a>             <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> <a class="code" href="classdai_1_1ClusterGraph.html#407cabb372ced5d4399cea029f1e1bf0" title="Returns union of clusters that contain variable with index i, minus this variable...">delta</a>( <span class="keywordtype">size_t</span> i )<span class="keyword"> const </span>{
<a name="l00162"></a>00162                 <span class="keywordflow">return</span> <a class="code" href="classdai_1_1ClusterGraph.html#bcb07aa0dd6b564c9af98f07ff3a486e" title="Returns union of clusters that contain the variable with index i.">Delta</a>( i ) / <a class="code" href="classdai_1_1ClusterGraph.html#b96a722f403754e0437c5fbe0c364f57" title="Stores the variables corresponding to the nodes.">vars</a>[i];
<a name="l00163"></a>00163             }
<a name="l00164"></a>00164             
<a name="l00166"></a><a class="code" href="classdai_1_1ClusterGraph.html#21a1a08351c17c90a3efac6a5f8a4818">00166</a>             <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a>&amp; <a class="code" href="classdai_1_1ClusterGraph.html#21a1a08351c17c90a3efac6a5f8a4818" title="Erases all clusters that contain n where n is the variable with index i.">eraseSubsuming</a>( <span class="keywordtype">size_t</span> i ) {
<a name="l00167"></a>00167                 <span class="keywordflow">while</span>( <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i).size() ) {
<a name="l00168"></a>00168                     <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.erase( <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>.begin() + <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i)[0] );
<a name="l00169"></a>00169                     <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#0c00ea323841f04187f9f7ac82a413fa" title="Removes node n2 of type 2 and all incident edges.">erase2</a>( <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#8d211a9092a4730b814351f7506bfc53" title="Returns constant reference to the _i2&amp;#39;th neighbor of node i1 of type 1.">nb1</a>(i)[0] );
<a name="l00170"></a>00170                 }
<a name="l00171"></a>00171                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00172"></a>00172             }
<a name="l00173"></a>00173             
<a name="l00175"></a><a class="code" href="classdai_1_1ClusterGraph.html#bb5e88ece31a9a7ff405f988dc1a1e46">00175</a>             <span class="keyword">const</span> std::vector&lt;VarSet&gt; &amp; <a class="code" href="classdai_1_1ClusterGraph.html#bb5e88ece31a9a7ff405f988dc1a1e46" title="Returns a const reference to the clusters.">toVector</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classdai_1_1ClusterGraph.html#cf58184945136e95a49177c52da8d2c2" title="Stores the clusters corresponding to the hyperedges.">clusters</a>; }
<a name="l00176"></a>00176 
<a name="l00178"></a>00178 
<a name="l00182"></a><a class="code" href="classdai_1_1ClusterGraph.html#517e9ea33d7ec133586110eb5106fcc4">00182</a>             <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1ClusterGraph.html#517e9ea33d7ec133586110eb5106fcc4" title="Calculates cost of eliminating the variable with index i.">eliminationCost</a>( <span class="keywordtype">size_t</span> i ) {
<a name="l00183"></a>00183                 std::vector&lt;size_t&gt; id_n = <a class="code" href="classdai_1_1ClusterGraph.html#d8a1a655cf546d42303d46f3d08079cc" title="Stores the neighborhood structure.">G</a>.<a class="code" href="classdai_1_1BipartiteGraph.html#841e97d3aaa891145de79eff8f2dbf72" title="Calculates second-order neighbors (i.e., neighbors of neighbors) of node n1 of type...">delta1</a>( i );
<a name="l00184"></a>00184 
<a name="l00185"></a>00185                 <span class="keywordtype">size_t</span> cost = 0;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187                 <span class="comment">// for each unordered pair {i1,i2} adjacent to n</span>
<a name="l00188"></a>00188                 <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> _i1 = 0; _i1 &lt; id_n.size(); _i1++ )
<a name="l00189"></a>00189                     <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> _i2 = _i1 + 1; _i2 &lt; id_n.size(); _i2++ ) {
<a name="l00190"></a>00190                         <span class="comment">// if i1 and i2 are not adjacent, eliminating n would make them adjacent</span>
<a name="l00191"></a>00191                         <span class="keywordflow">if</span>( !<a class="code" href="classdai_1_1ClusterGraph.html#b193856e886cf22d9773282dd4a01f20" title="Returns true if vars with indices i1 and i2 are adjacent, i.e., both contained in...">adj</a>(id_n[_i1], id_n[_i2]) )
<a name="l00192"></a>00192                             cost++;
<a name="l00193"></a>00193                     }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195                 <span class="keywordflow">return</span> cost;
<a name="l00196"></a>00196             }
<a name="l00197"></a>00197 
<a name="l00199"></a>00199             <span class="comment">/*  the interactions that are created along the way.</span>
<a name="l00200"></a>00200 <span class="comment">             *  \param ElimSeq A set of outer clusters and an elimination sequence</span>
<a name="l00201"></a>00201 <span class="comment">             *  \return A set of elimination "cliques"</span>
<a name="l00202"></a>00202 <span class="comment">             */</span>
<a name="l00203"></a>00203             <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> <a class="code" href="classdai_1_1ClusterGraph.html#1ec39220612d165fc15dde360b57bf46" title="Performs Variable Elimination without Probs, i.e. only keeping track of.">VarElim</a>( <span class="keyword">const</span> std::vector&lt;Var&gt; &amp;ElimSeq ) <span class="keyword">const</span>;
<a name="l00204"></a>00204 
<a name="l00206"></a>00206             <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> <a class="code" href="classdai_1_1ClusterGraph.html#742b9a4367bf6ce1a6a05e58b9892089" title="Performs Variable Eliminiation using the MinFill heuristic.">VarElim_MinFill</a>() <span class="keyword">const</span>;
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classdai_1_1ClusterGraph.html#23a45a96ea996832c667d346c99bc760">00209</a>             <span class="keyword">friend</span> std::ostream &amp; <a class="code" href="classdai_1_1ClusterGraph.html#23a45a96ea996832c667d346c99bc760" title="Writes a ClusterGraph to an output stream.">operator &lt;&lt; </a>( std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="classdai_1_1ClusterGraph.html" title="A ClusterGraph is a hypergraph with VarSets as nodes.">ClusterGraph</a> &amp; cl ) {
<a name="l00210"></a>00210                 os &lt;&lt; cl.<a class="code" href="classdai_1_1ClusterGraph.html#bb5e88ece31a9a7ff405f988dc1a1e46" title="Returns a const reference to the clusters.">toVector</a>();
<a name="l00211"></a>00211                 <span class="keywordflow">return</span> os;
<a name="l00212"></a>00212             }
<a name="l00213"></a>00213     };
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 } <span class="comment">// end of namespace dai</span>
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

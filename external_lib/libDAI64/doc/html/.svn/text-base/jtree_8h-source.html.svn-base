<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/jtree.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>jtree.h</h1><a href="jtree_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_jtree_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_jtree_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="varset_8h.html" title="Defines VarSet class.">dai/varset.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="regiongraph_8h.html" title="Defines classes Region, FRegion and RegionGraph.">dai/regiongraph.h</a>&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="clustergraph_8h.html" title="Defines class ClusterGraph.">dai/clustergraph.h</a>&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="weightedgraph_8h.html" title="Defines some utility functions for weighted graphs.">dai/weightedgraph.h</a>&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;<a class="code" href="enum_8h.html" title="Defines the DAI_ENUM macro.">dai/enum.h</a>&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>dai {
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00047"></a><a class="code" href="classdai_1_1JTree.html">00047</a> <span class="keyword">class </span><a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgRG</a> {
<a name="l00048"></a>00048     <span class="keyword">private</span>:
<a name="l00049"></a>00049         std::vector&lt;std::vector&lt;Factor&gt; &gt;  _mes;
<a name="l00050"></a>00050         <span class="keywordtype">double</span>               _logZ;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="keyword">public</span>:
<a name="l00054"></a><a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389">00054</a>         <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a>             <a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>;
<a name="l00055"></a>00055         
<a name="l00057"></a><a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb">00057</a>         std::vector&lt;Factor&gt;  <a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>;
<a name="l00058"></a>00058         
<a name="l00060"></a><a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d">00060</a>         std::vector&lt;Factor&gt;  <a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>;
<a name="l00061"></a>00061 
<a name="l00063"></a><a class="code" href="structdai_1_1JTree_1_1Properties.html">00063</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1JTree_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00065"></a>00065             <a class="code" href="enum_8h.html#9961c92e7b9e3b0ccba5fe62731178c3" title="Extends the C++ enum type by supporting input/output streaming and conversion to...">DAI_ENUM</a>(UpdateType,HUGIN,SHSH)
<a name="l00066"></a>00066 
<a name="l00067"></a>00067             
<a name="l00068"></a><a class="code" href="structdai_1_1JTree_1_1Properties.html#f1115a3a2efbb2047f4305f3e88e364d">00068</a>             size_t <a class="code" href="structdai_1_1JTree_1_1Properties.html#f1115a3a2efbb2047f4305f3e88e364d" title="Enumeration of possible JTree updates.">verbose</a>;
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="structdai_1_1JTree_1_1Properties.html#9120abdd0ab3d1456cc25526013df494">00071</a>             UpdateType <a class="code" href="structdai_1_1JTree_1_1Properties.html#9120abdd0ab3d1456cc25526013df494" title="Type of updates.">updates</a>;
<a name="l00072"></a>00072         } <a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>;
<a name="l00073"></a>00073 
<a name="l00075"></a><a class="code" href="classdai_1_1JTree.html#e7c0a2ebb2675cb6f8441eae09f7f826">00075</a>         static const <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1JTree.html#e7c0a2ebb2675cb6f8441eae09f7f826" title="Name of this inference algorithm.">Name</a>;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     public:
<a name="l00079"></a><a class="code" href="classdai_1_1JTree.html#7e4dd4e6f6eaded0600b6759ceccae87">00079</a>         <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>() : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgRG</a>(), _mes(), _logZ(), <a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>(), <a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>(), <a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>(), <a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>() {}
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="classdai_1_1JTree.html#48999aa576e174177e5f904deaa9699d">00082</a>         <a class="code" href="classdai_1_1JTree.html#7e4dd4e6f6eaded0600b6759ceccae87" title="Default constructor.">JTree</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a> &amp;x ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgRG</a>(x), _mes(x._mes), _logZ(x._logZ), <a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>(x.<a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>), <a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>(x.<a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>), <a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>(x.<a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>), <a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>) {}
<a name="l00083"></a>00083 
<a name="l00085"></a><a class="code" href="classdai_1_1JTree.html#e57eeabbe31424e37ede02ec83d8c89b">00085</a>         <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>&amp; <a class="code" href="classdai_1_1JTree.html#e57eeabbe31424e37ede02ec83d8c89b" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a> &amp;x ) {
<a name="l00086"></a>00086             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00087"></a>00087                 <a class="code" href="classdai_1_1DAIAlg.html#364afd19b16ac9233fd4b235b76317c8" title="Assignment operator.">DAIAlgRG::operator=</a>( x );
<a name="l00088"></a>00088                 _mes    = x.<a class="code" href="classdai_1_1JTree.html#7e5ac41e26a7e5bba05bb947a5fbd19b">_mes</a>;
<a name="l00089"></a>00089                 _logZ   = x.<a class="code" href="classdai_1_1JTree.html#18434cb349d52b06ce9ac5618011beb1">_logZ</a>;
<a name="l00090"></a>00090                 <a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>   = x.<a class="code" href="classdai_1_1JTree.html#6ddedae95e2dda19e20b7b49455ea389" title="Rooted tree.">RTree</a>;
<a name="l00091"></a>00091                 <a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>      = x.<a class="code" href="classdai_1_1JTree.html#66cdd4d8258582aaf794466f3786dbfb" title="Outer region beliefs.">Qa</a>;
<a name="l00092"></a>00092                 <a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>      = x.<a class="code" href="classdai_1_1JTree.html#9d93e9f387d9772be5bc2b5372f7d20d" title="Inner region beliefs.">Qb</a>;
<a name="l00093"></a>00093                 <a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>   = x.<a class="code" href="classdai_1_1JTree.html#9bcd565eb07149a7aeeb0380e042036c" title="Parameters of this inference algorithm.">props</a>;
<a name="l00094"></a>00094             }
<a name="l00095"></a>00095             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00096"></a>00096         }
<a name="l00097"></a>00097 
<a name="l00099"></a>00099         <a class="code" href="classdai_1_1JTree.html#7e4dd4e6f6eaded0600b6759ceccae87" title="Default constructor.">JTree</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp;<a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts, <span class="keywordtype">bool</span> automatic=<span class="keyword">true</span> );
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00103"></a>00103 
<a name="l00104"></a><a class="code" href="classdai_1_1JTree.html#54c62d9fb8ac3f12b06343989c6fd398">00104</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>* <a class="code" href="classdai_1_1JTree.html#54c62d9fb8ac3f12b06343989c6fd398" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1JTree.html#7e4dd4e6f6eaded0600b6759ceccae87" title="Default constructor.">JTree</a>(*<span class="keyword">this</span>); }
<a name="l00105"></a><a class="code" href="classdai_1_1JTree.html#0a4a6ba17b04d274fec3dbebc6a2a6cb">00105</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1JTree.html" title="Exact inference algorithm using junction tree.">JTree</a>* <a class="code" href="classdai_1_1JTree.html#0a4a6ba17b04d274fec3dbebc6a2a6cb" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1JTree.html#7e4dd4e6f6eaded0600b6759ceccae87" title="Default constructor.">JTree</a>(); }
<a name="l00106"></a>00106         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1JTree.html#bc4d34db1bd656b35e430a1e26388aa1" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00107"></a>00107         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1JTree.html#432cdc9cc9f4be26509e6bd2337c5325" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n ) <span class="keyword">const</span>;
<a name="l00108"></a>00108         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1JTree.html#432cdc9cc9f4be26509e6bd2337c5325" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns ) <span class="keyword">const</span>;
<a name="l00109"></a>00109         <span class="keyword">virtual</span> std::vector&lt;Factor&gt; <a class="code" href="classdai_1_1JTree.html#3c16a15fe017649fec4d63455fda6843" title="Returns all &amp;quot;beliefs&amp;quot; (i.e., approximate marginal probability distribution)...">beliefs</a>() <span class="keyword">const</span>;
<a name="l00110"></a>00110         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1JTree.html#d2e2c9ff0327014da4c41d211bfd57c5" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>() <span class="keyword">const</span>;
<a name="l00111"></a><a class="code" href="classdai_1_1JTree.html#cbb2df1dc4e64097a46fc4cb1394e76f">00111</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1JTree.html#cbb2df1dc4e64097a46fc4cb1394e76f" title="Initializes all data structures of the approximate inference algorithm.">init</a>() {}
<a name="l00112"></a><a class="code" href="classdai_1_1JTree.html#365c52b5f264c844ac5c010026719350">00112</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1JTree.html#cbb2df1dc4e64097a46fc4cb1394e76f" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;<span class="comment">/*ns*/</span> ) {}
<a name="l00113"></a>00113         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1JTree.html#b0cd2ba167212e4c8c8d241b985d3db6" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00114"></a><a class="code" href="classdai_1_1JTree.html#acd3916835c9d349aa1b22a2dd54de83">00114</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1JTree.html#acd3916835c9d349aa1b22a2dd54de83">maxDiff</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> 0.0; }
<a name="l00115"></a><a class="code" href="classdai_1_1JTree.html#71cd98f072d69f6ce60af8b52ef02eb8">00115</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1JTree.html#71cd98f072d69f6ce60af8b52ef02eb8">Iterations</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> 1UL; }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         <span class="keywordtype">void</span> GenerateJT( <span class="keyword">const</span> std::vector&lt;VarSet&gt; &amp;Cliques );
<a name="l00122"></a>00122 
<a name="l00124"></a><a class="code" href="classdai_1_1JTree.html#5a96942bd16a4e4e10fcf720c1b0e04b">00124</a>         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> &amp; <a class="code" href="classdai_1_1JTree.html#5a96942bd16a4e4e10fcf720c1b0e04b" title="Returns reference the message from outer region alpha to its _beta&amp;#39;th neighboring...">message</a>( <span class="keywordtype">size_t</span> alpha, <span class="keywordtype">size_t</span> _beta ) { <span class="keywordflow">return</span> _mes[alpha][_beta]; }   
<a name="l00126"></a><a class="code" href="classdai_1_1JTree.html#e59c0012cbd6a425704fd637f9fed4c5">00126</a>         <span class="keyword">const</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> &amp; <a class="code" href="classdai_1_1JTree.html#5a96942bd16a4e4e10fcf720c1b0e04b" title="Returns reference the message from outer region alpha to its _beta&amp;#39;th neighboring...">message</a>( <span class="keywordtype">size_t</span> alpha, <span class="keywordtype">size_t</span> _beta )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _mes[alpha][_beta]; }   
<a name="l00127"></a>00127 
<a name="l00129"></a>00129         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1JTree.html#4569d21624cb49d9a79c3c8332e0d4b3" title="Runs junction-tree with HUGIN updates.">runHUGIN</a>();
<a name="l00130"></a>00130 
<a name="l00132"></a>00132         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1JTree.html#6d8ee4f30498985d0d434988dba8c258" title="Runs junction-tree with Shafer-Shenoy updates.">runShaferShenoy</a>();
<a name="l00133"></a>00133 
<a name="l00135"></a>00135         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1JTree.html#0ee81ed10535369928ba0abb3c1f7e02" title="Finds an efficient tree for calculating the marginal of some variables.">findEfficientTree</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; ns, <a class="code" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079" title="Vector of DEdge.">DEdgeVec</a> &amp;Tree, <span class="keywordtype">size_t</span> PreviousRoot=(<span class="keywordtype">size_t</span>)-1 ) <span class="keyword">const</span>;
<a name="l00136"></a>00136 
<a name="l00138"></a>00138         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1JTree.html#2ffd2a47a85b81efbbb5f0cfd7a083fa" title="Calculates the marginal of a set of variables.">calcMarginal</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; ns );
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <span class="keyword">private</span>:
<a name="l00142"></a>00142         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts );
<a name="l00143"></a>00143         <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> getProperties() <span class="keyword">const</span>;
<a name="l00144"></a>00144         std::string printProperties() <span class="keyword">const</span>;
<a name="l00145"></a>00145 };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00149"></a>00149 
<a name="l00152"></a>00152 std::pair&lt;size_t,size_t&gt; <a class="code" href="classdai_1_1JTree.html#bca2633ffb8701cb62c54241bdad307e" title="Calculates upper bound to the treewidth of a FactorGraph.">treewidth</a>( <span class="keyword">const</span> FactorGraph &amp; <a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a> );
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 } <span class="comment">// end of namespace dai</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

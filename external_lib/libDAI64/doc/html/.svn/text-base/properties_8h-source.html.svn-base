<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/properties.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>properties.h</h1><a href="properties_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_properties_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_properties_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;boost/any.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cassert&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="exceptions_8h.html" title="Defines Exception class and the DAI_THROW macro.">dai/exceptions.h</a>&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">namespace </span>dai {
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00044"></a><a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996">00044</a> <span class="keyword">typedef</span> std::string <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a>;
<a name="l00045"></a>00045 
<a name="l00047"></a><a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7">00047</a> <span class="keyword">typedef</span> boost::any  <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a>;
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="namespacedai.html#cbc670414e04eecf5c284e42d9d036e3">00050</a> <span class="keyword">typedef</span> std::pair&lt;PropertyKey, PropertyValue&gt; <a class="code" href="namespacedai.html#cbc670414e04eecf5c284e42d9d036e3" title="A Property is a pair of a key and a corresponding value.">Property</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00054"></a>00054 std::ostream&amp; <a class="code" href="namespacedai.html#5142341b00644dce3b6f982cc6d283c0" title="Writes a FactorGraph to an output stream.">operator&lt;&lt; </a>(std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="namespacedai.html#cbc670414e04eecf5c284e42d9d036e3" title="A Property is a pair of a key and a corresponding value.">Property</a> &amp; p);
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00058"></a><a class="code" href="classdai_1_1PropertySet.html">00058</a> <span class="keyword">class </span><a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> : <span class="keyword">private</span> std::map&lt;PropertyKey, PropertyValue&gt; {
<a name="l00059"></a>00059     <span class="keyword">public</span>:
<a name="l00061"></a><a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a">00061</a>         <span class="keyword">const</span> <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a> &amp; <a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a" title="Gets a property.">Get</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key)<span class="keyword"> const </span>{ 
<a name="l00062"></a>00062             PropertySet::const_iterator x = find(key); 
<a name="l00063"></a>00063 <span class="preprocessor">#ifdef DAI_DEBUG            </span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>            <span class="keywordflow">if</span>( x == this-&gt;end() )
<a name="l00065"></a>00065                 std::cerr &lt;&lt; <span class="stringliteral">"PropertySet::Get cannot find property "</span> &lt;&lt; key &lt;&lt; std::endl;
<a name="l00066"></a>00066 <span class="preprocessor">#endif</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>            assert( x != this-&gt;end() ); 
<a name="l00068"></a>00068             <span class="keywordflow">return</span> x-&gt;second; 
<a name="l00069"></a>00069         }
<a name="l00070"></a>00070 
<a name="l00072"></a><a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df">00072</a>         <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp; <a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df" title="Sets a property.">Set</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key, <span class="keyword">const</span> <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a> &amp;val) { this-&gt;operator[](key) = val; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }
<a name="l00073"></a>00073 
<a name="l00075"></a>00075         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;
<a name="l00076"></a><a class="code" href="classdai_1_1PropertySet.html#1458c0be9e07b400b4e54df72dae6a3a">00076</a>         ValueType <a class="code" href="classdai_1_1PropertySet.html#1458c0be9e07b400b4e54df72dae6a3a" title="Gets a property, casted as ValueType.">GetAs</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key)<span class="keyword"> const </span>{
<a name="l00077"></a>00077             <span class="keywordflow">try</span> {
<a name="l00078"></a>00078                 <span class="keywordflow">return</span> boost::any_cast&lt;ValueType&gt;(<a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a" title="Gets a property.">Get</a>(key));
<a name="l00079"></a>00079             } <span class="keywordflow">catch</span>( <span class="keyword">const</span> boost::bad_any_cast &amp; ) {
<a name="l00080"></a>00080                 std::cerr &lt;&lt; <span class="stringliteral">"Cannot cast property "</span> &lt;&lt; key &lt;&lt; <span class="stringliteral">" to "</span>;
<a name="l00081"></a>00081                 std::cerr &lt;&lt; <span class="keyword">typeid</span>(ValueType).name() &lt;&lt; std::endl;
<a name="l00082"></a>00082                 <span class="keywordflow">return</span> boost::any_cast&lt;ValueType&gt;(<a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a" title="Gets a property.">Get</a>(key));
<a name="l00083"></a>00083             }
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085 
<a name="l00087"></a>00087         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;
<a name="l00088"></a><a class="code" href="classdai_1_1PropertySet.html#0a18aa933d4b58c043e39f79a8870862">00088</a>         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1PropertySet.html#0a18aa933d4b58c043e39f79a8870862" title="Converts a property from string to ValueType (if necessary).">ConvertTo</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key) { 
<a name="l00089"></a>00089             <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a> val = <a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a" title="Gets a property.">Get</a>(key);
<a name="l00090"></a>00090             <span class="keywordflow">if</span>( val.type() != <span class="keyword">typeid</span>(ValueType) ) {
<a name="l00091"></a>00091                 assert( val.type() == <span class="keyword">typeid</span>(std::string) );
<a name="l00092"></a>00092 
<a name="l00093"></a>00093                 std::stringstream ss;
<a name="l00094"></a>00094                 ss &lt;&lt; GetAs&lt;std::string&gt;(key);
<a name="l00095"></a>00095                 ValueType result;
<a name="l00096"></a>00096                 ss &gt;&gt; result;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098                 <a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df" title="Sets a property.">Set</a>(key, result);
<a name="l00099"></a>00099             }
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00103"></a>00103         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;
<a name="l00104"></a><a class="code" href="classdai_1_1PropertySet.html#8d8bebf882f713af015ffb02a563db60">00104</a>         ValueType <a class="code" href="classdai_1_1PropertySet.html#8d8bebf882f713af015ffb02a563db60" title="Converts a property from string to ValueType (if necessary).">getStringAs</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key)<span class="keyword"> const </span>{ 
<a name="l00105"></a>00105             <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a> val = <a class="code" href="classdai_1_1PropertySet.html#cdc6cbd296f457d4a21d5795c62e8e8a" title="Gets a property.">Get</a>(key);
<a name="l00106"></a>00106             <span class="keywordflow">if</span>( val.type() == <span class="keyword">typeid</span>(std::string) ) {
<a name="l00107"></a>00107                 std::stringstream ss;
<a name="l00108"></a>00108                 ss &lt;&lt; GetAs&lt;std::string&gt;(key);
<a name="l00109"></a>00109                 ValueType result;
<a name="l00110"></a>00110                 ss &gt;&gt; result;
<a name="l00111"></a>00111                 <span class="keywordflow">return</span> result;
<a name="l00112"></a>00112             } <span class="keywordflow">else</span> <span class="keywordflow">if</span>( val.type() == <span class="keyword">typeid</span>(ValueType) ) {
<a name="l00113"></a>00113                 <span class="keywordflow">return</span> boost::any_cast&lt;ValueType&gt;(val);
<a name="l00114"></a>00114             } <span class="keywordflow">else</span> {
<a name="l00115"></a>00115                 <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(IMPOSSIBLE_TYPECAST);
<a name="l00116"></a>00116                 <span class="keywordflow">return</span> ValueType();
<a name="l00117"></a>00117             }
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119 
<a name="l00121"></a>00121         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ValueType&gt;
<a name="l00122"></a><a class="code" href="classdai_1_1PropertySet.html#8febf05009938e2cee9988a93b8a1d56">00122</a>         <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp; <a class="code" href="classdai_1_1PropertySet.html#8febf05009938e2cee9988a93b8a1d56" title="Converts a property from ValueType to string (if necessary).">setAsString</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key, ValueType &amp;val) { 
<a name="l00123"></a>00123             <span class="keywordflow">if</span>( val.type() == <span class="keyword">typeid</span>(std::string) ) {
<a name="l00124"></a>00124                 <span class="keywordflow">return</span> <a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df" title="Sets a property.">Set</a>(key, val);
<a name="l00125"></a>00125             } <span class="keywordflow">else</span> {
<a name="l00126"></a>00126                 std::stringstream ss (std::stringstream::out);
<a name="l00127"></a>00127                 ss &lt;&lt; val;
<a name="l00128"></a>00128                 <span class="keywordflow">return</span> <a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df" title="Sets a property.">Set</a>(key, ss.str());
<a name="l00129"></a>00129             }
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131 
<a name="l00133"></a><a class="code" href="classdai_1_1PropertySet.html#51bfe57cacf9f79e788c490ed369869e">00133</a>         <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> <a class="code" href="classdai_1_1PropertySet.html#51bfe57cacf9f79e788c490ed369869e" title="Shorthand for (temporarily) adding properties, e.g. PropertySet p()(&amp;quot;method&amp;quot;...">operator()</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key, <span class="keyword">const</span> <a class="code" href="namespacedai.html#eb056b768d73d02c5796c4012f4170c7" title="Type of the value of a Property.">PropertyValue</a> &amp;val)<span class="keyword"> const </span>{ <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> copy = *<span class="keyword">this</span>; <span class="keywordflow">return</span> copy.<a class="code" href="classdai_1_1PropertySet.html#c5e6bb10fcbcbe1302494cd995e412df" title="Sets a property.">Set</a>(key,val); }
<a name="l00134"></a>00134 
<a name="l00136"></a><a class="code" href="classdai_1_1PropertySet.html#bc3df170db0dbba57cb11e3ef87f5948">00136</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1PropertySet.html#bc3df170db0dbba57cb11e3ef87f5948" title="Check if a property with the given key exists.">hasKey</a>(<span class="keyword">const</span> <a class="code" href="namespacedai.html#cc877a85f4f4dbb6a0d58c434bb2b996" title="Type of the key of a Property.">PropertyKey</a> &amp;key)<span class="keyword"> const </span>{ PropertySet::const_iterator x = find(key); <span class="keywordflow">return</span> (x != this-&gt;end()); }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138         <span class="comment">// Friends</span>
<a name="l00139"></a>00139         <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="classdai_1_1PropertySet.html#55c10d86bc897277108b545f22e06fb7" title="Writes a PropertySet object to an output stream.">operator&lt;&lt; </a>(std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp; ps);
<a name="l00140"></a>00140         <span class="keyword">friend</span> std::istream&amp; <a class="code" href="classdai_1_1PropertySet.html#0ec4068ab9fe8a5690f560a2e7d778fc" title="Reads a PropertySet object from an input stream, storing values as strings.">operator&gt;&gt; </a>(std::istream&amp; is, <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp; ps);
<a name="l00141"></a>00141 };
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 } <span class="comment">// end of namespace dai</span>
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

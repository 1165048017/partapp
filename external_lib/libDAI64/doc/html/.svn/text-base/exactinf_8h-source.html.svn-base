<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/exactinf.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>exactinf.h</h1><a href="exactinf_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_exactinf_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_exactinf_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="daialg_8h.html" title="Defines abstract base class InfAlg, its descendants DAIAlg&amp;lt;T&amp;gt;, the specializations...">dai/daialg.h</a>&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="properties_8h.html" title="Defines the Property and PropertySet classes.">dai/properties.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="factorgraph_8h.html" title="Defines the FactorGraph class.">dai/factorgraph.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="enum_8h.html" title="Defines the DAI_ENUM macro.">dai/enum.h</a>&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>dai {
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00041"></a><a class="code" href="classdai_1_1ExactInf.html">00041</a> <span class="keyword">class </span><a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a> {
<a name="l00042"></a>00042     <span class="keyword">public</span>:
<a name="l00044"></a><a class="code" href="structdai_1_1ExactInf_1_1Properties.html">00044</a>         <span class="keyword">struct </span><a class="code" href="structdai_1_1ExactInf_1_1Properties.html" title="Parameters of this inference algorithm.">Properties</a> {
<a name="l00046"></a><a class="code" href="structdai_1_1ExactInf_1_1Properties.html#13f9e5a1531ceeb9537d981da2212075">00046</a>             <span class="keywordtype">size_t</span> <a class="code" href="structdai_1_1ExactInf_1_1Properties.html#13f9e5a1531ceeb9537d981da2212075" title="Verbosity.">verbose</a>;
<a name="l00047"></a>00047         } <a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>;
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="classdai_1_1ExactInf.html#2280f2174f843cb88eb715d51536b812">00050</a>         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classdai_1_1ExactInf.html#2280f2174f843cb88eb715d51536b812" title="Name of this inference algorithm.">Name</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="keyword">private</span>:
<a name="l00053"></a>00053         std::vector&lt;Factor&gt; _beliefsV;
<a name="l00054"></a>00054         std::vector&lt;Factor&gt; _beliefsF;
<a name="l00055"></a>00055         <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a>                _logZ;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057     <span class="keyword">public</span>:
<a name="l00059"></a><a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1">00059</a>         <a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1" title="Default constructor.">ExactInf</a>() : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(), <a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>(), _beliefsV(), _beliefsF(), _logZ(0) {}
<a name="l00060"></a>00060 
<a name="l00062"></a><a class="code" href="classdai_1_1ExactInf.html#4eb13120c5f7f4d58333117a9ca1033d">00062</a>         <a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1" title="Default constructor.">ExactInf</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a> &amp;x ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(x), <a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>(x.<a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>), _beliefsV(x._beliefsV), _beliefsF(x._beliefsF), _logZ(x._logZ) {}
<a name="l00063"></a>00063 
<a name="l00065"></a><a class="code" href="classdai_1_1ExactInf.html#59fcfa39f061f0ee326a5e0593ef598e">00065</a>         <a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a>&amp; <a class="code" href="classdai_1_1ExactInf.html#59fcfa39f061f0ee326a5e0593ef598e" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a> &amp;x ) {
<a name="l00066"></a>00066             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00067"></a>00067                 <a class="code" href="classdai_1_1DAIAlg.html#364afd19b16ac9233fd4b235b76317c8" title="Assignment operator.">DAIAlgFG::operator=</a>( x );
<a name="l00068"></a>00068                 <a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>     = x.<a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>;
<a name="l00069"></a>00069                 _beliefsV = x.<a class="code" href="classdai_1_1ExactInf.html#5a926fe33ffc6bb1d85b99e2999f4a2a">_beliefsV</a>;
<a name="l00070"></a>00070                 _beliefsF = x.<a class="code" href="classdai_1_1ExactInf.html#f5acccc7ac54ae7ccd62fb0e189155c1">_beliefsF</a>;
<a name="l00071"></a>00071                 _logZ     = x.<a class="code" href="classdai_1_1ExactInf.html#e312e3ebdad499ae3df38e63594f701a">_logZ</a>;
<a name="l00072"></a>00072             }
<a name="l00073"></a>00073             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 
<a name="l00077"></a><a class="code" href="classdai_1_1ExactInf.html#014dde3f2b7ec66332fb1cbe00538b89">00077</a>         <a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1" title="Default constructor.">ExactInf</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1FactorGraph.html" title="Represents a factor graph.">FactorGraph</a> &amp;<a class="code" href="classdai_1_1DAIAlg.html#9348542c22d04ed804388f1fe3009fa3" title="Get reference to underlying FactorGraph.">fg</a>, <span class="keyword">const</span> <a class="code" href="classdai_1_1PropertySet.html" title="Represents a set of properties, mapping keys (of type PropertyKey) to values (of...">PropertySet</a> &amp;opts ) : <a class="code" href="classdai_1_1DAIAlg.html" title="Combines an InfAlg and a graphical model, e.g., a FactorGraph or RegionGraph.">DAIAlgFG</a>(fg), <a class="code" href="classdai_1_1ExactInf.html#b4dbf2483cfdfbb9971b2f69c42a2327" title="Parameters of this inference algorithm.">props</a>(), _beliefsV(), _beliefsF(), _logZ() {
<a name="l00078"></a>00078             setProperties( opts );
<a name="l00079"></a>00079             construct();
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classdai_1_1ExactInf.html#ac21e07e94947d380da177523caa0213">00085</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a>* <a class="code" href="classdai_1_1ExactInf.html#ac21e07e94947d380da177523caa0213" title="Returns a pointer to a new, cloned copy of *this (i.e., virtual copy constructor)...">clone</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1" title="Default constructor.">ExactInf</a>(*<span class="keyword">this</span>); }
<a name="l00086"></a><a class="code" href="classdai_1_1ExactInf.html#10d22ff1ae94fb7af4a1bca9496e3bce">00086</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1ExactInf.html" title="Exact inference algorithm using brute force enumeration (mainly useful for testing...">ExactInf</a>* <a class="code" href="classdai_1_1ExactInf.html#10d22ff1ae94fb7af4a1bca9496e3bce" title="Returns a pointer to a newly constructed object *this (i.e., virtual default constructor)...">create</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classdai_1_1ExactInf.html#324505f8fdc4904179eb2e1c96fccda1" title="Default constructor.">ExactInf</a>(); }
<a name="l00087"></a>00087         <span class="keyword">virtual</span> std::string <a class="code" href="classdai_1_1ExactInf.html#b316d463564eafd5c2629eded1f31b80" title="Identifies itself for logging purposes.">identify</a>() <span class="keyword">const</span>;
<a name="l00088"></a><a class="code" href="classdai_1_1ExactInf.html#85d120a9ab1b03ae922be7a7568de64e">00088</a>         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1ExactInf.html#85d120a9ab1b03ae922be7a7568de64e" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> beliefV( findVar( n ) ); }
<a name="l00089"></a>00089         <span class="keyword">virtual</span> <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> <a class="code" href="classdai_1_1ExactInf.html#85d120a9ab1b03ae922be7a7568de64e" title="Returns the &amp;quot;belief&amp;quot; (i.e., approximate marginal probability distribution)...">belief</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;ns ) <span class="keyword">const</span>;
<a name="l00090"></a>00090         <span class="keyword">virtual</span> std::vector&lt;Factor&gt; <a class="code" href="classdai_1_1ExactInf.html#d6ec1824cb811733bfa68071ab4ae5e3" title="Returns all &amp;quot;beliefs&amp;quot; (i.e., approximate marginal probability distribution)...">beliefs</a>() <span class="keyword">const</span>;
<a name="l00091"></a><a class="code" href="classdai_1_1ExactInf.html#f13ecd0ae1374782ac4afa8c6e679d73">00091</a>         <span class="keyword">virtual</span> <a class="code" href="namespacedai.html#e7d0472fdc89a8635825d01940e91cbf" title="Real number (alias for double, could be changed to long double if necessary).">Real</a> <a class="code" href="classdai_1_1ExactInf.html#f13ecd0ae1374782ac4afa8c6e679d73" title="Returns the logarithm of the (approximated) partition sum (normalizing constant of...">logZ</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _logZ; }
<a name="l00092"></a>00092         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1ExactInf.html#8b86be92502af6ef5ecb38f12406733d" title="Initializes all data structures of the approximate inference algorithm.">init</a>();
<a name="l00093"></a><a class="code" href="classdai_1_1ExactInf.html#ace58f99e40bb4084c73d6b77fd26456">00093</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classdai_1_1ExactInf.html#8b86be92502af6ef5ecb38f12406733d" title="Initializes all data structures of the approximate inference algorithm.">init</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;<span class="comment">/*ns*/</span> ) { <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(NOT_IMPLEMENTED); }
<a name="l00094"></a>00094         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1ExactInf.html#cfb073de0b7b01929a9d02e6500f2443" title="Runs the approximate inference algorithm.">run</a>();
<a name="l00095"></a><a class="code" href="classdai_1_1ExactInf.html#4f3189ff1567e80dd245a1308f1f31bf">00095</a>         <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classdai_1_1ExactInf.html#4f3189ff1567e80dd245a1308f1f31bf">maxDiff</a>()<span class="keyword"> const </span>{ <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(NOT_IMPLEMENTED); <span class="keywordflow">return</span> 0.0; }
<a name="l00096"></a><a class="code" href="classdai_1_1ExactInf.html#2df22866419ee923043c8fcf0a2ff62b">00096</a>         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1ExactInf.html#2df22866419ee923043c8fcf0a2ff62b">Iterations</a>()<span class="keyword"> const </span>{ <a class="code" href="exceptions_8h.html#e40c2873869c363218a8945a44e03525" title="Macro that simplifies throwing an exceptions with a useful error message.">DAI_THROW</a>(NOT_IMPLEMENTED); <span class="keywordflow">return</span> 0; }
<a name="l00098"></a>00098         
<a name="l00099"></a>00099 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <a class="code" href="classdai_1_1TFactor.html" title="Represents a probability factor.">Factor</a> beliefV( <span class="keywordtype">size_t</span> i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _beliefsV[i]; }
<a name="l00103"></a>00103         <a class="code" href="namespacedai.html#7515abf9952cd312e95a34ada0670e85" title="Represents a factor with probability entries represented as Real.">Factor</a> beliefF( <span class="keywordtype">size_t</span> I )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _beliefsF[I]; }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     <span class="keyword">private</span>:
<a name="l00107"></a>00107         <span class="keywordtype">void</span> construct();
<a name="l00108"></a>00108         <span class="keywordtype">void</span> setProperties( <span class="keyword">const</span> PropertySet &amp;opts );
<a name="l00109"></a>00109         PropertySet getProperties() <span class="keyword">const</span>;
<a name="l00110"></a>00110         std::string printProperties() <span class="keyword">const</span>;
<a name="l00111"></a>00111 };
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 } <span class="comment">// end of namespace dai</span>
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

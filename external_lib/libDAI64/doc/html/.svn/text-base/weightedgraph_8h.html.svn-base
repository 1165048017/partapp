<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/weightedgraph.h File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>weightedgraph.h File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
Defines some utility functions for weighted graphs. 
<p>

<p>
<code>#include &lt;climits&gt;</code><br>
<code>#include &lt;vector&gt;</code><br>
<code>#include &lt;map&gt;</code><br>
<code>#include &lt;iostream&gt;</code><br>
<code>#include &lt;set&gt;</code><br>
<code>#include &lt;cassert&gt;</code><br>
<code>#include &lt;limits&gt;</code><br>
<code>#include &lt;boost/graph/adjacency_list.hpp&gt;</code><br>
<code>#include &lt;boost/graph/prim_minimum_spanning_tree.hpp&gt;</code><br>

<p>
<a href="weightedgraph_8h-source.html">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html">dai</a></td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1DEdge.html">dai::DEdge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a directed edge pointing from n1 to n2.  <a href="classdai_1_1DEdge.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1UEdge.html">dai::UEdge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Undirected edge between nodes n1 and n2.  <a href="classdai_1_1UEdge.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdai_1_1WeightedGraph.html">dai::WeightedGraph&lt; T &gt;</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents an undirected weighted graph, with weights of type T.  <a href="classdai_1_1WeightedGraph.html#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ee930c2594ad57112ff5e230c4ca3391"></a><!-- doxytag: member="weightedgraph.h::UEdgeVec" ref="ee930c2594ad57112ff5e230c4ca3391" args="" -->
typedef std::vector&lt; UEdge &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#ee930c2594ad57112ff5e230c4ca3391">dai::UEdgeVec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector of <a class="el" href="classdai_1_1UEdge.html" title="Undirected edge between nodes n1 and n2.">UEdge</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e7764251ab4d4b2d4fbec214eac83079"></a><!-- doxytag: member="weightedgraph.h::DEdgeVec" ref="e7764251ab4d4b2d4fbec214eac83079" args="" -->
typedef std::vector&lt; DEdge &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#e7764251ab4d4b2d4fbec214eac83079">dai::DEdgeVec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector of <a class="el" href="classdai_1_1DEdge.html" title="Represents a directed edge pointing from n1 to n2.">DEdge</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="dfcfd53771d59db79ddd826928e76400"></a><!-- doxytag: member="weightedgraph.h::Graph" ref="dfcfd53771d59db79ddd826928e76400" args="" -->
typedef std::set&lt; UEdge &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#dfcfd53771d59db79ddd826928e76400">dai::Graph</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents an undirected graph. <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">DEdgeVec&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#7ede01daa445869cce29730d0cc29d74">dai::MinSpanningTreePrims</a> (const WeightedGraph&lt; T &gt; &amp;G)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Uses Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G.  <a href="#7ede01daa445869cce29730d0cc29d74"></a><br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;typename T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">DEdgeVec&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedai.html#461d882462bc6625c3874e1481fd9d68">dai::MaxSpanningTreePrims</a> (const WeightedGraph&lt; T &gt; &amp;Graph)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Use Prim's algorithm to construct a minimal spanning tree from the (positively) weighted graph G.  <a href="#461d882462bc6625c3874e1481fd9d68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="602bda76af8301b981bc9147793d72e0"></a><!-- doxytag: member="weightedgraph.h::GrowRootedTree" ref="602bda76af8301b981bc9147793d72e0" args="(const Graph &amp;T, size_t Root)" -->
DEdgeVec&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#602bda76af8301b981bc9147793d72e0">dai::GrowRootedTree</a> (const Graph &amp;T, size_t Root)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a rooted tree from a tree and a root. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7e19e088006a5e91e0d34d26cf6f3a8d"></a><!-- doxytag: member="weightedgraph.h::RandomDRegularGraph" ref="7e19e088006a5e91e0d34d26cf6f3a8d" args="(size_t N, size_t d)" -->
UEdgeVec&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacedai.html#7e19e088006a5e91e0d34d26cf6f3a8d">dai::RandomDRegularGraph</a> (size_t N, size_t d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs a random undirected graph of N nodes, where each node has connectivity d. <br></td></tr>
</table>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

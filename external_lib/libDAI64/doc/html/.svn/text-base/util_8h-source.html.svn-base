<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/util.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>util.h</h1><a href="util_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    This file is part of libDAI.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00010"></a>00010 <span class="comment">    (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00015"></a>00015 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef __defined_libdai_util_h</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_util_h</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cstdio&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;boost/foreach.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#ifdef WINDOWS</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;map&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#else</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;tr1/unordered_map&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 
<a name="l00048"></a><a class="code" href="util_8h.html#85d9ac269eba33293361f4ed7c2a697b">00048</a> <span class="preprocessor">#define foreach BOOST_FOREACH</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#ifdef WINDOWS</span>
<a name="l00053"></a>00053 <span class="preprocessor">    bool isnan( double x );</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00056"></a>00056     <span class="keywordtype">double</span> atanh( <span class="keywordtype">double</span> x );
<a name="l00057"></a>00057 
<a name="l00059"></a>00059     <span class="keywordtype">double</span> log1p( <span class="keywordtype">double</span> x );
<a name="l00060"></a>00060 <span class="preprocessor">#endif</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="keyword">namespace </span>dai {
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="preprocessor">#ifdef WINDOWS</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00070"></a>00070 <span class="preprocessor">    template &lt;typename T, typename U&gt;</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>        <span class="keyword">class </span>hash_map : <span class="keyword">public</span> std::map&lt;T,U&gt; {};
<a name="l00072"></a>00072 <span class="preprocessor">#else</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00076"></a>00076 <span class="preprocessor">    template &lt;typename T, typename U&gt;</span>
<a name="l00077"></a><a class="code" href="classdai_1_1hash__map.html">00077</a> <span class="preprocessor"></span>        <span class="keyword">class </span><a class="code" href="classdai_1_1hash__map.html" title="hash_map is an alias for std::tr1::unordered_map.">hash_map</a> : <span class="keyword">public</span> std::tr1::unordered_map&lt;T,U&gt; {};
<a name="l00078"></a>00078 <span class="preprocessor">#endif</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 
<a name="l00082"></a>00082 <span class="keywordtype">double</span> <a class="code" href="namespacedai.html#b27c0799ddef29bb3833477e32c53862" title="Returns the time in seconds.">toc</a>();
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00086"></a>00086 <span class="keywordtype">void</span> <a class="code" href="namespacedai.html#e699eca7ca4d6e971b54c2b4a95942d4" title="Sets the random seed.">rnd_seed</a>( <span class="keywordtype">size_t</span> seed );
<a name="l00087"></a>00087 
<a name="l00089"></a>00089 <span class="keywordtype">double</span> <a class="code" href="namespacedai.html#409fb3c0ffc14bf9e03a45014a9b4093" title="Returns a real number, distributed uniformly on [0,1).">rnd_uniform</a>();
<a name="l00090"></a>00090 
<a name="l00092"></a>00092 <span class="keywordtype">double</span> <a class="code" href="namespacedai.html#4367d2d1c1518023dd91b645d641fce7" title="Returns a real number from a standard-normal distribution.">rnd_stdnormal</a>();
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 <span class="keywordtype">int</span> <a class="code" href="namespacedai.html#c02317b960b112637976333f90d1f937" title="Returns a random integer in interval [min, max].">rnd_int</a>( <span class="keywordtype">int</span> <a class="code" href="namespacedai.html#0957f2d605d64a2e13b8dc3eb9fc8800" title="Returns the pointwise minimum of two Factors.">min</a>, <span class="keywordtype">int</span> <a class="code" href="namespacedai.html#26014cccb4cc16b53e83d350e280a705" title="Returns the pointwise maximum of two Factors.">max</a> );
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00099"></a>00099 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; 
<a name="l00100"></a><a class="code" href="namespacedai.html#1a0b1c88c46fb8763c2c783cc3fe9a62">00100</a> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const std::vector&lt;T&gt; &amp; x) {
<a name="l00101"></a>00101     os &lt;&lt; <span class="stringliteral">"("</span>;
<a name="l00102"></a>00102     <span class="keywordflow">for</span>( <span class="keyword">typename</span> std::vector&lt;T&gt;::const_iterator it = x.begin(); it != x.end(); it++ )
<a name="l00103"></a>00103         os &lt;&lt; (it != x.begin() ? <span class="stringliteral">", "</span> : <span class="stringliteral">""</span>) &lt;&lt; *it;
<a name="l00104"></a>00104     os &lt;&lt; <span class="stringliteral">")"</span>;
<a name="l00105"></a>00105     <span class="keywordflow">return</span> os;
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00109"></a>00109 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; 
<a name="l00110"></a><a class="code" href="namespacedai.html#4f8ad5d0c47c7fdfe17e5d0f4c0a32d9">00110</a> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const std::set&lt;T&gt; &amp; x) {
<a name="l00111"></a>00111     os &lt;&lt; <span class="stringliteral">"{"</span>;
<a name="l00112"></a>00112    <span class="keywordflow">for</span>( <span class="keyword">typename</span> std::set&lt;T&gt;::const_iterator it = x.begin(); it != x.end(); it++ )
<a name="l00113"></a>00113         os &lt;&lt; (it != x.begin() ? <span class="stringliteral">", "</span> : <span class="stringliteral">""</span>) &lt;&lt; *it;
<a name="l00114"></a>00114     os &lt;&lt; <span class="stringliteral">"}"</span>;
<a name="l00115"></a>00115     <span class="keywordflow">return</span> os;
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00119"></a>00119 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;
<a name="l00120"></a><a class="code" href="namespacedai.html#5913957fb1c3c3d3fbd1f3102b8eb04c">00120</a> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const std::map&lt;T1,T2&gt; &amp; x) {
<a name="l00121"></a>00121     os &lt;&lt; <span class="stringliteral">"{"</span>;
<a name="l00122"></a>00122     <span class="keywordflow">for</span>( <span class="keyword">typename</span> std::map&lt;T1,T2&gt;::const_iterator it = x.begin(); it != x.end(); it++ )
<a name="l00123"></a>00123         os &lt;&lt; (it != x.begin() ? <span class="stringliteral">", "</span> : <span class="stringliteral">""</span>) &lt;&lt; it-&gt;first &lt;&lt; <span class="stringliteral">"-&gt;"</span> &lt;&lt; it-&gt;second;
<a name="l00124"></a>00124     os &lt;&lt; <span class="stringliteral">"}"</span>;
<a name="l00125"></a>00125     <span class="keywordflow">return</span> os;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00129"></a>00129 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;
<a name="l00130"></a><a class="code" href="namespacedai.html#575f6202aa88de6bf5146b85d8832eb5">00130</a> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const std::pair&lt;T1,T2&gt; &amp; x) {
<a name="l00131"></a>00131     os &lt;&lt; <span class="stringliteral">"("</span> &lt;&lt; x.first &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; x.second &lt;&lt; <span class="stringliteral">")"</span>;
<a name="l00132"></a>00132     <span class="keywordflow">return</span> os;
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00137"></a><a class="code" href="classdai_1_1Diffs.html">00137</a> <span class="keyword">class </span><a class="code" href="classdai_1_1Diffs.html" title="Used to keep track of the progress made by iterative algorithms.">Diffs</a> : <span class="keyword">public</span> std::vector&lt;double&gt; {
<a name="l00138"></a>00138     <span class="keyword">private</span>:
<a name="l00139"></a>00139         <span class="keywordtype">size_t</span> _maxsize;
<a name="l00140"></a>00140         <span class="keywordtype">double</span> _def;
<a name="l00141"></a>00141         std::vector&lt;double&gt;::iterator _pos;
<a name="l00142"></a>00142         std::vector&lt;double&gt;::iterator _maxpos;
<a name="l00143"></a>00143     <span class="keyword">public</span>:
<a name="l00145"></a><a class="code" href="classdai_1_1Diffs.html#4b57c2ecdc2b6d70c404824330876235">00145</a>         <a class="code" href="classdai_1_1Diffs.html#4b57c2ecdc2b6d70c404824330876235" title="Constructor.">Diffs</a>(<span class="keywordtype">long</span> maxsize, <span class="keywordtype">double</span> def) : std::vector&lt;double&gt;(), _maxsize(maxsize), _def(def) { 
<a name="l00146"></a>00146             this-&gt;reserve(_maxsize); 
<a name="l00147"></a>00147             _pos = begin(); 
<a name="l00148"></a>00148             _maxpos = begin(); 
<a name="l00149"></a>00149         }
<a name="l00151"></a><a class="code" href="classdai_1_1Diffs.html#b6d18664bd4f72da5b7105a0791c21fe">00151</a>         <span class="keywordtype">double</span> <a class="code" href="classdai_1_1Diffs.html#b6d18664bd4f72da5b7105a0791c21fe" title="Returns maximum difference encountered.">maxDiff</a>() { 
<a name="l00152"></a>00152             <span class="keywordflow">if</span>( size() &lt; _maxsize )
<a name="l00153"></a>00153                 <span class="keywordflow">return</span> _def;
<a name="l00154"></a>00154             <span class="keywordflow">else</span>
<a name="l00155"></a>00155                 <span class="keywordflow">return</span>( *_maxpos ); 
<a name="l00156"></a>00156         }
<a name="l00158"></a><a class="code" href="classdai_1_1Diffs.html#badc1817a2021474a11c5296c4d6cf7c">00158</a>         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1Diffs.html#badc1817a2021474a11c5296c4d6cf7c" title="Register new difference x.">push</a>(<span class="keywordtype">double</span> x) {
<a name="l00159"></a>00159             <span class="keywordflow">if</span>( size() &lt; _maxsize ) {
<a name="l00160"></a>00160                 push_back(x);
<a name="l00161"></a>00161                 _pos = end();
<a name="l00162"></a>00162                 <span class="keywordflow">if</span>( size() &gt; 1 ) {
<a name="l00163"></a>00163                     <span class="keywordflow">if</span>( *_maxpos &lt; back() ) {
<a name="l00164"></a>00164                         _maxpos = end();
<a name="l00165"></a>00165                         _maxpos--;
<a name="l00166"></a>00166                     }
<a name="l00167"></a>00167                 } <span class="keywordflow">else</span> {
<a name="l00168"></a>00168                     _maxpos = begin();
<a name="l00169"></a>00169                 }
<a name="l00170"></a>00170             }
<a name="l00171"></a>00171             <span class="keywordflow">else</span> {
<a name="l00172"></a>00172                 <span class="keywordflow">if</span>( _pos == end() )
<a name="l00173"></a>00173                     _pos = begin();
<a name="l00174"></a>00174                 <span class="keywordflow">if</span>( _maxpos == _pos ) {
<a name="l00175"></a>00175                     *_pos++ = x; 
<a name="l00176"></a>00176                     _maxpos = max_element(begin(),end());
<a name="l00177"></a>00177                 } <span class="keywordflow">else</span> {
<a name="l00178"></a>00178                     <span class="keywordflow">if</span>( x &gt; *_maxpos )
<a name="l00179"></a>00179                         _maxpos = _pos;
<a name="l00180"></a>00180                     *_pos++ = x;
<a name="l00181"></a>00181                 }
<a name="l00182"></a>00182             }
<a name="l00183"></a>00183         }
<a name="l00185"></a><a class="code" href="classdai_1_1Diffs.html#2833e1db5b0b3661ad7d4bdbfb00f9c6">00185</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1Diffs.html#2833e1db5b0b3661ad7d4bdbfb00f9c6" title="Return maximum number of differences stored.">maxSize</a>() { <span class="keywordflow">return</span> _maxsize; }
<a name="l00186"></a>00186 };
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 } <span class="comment">// end of namespace dai</span>
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

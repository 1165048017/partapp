<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/index.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>index.h</h1><a href="index_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    Copyright (C) 2002  Martijn Leisink  [martijn@mbfys.kun.nl]</span>
<a name="l00006"></a>00006 <span class="comment">    Radboud University Nijmegen, The Netherlands</span>
<a name="l00007"></a>00007 <span class="comment"></span>
<a name="l00008"></a>00008 <span class="comment">    This file is part of libDAI.</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00013"></a>00013 <span class="comment">    (at your option) any later version.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00021"></a>00021 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00022"></a>00022 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef __defined_libdai_index_h</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_index_h</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;cassert&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="varset_8h.html" title="Defines VarSet class.">dai/varset.h</a>&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">namespace </span>dai {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00045"></a>00045 
<a name="l00060"></a><a class="code" href="classdai_1_1IndexFor.html">00060</a> <span class="keyword">class </span><a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a> {
<a name="l00061"></a>00061     <span class="keyword">private</span>:
<a name="l00063"></a>00063         <span class="keywordtype">long</span>                _index;
<a name="l00064"></a>00064 
<a name="l00066"></a>00066         std::vector&lt;long&gt;   _sum;
<a name="l00067"></a>00067 
<a name="l00069"></a>00069         std::vector&lt;size_t&gt; _count;
<a name="l00070"></a>00070         
<a name="l00072"></a>00072         std::vector&lt;size_t&gt; _dims;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="keyword">public</span>:
<a name="l00076"></a><a class="code" href="classdai_1_1IndexFor.html#7ce4ecff14943ca0e4303d309e1e79d3">00076</a>         <a class="code" href="classdai_1_1IndexFor.html#7ce4ecff14943ca0e4303d309e1e79d3" title="Default constructor.">IndexFor</a>() { 
<a name="l00077"></a>00077             _index = -1; 
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079 
<a name="l00081"></a><a class="code" href="classdai_1_1IndexFor.html#3780be9d74b4c1b0ed1713d7cab8211c">00081</a>         <a class="code" href="classdai_1_1IndexFor.html#7ce4ecff14943ca0e4303d309e1e79d3" title="Default constructor.">IndexFor</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; indexVars, <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; forVars ) : _count( forVars.size(), 0 ) {
<a name="l00082"></a>00082             <span class="keywordtype">long</span> sum = 1;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084             _dims.reserve( forVars.<a class="code" href="classdai_1_1smallSet.html#39b00df453666d22331e932d3b7a2f16" title="Returns number of elements.">size</a>() );
<a name="l00085"></a>00085             _sum.reserve( forVars.<a class="code" href="classdai_1_1smallSet.html#39b00df453666d22331e932d3b7a2f16" title="Returns number of elements.">size</a>() );
<a name="l00086"></a>00086 
<a name="l00087"></a>00087             <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> j = forVars.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>();
<a name="l00088"></a>00088             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> i = indexVars.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); i != indexVars.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); ++i ) {
<a name="l00089"></a>00089                 <span class="keywordflow">for</span>( ; j != forVars.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>() &amp;&amp; *j &lt;= *i; ++j ) {
<a name="l00090"></a>00090                     _dims.push_back( j-&gt;states() );
<a name="l00091"></a>00091                     _sum.push_back( (*i == *j) ? sum : 0 );
<a name="l00092"></a>00092                 }
<a name="l00093"></a>00093                 sum *= i-&gt;states();
<a name="l00094"></a>00094             }
<a name="l00095"></a>00095             <span class="keywordflow">for</span>( ; j != forVars.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); ++j ) {
<a name="l00096"></a>00096                 _dims.push_back( j-&gt;states() );
<a name="l00097"></a>00097                 _sum.push_back( 0 );
<a name="l00098"></a>00098             }
<a name="l00099"></a>00099             _index = 0;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classdai_1_1IndexFor.html#bff0c6df34e8419eb1efc3c3678493fa">00103</a>         <a class="code" href="classdai_1_1IndexFor.html#7ce4ecff14943ca0e4303d309e1e79d3" title="Default constructor.">IndexFor</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a> &amp; ind ) : _index(ind._index), _sum(ind._sum), _count(ind._count), _dims(ind._dims) {}
<a name="l00104"></a>00104 
<a name="l00106"></a><a class="code" href="classdai_1_1IndexFor.html#b73fb61544f054c63e87342d494c8a38">00106</a>         <a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a>&amp; <a class="code" href="classdai_1_1IndexFor.html#b73fb61544f054c63e87342d494c8a38" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a> &amp;ind ) {
<a name="l00107"></a>00107             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;ind ) {
<a name="l00108"></a>00108                 _index = ind.<a class="code" href="classdai_1_1IndexFor.html#9a91c3bea3e87c351549e9f97a8b8144" title="The current linear index corresponding to the state of indexVars.">_index</a>;
<a name="l00109"></a>00109                 _sum = ind.<a class="code" href="classdai_1_1IndexFor.html#4fa95be43b9ad28eff1ec7cc7aa86fe1" title="For each variable in forVars, the amount of change in _index.">_sum</a>;
<a name="l00110"></a>00110                 _count = ind.<a class="code" href="classdai_1_1IndexFor.html#063388562842f9dc57658e37d742d9d7" title="For each variable in forVars, the current state.">_count</a>;
<a name="l00111"></a>00111                 _dims = ind.<a class="code" href="classdai_1_1IndexFor.html#8096b36798c1da8a0b5c55e26a9e0b5f" title="For each variable in forVars, its number of possible values.">_dims</a>;
<a name="l00112"></a>00112             }
<a name="l00113"></a>00113             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115 
<a name="l00117"></a><a class="code" href="classdai_1_1IndexFor.html#4975cacce4ab1a7c0d2d873315016a40">00117</a>         <a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a>&amp; <a class="code" href="classdai_1_1IndexFor.html#4975cacce4ab1a7c0d2d873315016a40" title="Sets the index back to zero.">clear</a>() {
<a name="l00118"></a>00118             fill( _count.begin(), _count.end(), 0 );
<a name="l00119"></a>00119             _index = 0;
<a name="l00120"></a>00120             <span class="keywordflow">return</span>( *<span class="keyword">this</span> );
<a name="l00121"></a>00121         }
<a name="l00122"></a>00122 
<a name="l00124"></a><a class="code" href="classdai_1_1IndexFor.html#35fc3f06a034c2c80e0204e9516213ec">00124</a>         <a class="code" href="classdai_1_1IndexFor.html#35fc3f06a034c2c80e0204e9516213ec" title="Conversion to long.">operator long </a>()<span class="keyword"> const </span>{ 
<a name="l00125"></a>00125             <span class="keywordflow">return</span>( _index ); 
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127 
<a name="l00129"></a><a class="code" href="classdai_1_1IndexFor.html#53798a077432c0653ed3fa8fc0340062">00129</a>         <a class="code" href="classdai_1_1IndexFor.html" title="Tool for looping over the states of several variables.">IndexFor</a>&amp; <a class="code" href="classdai_1_1IndexFor.html#53798a077432c0653ed3fa8fc0340062" title="Pre-increment operator.">operator++ </a>() {
<a name="l00130"></a>00130             <span class="keywordflow">if</span>( _index &gt;= 0 ) {
<a name="l00131"></a>00131                 <span class="keywordtype">size_t</span> i = 0;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133                 <span class="keywordflow">while</span>( i &lt; _count.size() ) {
<a name="l00134"></a>00134                     _index += _sum[i];
<a name="l00135"></a>00135                     <span class="keywordflow">if</span>( ++_count[i] &lt; _dims[i] )
<a name="l00136"></a>00136                         <span class="keywordflow">break</span>;
<a name="l00137"></a>00137                     _index -= _sum[i] * _dims[i];
<a name="l00138"></a>00138                     _count[i] = 0;
<a name="l00139"></a>00139                     i++;
<a name="l00140"></a>00140                 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142                 <span class="keywordflow">if</span>( i == _count.size() ) 
<a name="l00143"></a>00143                     _index = -1;
<a name="l00144"></a>00144             }
<a name="l00145"></a>00145             <span class="keywordflow">return</span>( *<span class="keyword">this</span> );
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147 };
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00151"></a>00151 
<a name="l00169"></a><a class="code" href="classdai_1_1MultiFor.html">00169</a> <span class="keyword">class </span><a class="code" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a> {
<a name="l00170"></a>00170     <span class="keyword">private</span>:
<a name="l00171"></a>00171         std::vector&lt;size_t&gt;  _dims;
<a name="l00172"></a>00172         std::vector&lt;size_t&gt;  _states;
<a name="l00173"></a>00173         <span class="keywordtype">long</span>                 _state;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     <span class="keyword">public</span>:
<a name="l00177"></a><a class="code" href="classdai_1_1MultiFor.html#9ad4786f54d6cebf5bc6111058415c79">00177</a>         <a class="code" href="classdai_1_1MultiFor.html#9ad4786f54d6cebf5bc6111058415c79" title="Default constructor.">MultiFor</a>() : _dims(), _states(), _state(0) {}
<a name="l00178"></a>00178 
<a name="l00180"></a><a class="code" href="classdai_1_1MultiFor.html#6f3ee9f121903fa4fddf56416151e3c0">00180</a>         <a class="code" href="classdai_1_1MultiFor.html#9ad4786f54d6cebf5bc6111058415c79" title="Default constructor.">MultiFor</a>( <span class="keyword">const</span> std::vector&lt;size_t&gt; &amp;d ) : _dims(d), _states(d.size(),0), _state(0) {}
<a name="l00181"></a>00181 
<a name="l00183"></a><a class="code" href="classdai_1_1MultiFor.html#f29ba6cf5f64475130f5c48fd4b52e53">00183</a>         <a class="code" href="classdai_1_1MultiFor.html#9ad4786f54d6cebf5bc6111058415c79" title="Default constructor.">MultiFor</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a> &amp;x ) : _dims(x._dims), _states(x._states), _state(x._state) {}
<a name="l00184"></a>00184 
<a name="l00186"></a><a class="code" href="classdai_1_1MultiFor.html#0f5bb0cd496a84c7705a95cd52b80096">00186</a>         <a class="code" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a>&amp; <a class="code" href="classdai_1_1MultiFor.html#0f5bb0cd496a84c7705a95cd52b80096" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a> &amp; x ) {
<a name="l00187"></a>00187             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00188"></a>00188                 _dims   = x.<a class="code" href="classdai_1_1MultiFor.html#7c78c24a74d9082d13d2f69f50c36b3c">_dims</a>;
<a name="l00189"></a>00189                 _states = x.<a class="code" href="classdai_1_1MultiFor.html#5d81a0588794df782cc817251a50be40">_states</a>;
<a name="l00190"></a>00190                 _state  = x.<a class="code" href="classdai_1_1MultiFor.html#0da3f378f14fb1184aa4c84c8a932c57">_state</a>;
<a name="l00191"></a>00191             }
<a name="l00192"></a>00192             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00193"></a>00193         }
<a name="l00194"></a>00194 
<a name="l00196"></a><a class="code" href="classdai_1_1MultiFor.html#3127a6180e9d1ade8e4e0a310d46c964">00196</a>         <a class="code" href="classdai_1_1MultiFor.html#3127a6180e9d1ade8e4e0a310d46c964" title="Return linear state.">operator size_t</a>()<span class="keyword"> const </span>{ 
<a name="l00197"></a>00197             assert( <a class="code" href="classdai_1_1MultiFor.html#298bca4ac1b10613d2d2b7edd641c0a9" title="Returns true if the current state is valid.">valid</a>() );
<a name="l00198"></a>00198             <span class="keywordflow">return</span>( _state );
<a name="l00199"></a>00199         }
<a name="l00200"></a>00200 
<a name="l00202"></a><a class="code" href="classdai_1_1MultiFor.html#dcf44dd24e2be73381cf3b5cdbe470a1">00202</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1MultiFor.html#dcf44dd24e2be73381cf3b5cdbe470a1" title="Return k&amp;#39;th index.">operator[]</a>( <span class="keywordtype">size_t</span> k )<span class="keyword"> const </span>{
<a name="l00203"></a>00203             assert( <a class="code" href="classdai_1_1MultiFor.html#298bca4ac1b10613d2d2b7edd641c0a9" title="Returns true if the current state is valid.">valid</a>() );
<a name="l00204"></a>00204             assert( k &lt; _states.size() );
<a name="l00205"></a>00205             <span class="keywordflow">return</span> _states[k];
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classdai_1_1MultiFor.html#ca071de84757bdc9b45982e9826a1fdb">00209</a>         <a class="code" href="classdai_1_1MultiFor.html" title="MultiFor makes it easy to perform a dynamic number of nested for loops.">MultiFor</a> &amp; <a class="code" href="classdai_1_1MultiFor.html#ca071de84757bdc9b45982e9826a1fdb" title="Prefix increment operator.">operator++</a>() {
<a name="l00210"></a>00210             <span class="keywordflow">if</span>( <a class="code" href="classdai_1_1MultiFor.html#298bca4ac1b10613d2d2b7edd641c0a9" title="Returns true if the current state is valid.">valid</a>() ) {
<a name="l00211"></a>00211                 _state++;
<a name="l00212"></a>00212                 <span class="keywordtype">size_t</span> i;
<a name="l00213"></a>00213                 <span class="keywordflow">for</span>( i = 0; i != _states.size(); i++ ) {
<a name="l00214"></a>00214                     <span class="keywordflow">if</span>( ++(_states[i]) &lt; _dims[i] )
<a name="l00215"></a>00215                         <span class="keywordflow">break</span>;
<a name="l00216"></a>00216                     _states[i] = 0;
<a name="l00217"></a>00217                 }
<a name="l00218"></a>00218                 <span class="keywordflow">if</span>( i == _states.size() )
<a name="l00219"></a>00219                     _state = -1;
<a name="l00220"></a>00220             }
<a name="l00221"></a>00221             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00222"></a>00222         }
<a name="l00223"></a>00223 
<a name="l00225"></a><a class="code" href="classdai_1_1MultiFor.html#06238b80d9f59dd6e56b516db39bdace">00225</a>         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1MultiFor.html#ca071de84757bdc9b45982e9826a1fdb" title="Prefix increment operator.">operator++</a>( <span class="keywordtype">int</span> ) {
<a name="l00226"></a>00226             <a class="code" href="classdai_1_1MultiFor.html#ca071de84757bdc9b45982e9826a1fdb" title="Prefix increment operator.">operator++</a>();
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228 
<a name="l00230"></a><a class="code" href="classdai_1_1MultiFor.html#298bca4ac1b10613d2d2b7edd641c0a9">00230</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1MultiFor.html#298bca4ac1b10613d2d2b7edd641c0a9" title="Returns true if the current state is valid.">valid</a>()<span class="keyword"> const </span>{
<a name="l00231"></a>00231             <span class="keywordflow">return</span>( _state &gt;= 0 );
<a name="l00232"></a>00232         }
<a name="l00233"></a>00233 };
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 
<a name="l00237"></a><a class="code" href="classdai_1_1Permute.html">00237</a> <span class="keyword">class </span><a class="code" href="classdai_1_1Permute.html" title="Tool for calculating permutations of multiple indices.">Permute</a> {
<a name="l00238"></a>00238     <span class="keyword">private</span>:
<a name="l00239"></a>00239         std::vector&lt;size_t&gt;  _dims;
<a name="l00240"></a>00240         std::vector&lt;size_t&gt;  _sigma;
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     <span class="keyword">public</span>:
<a name="l00244"></a><a class="code" href="classdai_1_1Permute.html#138f021554272c9601e4cf6a25e6f62b">00244</a>         <a class="code" href="classdai_1_1Permute.html#138f021554272c9601e4cf6a25e6f62b" title="Default constructor.">Permute</a>() : _dims(), _sigma() {}
<a name="l00245"></a>00245 
<a name="l00247"></a><a class="code" href="classdai_1_1Permute.html#d1af25b04480a33721e2f56e88cb0e25">00247</a>         <a class="code" href="classdai_1_1Permute.html#138f021554272c9601e4cf6a25e6f62b" title="Default constructor.">Permute</a>( <span class="keyword">const</span> std::vector&lt;size_t&gt; &amp;d, <span class="keyword">const</span> std::vector&lt;size_t&gt; &amp;sigma ) : _dims(d), _sigma(sigma) {
<a name="l00248"></a>00248             assert( _dims.size() == _sigma.size() );
<a name="l00249"></a>00249         }
<a name="l00250"></a>00250 
<a name="l00252"></a><a class="code" href="classdai_1_1Permute.html#39b079d34fee292434e15faf136fd506">00252</a>         <a class="code" href="classdai_1_1Permute.html#138f021554272c9601e4cf6a25e6f62b" title="Default constructor.">Permute</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Permute.html" title="Tool for calculating permutations of multiple indices.">Permute</a> &amp;x ) : _dims(x._dims), _sigma(x._sigma) {}
<a name="l00253"></a>00253 
<a name="l00255"></a><a class="code" href="classdai_1_1Permute.html#99e896b039f3b9f6b737ccecba7dfdb5">00255</a>         <a class="code" href="classdai_1_1Permute.html" title="Tool for calculating permutations of multiple indices.">Permute</a>&amp; <a class="code" href="classdai_1_1Permute.html#99e896b039f3b9f6b737ccecba7dfdb5" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Permute.html" title="Tool for calculating permutations of multiple indices.">Permute</a> &amp;x ) {
<a name="l00256"></a>00256             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00257"></a>00257                 _dims  = x.<a class="code" href="classdai_1_1Permute.html#e637e557faf2417468318cada81dc1ca">_dims</a>;
<a name="l00258"></a>00258                 _sigma = x.<a class="code" href="classdai_1_1Permute.html#8d573363889460dca3607b59867d46a5">_sigma</a>;
<a name="l00259"></a>00259             }
<a name="l00260"></a>00260             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00261"></a>00261         }
<a name="l00262"></a>00262 
<a name="l00268"></a><a class="code" href="classdai_1_1Permute.html#19b7ca5bdbac54ba1a812ab52e6f11aa">00268</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1Permute.html#19b7ca5bdbac54ba1a812ab52e6f11aa">convert_linear_index</a>( <span class="keywordtype">size_t</span> li ) {
<a name="l00269"></a>00269             <span class="keywordtype">size_t</span> N = _dims.size();
<a name="l00270"></a>00270 
<a name="l00271"></a>00271             <span class="comment">// calculate vector index corresponding to linear index</span>
<a name="l00272"></a>00272             std::vector&lt;size_t&gt; vi;
<a name="l00273"></a>00273             vi.reserve( N );
<a name="l00274"></a>00274             <span class="keywordtype">size_t</span> prod = 1;
<a name="l00275"></a>00275             <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> k = 0; k &lt; N; k++ ) {
<a name="l00276"></a>00276                 vi.push_back( li % _dims[k] );
<a name="l00277"></a>00277                 li /= _dims[k];
<a name="l00278"></a>00278                 prod *= _dims[k];
<a name="l00279"></a>00279             }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281             <span class="comment">// convert permuted vector index to corresponding linear index</span>
<a name="l00282"></a>00282             prod = 1;
<a name="l00283"></a>00283             <span class="keywordtype">size_t</span> sigma_li = 0;
<a name="l00284"></a>00284             <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> k = 0; k &lt; N; k++ ) {
<a name="l00285"></a>00285                 sigma_li += vi[_sigma[k]] * prod;
<a name="l00286"></a>00286                 prod *= _dims[_sigma[k]];
<a name="l00287"></a>00287             }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289             <span class="keywordflow">return</span> sigma_li;
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 };
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 
<a name="l00295"></a>00295 
<a name="l00297"></a><a class="code" href="classdai_1_1State.html">00297</a> <span class="keyword">class </span><a class="code" href="classdai_1_1State.html" title="Contains the joint state of variables within a VarSet and useful things to do with...">State</a> {
<a name="l00298"></a>00298     <span class="keyword">private</span>:
<a name="l00299"></a>00299         <span class="keyword">typedef</span> std::map&lt;Var, size_t&gt; states_type;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301         <span class="keywordtype">long</span>                          state;
<a name="l00302"></a>00302         states_type                   states;
<a name="l00303"></a>00303         
<a name="l00304"></a>00304     <span class="keyword">public</span>:
<a name="l00306"></a><a class="code" href="classdai_1_1State.html#ab03f6a5dc8d23f79e0966698f783178">00306</a>         <a class="code" href="classdai_1_1State.html#ab03f6a5dc8d23f79e0966698f783178" title="Default constructor.">State</a>() : state(0), states() {}
<a name="l00307"></a>00307 
<a name="l00309"></a><a class="code" href="classdai_1_1State.html#7c0fe7267ffd7c530283f2444112a162">00309</a>         <a class="code" href="classdai_1_1State.html#ab03f6a5dc8d23f79e0966698f783178" title="Default constructor.">State</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;vs ) : state(0) {
<a name="l00310"></a>00310             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> v = vs.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); v != vs.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); v++ )
<a name="l00311"></a>00311                 states[*v] = 0;
<a name="l00312"></a>00312         }
<a name="l00313"></a>00313 
<a name="l00315"></a><a class="code" href="classdai_1_1State.html#4ab3583f63942a65c969f4195b508b5b">00315</a>         <a class="code" href="classdai_1_1State.html#ab03f6a5dc8d23f79e0966698f783178" title="Default constructor.">State</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1State.html" title="Contains the joint state of variables within a VarSet and useful things to do with...">State</a> &amp; x ) : state(x.state), states(x.states) {}
<a name="l00316"></a>00316 
<a name="l00318"></a><a class="code" href="classdai_1_1State.html#433ced7a70001f4905404c31f09ca9da">00318</a>         <a class="code" href="classdai_1_1State.html" title="Contains the joint state of variables within a VarSet and useful things to do with...">State</a>&amp; <a class="code" href="classdai_1_1State.html#433ced7a70001f4905404c31f09ca9da" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1State.html" title="Contains the joint state of variables within a VarSet and useful things to do with...">State</a> &amp;x ) {
<a name="l00319"></a>00319             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00320"></a>00320                 state  = x.<a class="code" href="classdai_1_1State.html#a910b6fffcacb11caab17e1027954368">state</a>;
<a name="l00321"></a>00321                 states = x.<a class="code" href="classdai_1_1State.html#e5abc3fb725632cb73c43d4d9938f65c">states</a>;
<a name="l00322"></a>00322             }
<a name="l00323"></a>00323             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325 
<a name="l00327"></a><a class="code" href="classdai_1_1State.html#24d846f8b341073a44191e71b14df219">00327</a>         <a class="code" href="classdai_1_1State.html#24d846f8b341073a44191e71b14df219" title="Return linear state.">operator size_t</a>()<span class="keyword"> const </span>{ 
<a name="l00328"></a>00328             assert( <a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2" title="Returns true if the current state is valid.">valid</a>() );
<a name="l00329"></a>00329             <span class="keywordflow">return</span>( state );
<a name="l00330"></a>00330         }
<a name="l00331"></a>00331 
<a name="l00334"></a><a class="code" href="classdai_1_1State.html#9d4d70438065731f337963da7bff7e61">00334</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1State.html#9d4d70438065731f337963da7bff7e61">operator() </a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n )<span class="keyword"> const </span>{
<a name="l00335"></a>00335             assert( <a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2" title="Returns true if the current state is valid.">valid</a>() );
<a name="l00336"></a>00336             states_type::const_iterator entry = states.find( n );
<a name="l00337"></a>00337             <span class="keywordflow">if</span>( entry == states.end() )
<a name="l00338"></a>00338                 <span class="keywordflow">return</span> 0;
<a name="l00339"></a>00339             <span class="keywordflow">else</span>
<a name="l00340"></a>00340                 <span class="keywordflow">return</span> entry-&gt;second;
<a name="l00341"></a>00341         }
<a name="l00342"></a>00342 
<a name="l00345"></a><a class="code" href="classdai_1_1State.html#475a14df77520317788c13a3386c3e16">00345</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1State.html#9d4d70438065731f337963da7bff7e61">operator() </a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;vs )<span class="keyword"> const </span>{
<a name="l00346"></a>00346             assert( <a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2" title="Returns true if the current state is valid.">valid</a>() );
<a name="l00347"></a>00347             <span class="keywordtype">size_t</span> vs_state = 0;
<a name="l00348"></a>00348             <span class="keywordtype">size_t</span> prod = 1;
<a name="l00349"></a>00349             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> v = vs.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); v != vs.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); v++ ) {
<a name="l00350"></a>00350                 states_type::const_iterator entry = states.find( *v );
<a name="l00351"></a>00351                 <span class="keywordflow">if</span>( entry != states.end() )
<a name="l00352"></a>00352                     vs_state += entry-&gt;second * prod; 
<a name="l00353"></a>00353                 prod *= v-&gt;states();
<a name="l00354"></a>00354             }
<a name="l00355"></a>00355             <span class="keywordflow">return</span> vs_state;
<a name="l00356"></a>00356         }
<a name="l00357"></a>00357 
<a name="l00359"></a><a class="code" href="classdai_1_1State.html#e85f3b76bd05070b75b49fd020f4bff6">00359</a>         <span class="keywordtype">void</span> <a class="code" href="classdai_1_1State.html#e85f3b76bd05070b75b49fd020f4bff6" title="Postfix increment operator.">operator++</a>( <span class="keywordtype">int</span> ) {
<a name="l00360"></a>00360             <span class="keywordflow">if</span>( <a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2" title="Returns true if the current state is valid.">valid</a>() ) {
<a name="l00361"></a>00361                 state++;
<a name="l00362"></a>00362                 states_type::iterator entry = states.begin();
<a name="l00363"></a>00363                 <span class="keywordflow">while</span>( entry != states.end() ) {
<a name="l00364"></a>00364                     <span class="keywordflow">if</span>( ++(entry-&gt;second) &lt; entry-&gt;first.states() )
<a name="l00365"></a>00365                         <span class="keywordflow">break</span>;
<a name="l00366"></a>00366                     entry-&gt;second = 0;
<a name="l00367"></a>00367                     entry++;
<a name="l00368"></a>00368                 }
<a name="l00369"></a>00369                 <span class="keywordflow">if</span>( entry == states.end() )
<a name="l00370"></a>00370                     state = -1;
<a name="l00371"></a>00371             }
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373 
<a name="l00375"></a><a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2">00375</a>         <span class="keywordtype">bool</span> <a class="code" href="classdai_1_1State.html#08f7e2c1906e32e95dbad09ad26369d2" title="Returns true if the current state is valid.">valid</a>()<span class="keyword"> const </span>{
<a name="l00376"></a>00376             <span class="keywordflow">return</span>( state &gt;= 0 );
<a name="l00377"></a>00377         }
<a name="l00378"></a>00378 };
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 } <span class="comment">// end of namespace dai</span>
<a name="l00382"></a>00382 
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

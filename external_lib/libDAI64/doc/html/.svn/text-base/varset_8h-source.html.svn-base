<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libDAI: include/dai/varset.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="dir_788dec3f6cf4a9394427425a1f1fc617.html">include</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_240a4880a980807f35cfca6c0dacf24f.html">dai</a>
  </div>
</div>
<div class="contents">
<h1>varset.h</h1><a href="varset_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  Copyright (C) 2006-2008  Joris Mooij  [joris dot mooij at tuebingen dot mpg dot de]</span>
<a name="l00002"></a>00002 <span class="comment">    Radboud University Nijmegen, The Netherlands /</span>
<a name="l00003"></a>00003 <span class="comment">    Max Planck Institute for Biological Cybernetics, Germany</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">    Copyright (C) 2002  Martijn Leisink  [martijn@mbfys.kun.nl]</span>
<a name="l00006"></a>00006 <span class="comment">    Radboud University Nijmegen, The Netherlands</span>
<a name="l00007"></a>00007 <span class="comment"></span>
<a name="l00008"></a>00008 <span class="comment">    This file is part of libDAI.</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">    libDAI is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">    it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">    the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00013"></a>00013 <span class="comment">    (at your option) any later version.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">    libDAI is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">    GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">    You should have received a copy of the GNU General Public License</span>
<a name="l00021"></a>00021 <span class="comment">    along with libDAI; if not, write to the Free Software</span>
<a name="l00022"></a>00022 <span class="comment">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef __defined_libdai_varset_h</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define __defined_libdai_varset_h</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;ostream&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="var_8h.html" title="Defines class Var.">dai/var.h</a>&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="util_8h.html" title="Defines general utility functions and adds an abstraction layer for platform-dependent...">dai/util.h</a>&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;<a class="code" href="smallset_8h.html" title="Defines smallSet&amp;lt;T&amp;gt; class.">dai/smallset.h</a>&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">namespace </span>dai {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00046"></a>00046 
<a name="l00049"></a><a class="code" href="classdai_1_1VarSet.html">00049</a> <span class="keyword">class </span><a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> : <span class="keyword">public</span> <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;Var&gt; {
<a name="l00050"></a>00050     <span class="keyword">public</span>:
<a name="l00052"></a><a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b">00052</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>() : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;() {}
<a name="l00053"></a>00053 
<a name="l00055"></a><a class="code" href="classdai_1_1VarSet.html#547ebf0ada78ea9baa2ad3f0c6225206">00055</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;x ) : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;(x) {}
<a name="l00056"></a>00056 
<a name="l00058"></a><a class="code" href="classdai_1_1VarSet.html#3a551f98ea573b932042d393e5414c15">00058</a>         <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; <a class="code" href="classdai_1_1VarSet.html#3a551f98ea573b932042d393e5414c15" title="Assignment operator.">operator=</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a> &amp;x ) {
<a name="l00059"></a>00059             <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;x ) {
<a name="l00060"></a>00060                 <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet&lt;Var&gt;::operator=</a>( x );
<a name="l00061"></a>00061             }
<a name="l00062"></a>00062             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064         
<a name="l00066"></a><a class="code" href="classdai_1_1VarSet.html#c15195c92c88c8f9f477dafab47937af">00066</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet&lt;Var&gt;</a> &amp;x ) : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;(x) {}
<a name="l00067"></a>00067 
<a name="l00069"></a><a class="code" href="classdai_1_1VarSet.html#adfd4d43a9a521f8738e9507682440d3">00069</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1VarSet.html#adfd4d43a9a521f8738e9507682440d3" title="Calculates the product of the number of states of all variables in this VarSet.">nrStates</a>() {
<a name="l00070"></a>00070             <span class="keywordtype">size_t</span> states = 1;
<a name="l00071"></a>00071             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> n = <a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); n != <a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); n++ )
<a name="l00072"></a>00072                 states *= n-&gt;states();
<a name="l00073"></a>00073             <span class="keywordflow">return</span> states;
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 
<a name="l00077"></a><a class="code" href="classdai_1_1VarSet.html#aeecbc24db4c8fcc11ff714add9fe0b6">00077</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n ) : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;(n) {}
<a name="l00078"></a>00078 
<a name="l00080"></a><a class="code" href="classdai_1_1VarSet.html#e666bad38239e0ca2f43d4a7647fc29e">00080</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>( <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n1, <span class="keyword">const</span> <a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a> &amp;n2 ) : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;(n1,n2) {} 
<a name="l00081"></a>00081 
<a name="l00083"></a>00083 
<a name="l00088"></a>00088         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> VarIterator&gt;
<a name="l00089"></a><a class="code" href="classdai_1_1VarSet.html#85468ed9f66a25fbbd65ae44ccd49473">00089</a>         <a class="code" href="classdai_1_1VarSet.html#933a982d2d7f8c2f796610ab351d728b" title="Default constructor.">VarSet</a>( VarIterator <a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>, VarIterator <a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>, <span class="keywordtype">size_t</span> sizeHint=0 ) : <a class="code" href="classdai_1_1smallSet.html" title="Represents a set (optimized for a small number of elements).">smallSet</a>&lt;<a class="code" href="classdai_1_1Var.html" title="Represents a discrete random variable.">Var</a>&gt;(begin,end,sizeHint) {}
<a name="l00090"></a>00090 
<a name="l00092"></a>00092 
<a name="l00097"></a><a class="code" href="classdai_1_1VarSet.html#a6fd950faa6961c9786e96b04ee2dee1">00097</a>         <span class="keywordtype">size_t</span> <a class="code" href="classdai_1_1VarSet.html#a6fd950faa6961c9786e96b04ee2dee1" title="Calculates the linear index in the cartesian product of the variables in *this, which...">calcState</a>( <span class="keyword">const</span> std::map&lt;Var, size_t&gt; &amp;states ) {
<a name="l00098"></a>00098             <span class="keywordtype">size_t</span> prod = 1;
<a name="l00099"></a>00099             <span class="keywordtype">size_t</span> state = 0;
<a name="l00100"></a>00100             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> n = <a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); n != <a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); n++ ) {
<a name="l00101"></a>00101                 std::map&lt;Var, size_t&gt;::const_iterator m = states.find( *n );
<a name="l00102"></a>00102                 <span class="keywordflow">if</span>( m != states.end() )
<a name="l00103"></a>00103                     state += prod * m-&gt;second;
<a name="l00104"></a>00104                 prod *= n-&gt;states();
<a name="l00105"></a>00105             }
<a name="l00106"></a>00106             <span class="keywordflow">return</span> state;
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108 
<a name="l00110"></a><a class="code" href="classdai_1_1VarSet.html#60119e272c8abb87508fb8dd5fad06d6">00110</a>         <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="classdai_1_1VarSet.html#60119e272c8abb87508fb8dd5fad06d6" title="Writes a VarSet to an output stream.">operator&lt;&lt; </a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classdai_1_1VarSet.html" title="Represents a set of variables.">VarSet</a>&amp; ns)  {
<a name="l00111"></a>00111             <span class="keywordflow">for</span>( <a class="code" href="classdai_1_1smallSet.html#103c819872818d14a7234a1f618a815c" title="Constant iterator over the elements.">VarSet::const_iterator</a> n = ns.<a class="code" href="classdai_1_1smallSet.html#6a14836b896a8bb1901ea79fd45394d0" title="Returns iterator that points to the first element.">begin</a>(); n != ns.<a class="code" href="classdai_1_1smallSet.html#9927551b475689ed06d0380f26df8eea" title="Returns iterator that points beyond the last element.">end</a>(); n++ )
<a name="l00112"></a>00112                 os &lt;&lt; *n;
<a name="l00113"></a>00113             <span class="keywordflow">return</span>( os );
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115 };
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 } <span class="comment">// end of namespace dai</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Jun 8 10:17:04 2011 for libDAI by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>

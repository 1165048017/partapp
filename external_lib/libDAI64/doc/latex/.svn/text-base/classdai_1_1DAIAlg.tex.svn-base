\hypertarget{classdai_1_1DAIAlg}{
\section{dai::DAIAlg$<$ GRM $>$ Class Template Reference}
\label{classdai_1_1DAIAlg}\index{dai::DAIAlg@{dai::DAIAlg}}
}
{\tt \#include $<$dai/daialg.h$>$}

Inheritance diagram for dai::DAIAlg$<$ GRM $>$::\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[height=2.37037cm]{classdai_1_1DAIAlg}
\end{center}
\end{figure}


\subsection{Detailed Description}
\subsubsection*{template$<$class GRM$>$ class dai::DAIAlg$<$ GRM $>$}

Combines an \hyperlink{classdai_1_1InfAlg}{InfAlg} and a graphical model, e.g., a \hyperlink{classdai_1_1FactorGraph}{FactorGraph} or \hyperlink{classdai_1_1RegionGraph}{RegionGraph}. 

\begin{Desc}
\item[Template Parameters:]
\begin{description}
\item[{\em GRM}]Should be castable to \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \end{description}
\end{Desc}
\subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1DAIAlg_1b66918854e70f19c8b506658c9f50e0}{
\hyperlink{classdai_1_1DAIAlg_1b66918854e70f19c8b506658c9f50e0}{DAIAlg} ()}
\label{classdai_1_1DAIAlg_1b66918854e70f19c8b506658c9f50e0}

\begin{CompactList}\small\item\em Default constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_46ac57c2abad7c6870f30edc951aeff3}{
\hyperlink{classdai_1_1DAIAlg_46ac57c2abad7c6870f30edc951aeff3}{DAIAlg} (const GRM \&grm)}
\label{classdai_1_1DAIAlg_46ac57c2abad7c6870f30edc951aeff3}

\begin{CompactList}\small\item\em Construct from GRM. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_3223cf97a6e3dc25e8aec7f4c3e22d0b}{
\hyperlink{classdai_1_1DAIAlg_3223cf97a6e3dc25e8aec7f4c3e22d0b}{DAIAlg} (const \hyperlink{classdai_1_1DAIAlg}{DAIAlg} \&x)}
\label{classdai_1_1DAIAlg_3223cf97a6e3dc25e8aec7f4c3e22d0b}

\begin{CompactList}\small\item\em Copy constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_364afd19b16ac9233fd4b235b76317c8}{
\hyperlink{classdai_1_1DAIAlg}{DAIAlg} \& \hyperlink{classdai_1_1DAIAlg_364afd19b16ac9233fd4b235b76317c8}{operator=} (const \hyperlink{classdai_1_1DAIAlg}{DAIAlg} \&x)}
\label{classdai_1_1DAIAlg_364afd19b16ac9233fd4b235b76317c8}

\begin{CompactList}\small\item\em Assignment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{
void \hyperlink{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{backupFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}

\begin{CompactList}\small\item\em Save factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{
void \hyperlink{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{backupFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}

\begin{CompactList}\small\item\em Save Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{
void \hyperlink{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{restoreFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}

\begin{CompactList}\small\item\em Restore factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{
void \hyperlink{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{restoreFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}

\begin{CompactList}\small\item\em Restore Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{
void \hyperlink{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{clamp} (const \hyperlink{classdai_1_1Var}{Var} \&n, size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}

\begin{CompactList}\small\item\em Clamp variable n to value i (i.e. multiply with a Kronecker delta $\delta_{x_n, i}$). \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{
void \hyperlink{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{makeCavity} (size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}

\begin{CompactList}\small\item\em Set all factors interacting with var(i) to 1. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{
\hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{fg} ()}
\label{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}

\begin{CompactList}\small\item\em Get reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{
const \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{fg} () const }
\label{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}

\begin{CompactList}\small\item\em Get const reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_28fd90657745e2a150f94d22319c6e2d}{
virtual \hyperlink{classdai_1_1InfAlg}{InfAlg} $\ast$ \hyperlink{classdai_1_1InfAlg_28fd90657745e2a150f94d22319c6e2d}{clone} () const =0}
\label{classdai_1_1InfAlg_28fd90657745e2a150f94d22319c6e2d}

\begin{CompactList}\small\item\em Returns a pointer to a new, cloned copy of $\ast$this (i.e., virtual copy constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_48936a6f22a324cbe22d553ea41de7e2}{
virtual \hyperlink{classdai_1_1InfAlg}{InfAlg} $\ast$ \hyperlink{classdai_1_1InfAlg_48936a6f22a324cbe22d553ea41de7e2}{create} () const =0}
\label{classdai_1_1InfAlg_48936a6f22a324cbe22d553ea41de7e2}

\begin{CompactList}\small\item\em Returns a pointer to a newly constructed object $\ast$this (i.e., virtual default constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_2f84c282ef54ab76e70fba6f823f2b27}{
virtual std::string \hyperlink{classdai_1_1InfAlg_2f84c282ef54ab76e70fba6f823f2b27}{identify} () const =0}
\label{classdai_1_1InfAlg_2f84c282ef54ab76e70fba6f823f2b27}

\begin{CompactList}\small\item\em Identifies itself for logging purposes. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_d8d8f71ea44c71905e9ee9531e3de48f}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1InfAlg_d8d8f71ea44c71905e9ee9531e3de48f}{belief} (const \hyperlink{classdai_1_1Var}{Var} \&n) const =0}
\label{classdai_1_1InfAlg_d8d8f71ea44c71905e9ee9531e3de48f}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a variable. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_74028032f667c44b0437019c4c13360b}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1InfAlg_74028032f667c44b0437019c4c13360b}{belief} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&n) const =0}
\label{classdai_1_1InfAlg_74028032f667c44b0437019c4c13360b}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_eac9f6b52ff7a11a1e5ac2c03bbd6eb0}{
virtual std::vector$<$ \hyperlink{classdai_1_1TFactor}{Factor} $>$ \hyperlink{classdai_1_1InfAlg_eac9f6b52ff7a11a1e5ac2c03bbd6eb0}{beliefs} () const =0}
\label{classdai_1_1InfAlg_eac9f6b52ff7a11a1e5ac2c03bbd6eb0}

\begin{CompactList}\small\item\em Returns all \char`\"{}beliefs\char`\"{} (i.e., approximate marginal probability distribution) calculated by the algorithm. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_40a2353d63c358ebca834d40b0a4fc70}{
virtual \hyperlink{namespacedai_e7d0472fdc89a8635825d01940e91cbf}{Real} \hyperlink{classdai_1_1InfAlg_40a2353d63c358ebca834d40b0a4fc70}{logZ} () const =0}
\label{classdai_1_1InfAlg_40a2353d63c358ebca834d40b0a4fc70}

\begin{CompactList}\small\item\em Returns the logarithm of the (approximated) partition sum (normalizing constant of the factor graph). \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1InfAlg_99dd53d1aaccf09a4b977a49a983cc85}{init} ()=0
\begin{CompactList}\small\item\em Initializes all data structures of the approximate inference algorithm. \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1InfAlg_7d006e89e01a2f3e2a40b0f7f6e37ae5}{init} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)=0
\begin{CompactList}\small\item\em Initializes all data structures corresponding to some set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1InfAlg_6b169737c142ff0be5db3dab4f4eb568}{
virtual double \hyperlink{classdai_1_1InfAlg_6b169737c142ff0be5db3dab4f4eb568}{run} ()=0}
\label{classdai_1_1InfAlg_6b169737c142ff0be5db3dab4f4eb568}

\begin{CompactList}\small\item\em Runs the approximate inference algorithm. \item\end{CompactList}\item 
virtual double \hyperlink{classdai_1_1InfAlg_7e1ca7da15403d5d2af4a855186c0b46}{maxDiff} () const =0
\item 
virtual size\_\-t \hyperlink{classdai_1_1InfAlg_7a93807863cc0a2025c1a78bdf1e14b8}{Iterations} () const =0
\end{CompactItemize}


\subsection{Member Function Documentation}
\hypertarget{classdai_1_1InfAlg_99dd53d1aaccf09a4b977a49a983cc85}{
\index{dai::DAIAlg@{dai::DAIAlg}!init@{init}}
\index{init@{init}!dai::DAIAlg@{dai::DAIAlg}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}virtual void dai::InfAlg::init ()\hspace{0.3cm}{\tt  \mbox{[}pure virtual, inherited\mbox{]}}}}
\label{classdai_1_1InfAlg_99dd53d1aaccf09a4b977a49a983cc85}


Initializes all data structures of the approximate inference algorithm. 

This method should be called at least once before \hyperlink{classdai_1_1InfAlg_6b169737c142ff0be5db3dab4f4eb568}{run()} is called 

Implemented in \hyperlink{classdai_1_1BP_83349319b22a2d71b1f4ef39709365f9}{dai::BP}, \hyperlink{classdai_1_1ExactInf_8b86be92502af6ef5ecb38f12406733d}{dai::ExactInf}, \hyperlink{classdai_1_1HAK_b30055f32f2c9a84d76668ff74606697}{dai::HAK}, \hyperlink{classdai_1_1JTree_cbb2df1dc4e64097a46fc4cb1394e76f}{dai::JTree}, \hyperlink{classdai_1_1LC_007ab11f0d08d0ed23ae141230b122cc}{dai::LC}, \hyperlink{classdai_1_1MF_eb993d502d0cb97424ebff82e0cf6839}{dai::MF}, \hyperlink{classdai_1_1MR_859f5c780ec490232dc7a2b8f11da38b}{dai::MR}, and \hyperlink{classdai_1_1TreeEP_fff5580fa87ce391223a2e2867527248}{dai::TreeEP}.\hypertarget{classdai_1_1InfAlg_7d006e89e01a2f3e2a40b0f7f6e37ae5}{
\index{dai::DAIAlg@{dai::DAIAlg}!init@{init}}
\index{init@{init}!dai::DAIAlg@{dai::DAIAlg}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}virtual void dai::InfAlg::init (const {\bf VarSet} \& {\em ns})\hspace{0.3cm}{\tt  \mbox{[}pure virtual, inherited\mbox{]}}}}
\label{classdai_1_1InfAlg_7d006e89e01a2f3e2a40b0f7f6e37ae5}


Initializes all data structures corresponding to some set of variables. 

This method can be used to do a partial initialization after a part of the factor graph has changed. Instead of initializing all data structures, it only initializes those involving the variables in ns. 

Implemented in \hyperlink{classdai_1_1BP_b711dcd5db848b6d993fac482b64ee20}{dai::BP}, \hyperlink{classdai_1_1ExactInf_ace58f99e40bb4084c73d6b77fd26456}{dai::ExactInf}, \hyperlink{classdai_1_1HAK_53cd01bc1e70859d556ac71b5e25a192}{dai::HAK}, \hyperlink{classdai_1_1JTree_365c52b5f264c844ac5c010026719350}{dai::JTree}, \hyperlink{classdai_1_1LC_b077c808ad6ca6b9e134746d0846ea5d}{dai::LC}, \hyperlink{classdai_1_1MF_49ddd5c9c9f51ee9fb5e153b7194ac71}{dai::MF}, \hyperlink{classdai_1_1MR_da0e0829e87b541633dbb6078529c21d}{dai::MR}, and \hyperlink{classdai_1_1TreeEP_3cc3718d1fbdf67db23a846283f99d08}{dai::TreeEP}.\hypertarget{classdai_1_1InfAlg_7e1ca7da15403d5d2af4a855186c0b46}{
\index{dai::DAIAlg@{dai::DAIAlg}!maxDiff@{maxDiff}}
\index{maxDiff@{maxDiff}!dai::DAIAlg@{dai::DAIAlg}}
\subsubsection[maxDiff]{\setlength{\rightskip}{0pt plus 5cm}virtual double dai::InfAlg::maxDiff () const\hspace{0.3cm}{\tt  \mbox{[}pure virtual, inherited\mbox{]}}}}
\label{classdai_1_1InfAlg_7e1ca7da15403d5d2af4a855186c0b46}


Return maximum difference between single node beliefs in the last pass \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implemented in \hyperlink{classdai_1_1BP_9954b795f95ae1730d4e09a06afd8ee4}{dai::BP}, \hyperlink{classdai_1_1ExactInf_4f3189ff1567e80dd245a1308f1f31bf}{dai::ExactInf}, \hyperlink{classdai_1_1HAK_1eb4c5a84c30f7c8db8b8f4c0c54f567}{dai::HAK}, \hyperlink{classdai_1_1JTree_acd3916835c9d349aa1b22a2dd54de83}{dai::JTree}, \hyperlink{classdai_1_1LC_32b30963958c3f408d1c5a618fcf418d}{dai::LC}, \hyperlink{classdai_1_1MF_032b149026f011a5cbcd01eb08a3b8dc}{dai::MF}, \hyperlink{classdai_1_1MR_a55d0a62912e9fe8a685157cfa309918}{dai::MR}, and \hyperlink{classdai_1_1TreeEP_d1214cd7bc0899d1a8dc4523bacdb488}{dai::TreeEP}.\hypertarget{classdai_1_1InfAlg_7a93807863cc0a2025c1a78bdf1e14b8}{
\index{dai::DAIAlg@{dai::DAIAlg}!Iterations@{Iterations}}
\index{Iterations@{Iterations}!dai::DAIAlg@{dai::DAIAlg}}
\subsubsection[Iterations]{\setlength{\rightskip}{0pt plus 5cm}virtual size\_\-t dai::InfAlg::Iterations () const\hspace{0.3cm}{\tt  \mbox{[}pure virtual, inherited\mbox{]}}}}
\label{classdai_1_1InfAlg_7a93807863cc0a2025c1a78bdf1e14b8}


Return number of passes over the factorgraph \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implemented in \hyperlink{classdai_1_1BP_be6cbc2992d38144198c8f4ea731a26e}{dai::BP}, \hyperlink{classdai_1_1ExactInf_2df22866419ee923043c8fcf0a2ff62b}{dai::ExactInf}, \hyperlink{classdai_1_1HAK_27599fc844670e503786ac5d485713c5}{dai::HAK}, \hyperlink{classdai_1_1JTree_71cd98f072d69f6ce60af8b52ef02eb8}{dai::JTree}, \hyperlink{classdai_1_1LC_8654c28fad78fa6cd850b2207b271086}{dai::LC}, \hyperlink{classdai_1_1MF_e2daf3cd007572d19d6156f2484db4fd}{dai::MF}, \hyperlink{classdai_1_1MR_6a199aa1d43b3c143a4b631735f53ee3}{dai::MR}, and \hyperlink{classdai_1_1TreeEP_e18e681d1f078e42445d39f8605df7d4}{dai::TreeEP}.

The documentation for this class was generated from the following file:\begin{CompactItemize}
\item 
include/dai/\hyperlink{daialg_8h}{daialg.h}\end{CompactItemize}

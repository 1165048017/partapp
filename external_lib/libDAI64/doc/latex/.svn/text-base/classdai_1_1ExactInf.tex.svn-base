\hypertarget{classdai_1_1ExactInf}{
\section{dai::ExactInf Class Reference}
\label{classdai_1_1ExactInf}\index{dai::ExactInf@{dai::ExactInf}}
}
{\tt \#include $<$dai/exactinf.h$>$}

Inheritance diagram for dai::ExactInf::\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[height=3cm]{classdai_1_1ExactInf}
\end{center}
\end{figure}


\subsection{Detailed Description}
Exact inference algorithm using brute force enumeration (mainly useful for testing purposes). \subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ExactInf_324505f8fdc4904179eb2e1c96fccda1}{
\hyperlink{classdai_1_1ExactInf_324505f8fdc4904179eb2e1c96fccda1}{ExactInf} ()}
\label{classdai_1_1ExactInf_324505f8fdc4904179eb2e1c96fccda1}

\begin{CompactList}\small\item\em Default constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_4eb13120c5f7f4d58333117a9ca1033d}{
\hyperlink{classdai_1_1ExactInf_4eb13120c5f7f4d58333117a9ca1033d}{ExactInf} (const \hyperlink{classdai_1_1ExactInf}{ExactInf} \&x)}
\label{classdai_1_1ExactInf_4eb13120c5f7f4d58333117a9ca1033d}

\begin{CompactList}\small\item\em Copy constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_59fcfa39f061f0ee326a5e0593ef598e}{
\hyperlink{classdai_1_1ExactInf}{ExactInf} \& \hyperlink{classdai_1_1ExactInf_59fcfa39f061f0ee326a5e0593ef598e}{operator=} (const \hyperlink{classdai_1_1ExactInf}{ExactInf} \&x)}
\label{classdai_1_1ExactInf_59fcfa39f061f0ee326a5e0593ef598e}

\begin{CompactList}\small\item\em Assignment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_014dde3f2b7ec66332fb1cbe00538b89}{
\hyperlink{classdai_1_1ExactInf_014dde3f2b7ec66332fb1cbe00538b89}{ExactInf} (const \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \&fg, const \hyperlink{classdai_1_1PropertySet}{PropertySet} \&opts)}
\label{classdai_1_1ExactInf_014dde3f2b7ec66332fb1cbe00538b89}

\begin{CompactList}\small\item\em Construct from \hyperlink{classdai_1_1FactorGraph}{FactorGraph} fg and \hyperlink{classdai_1_1PropertySet}{PropertySet} opts. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{
void \hyperlink{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{backupFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}

\begin{CompactList}\small\item\em Save factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{
void \hyperlink{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{backupFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}

\begin{CompactList}\small\item\em Save Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{
void \hyperlink{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{restoreFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}

\begin{CompactList}\small\item\em Restore factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{
void \hyperlink{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{restoreFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}

\begin{CompactList}\small\item\em Restore Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{
void \hyperlink{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{clamp} (const \hyperlink{classdai_1_1Var}{Var} \&n, size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}

\begin{CompactList}\small\item\em Clamp variable n to value i (i.e. multiply with a Kronecker delta $\delta_{x_n, i}$). \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{
void \hyperlink{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{makeCavity} (size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}

\begin{CompactList}\small\item\em Set all factors interacting with var(i) to 1. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{
\hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{fg} ()}
\label{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}

\begin{CompactList}\small\item\em Get reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{
const \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{fg} () const }
\label{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}

\begin{CompactList}\small\item\em Get const reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\end{CompactItemize}
\begin{Indent}{\bf General InfAlg interface}\par
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ExactInf_ac21e07e94947d380da177523caa0213}{
virtual \hyperlink{classdai_1_1ExactInf}{ExactInf} $\ast$ \hyperlink{classdai_1_1ExactInf_ac21e07e94947d380da177523caa0213}{clone} () const }
\label{classdai_1_1ExactInf_ac21e07e94947d380da177523caa0213}

\begin{CompactList}\small\item\em Returns a pointer to a new, cloned copy of $\ast$this (i.e., virtual copy constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_10d22ff1ae94fb7af4a1bca9496e3bce}{
virtual \hyperlink{classdai_1_1ExactInf}{ExactInf} $\ast$ \hyperlink{classdai_1_1ExactInf_10d22ff1ae94fb7af4a1bca9496e3bce}{create} () const }
\label{classdai_1_1ExactInf_10d22ff1ae94fb7af4a1bca9496e3bce}

\begin{CompactList}\small\item\em Returns a pointer to a newly constructed object $\ast$this (i.e., virtual default constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_b316d463564eafd5c2629eded1f31b80}{
virtual std::string \hyperlink{classdai_1_1ExactInf_b316d463564eafd5c2629eded1f31b80}{identify} () const }
\label{classdai_1_1ExactInf_b316d463564eafd5c2629eded1f31b80}

\begin{CompactList}\small\item\em Identifies itself for logging purposes. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_85d120a9ab1b03ae922be7a7568de64e}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1ExactInf_85d120a9ab1b03ae922be7a7568de64e}{belief} (const \hyperlink{classdai_1_1Var}{Var} \&n) const }
\label{classdai_1_1ExactInf_85d120a9ab1b03ae922be7a7568de64e}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a variable. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_e3f944864f06bacd49fcf7c3f6f2fa20}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1ExactInf_e3f944864f06bacd49fcf7c3f6f2fa20}{belief} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns) const }
\label{classdai_1_1ExactInf_e3f944864f06bacd49fcf7c3f6f2fa20}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_d6ec1824cb811733bfa68071ab4ae5e3}{
virtual std::vector$<$ \hyperlink{classdai_1_1TFactor}{Factor} $>$ \hyperlink{classdai_1_1ExactInf_d6ec1824cb811733bfa68071ab4ae5e3}{beliefs} () const }
\label{classdai_1_1ExactInf_d6ec1824cb811733bfa68071ab4ae5e3}

\begin{CompactList}\small\item\em Returns all \char`\"{}beliefs\char`\"{} (i.e., approximate marginal probability distribution) calculated by the algorithm. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_f13ecd0ae1374782ac4afa8c6e679d73}{
virtual \hyperlink{namespacedai_e7d0472fdc89a8635825d01940e91cbf}{Real} \hyperlink{classdai_1_1ExactInf_f13ecd0ae1374782ac4afa8c6e679d73}{logZ} () const }
\label{classdai_1_1ExactInf_f13ecd0ae1374782ac4afa8c6e679d73}

\begin{CompactList}\small\item\em Returns the logarithm of the (approximated) partition sum (normalizing constant of the factor graph). \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1ExactInf_8b86be92502af6ef5ecb38f12406733d}{init} ()
\begin{CompactList}\small\item\em Initializes all data structures of the approximate inference algorithm. \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1ExactInf_ace58f99e40bb4084c73d6b77fd26456}{init} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&)
\begin{CompactList}\small\item\em Initializes all data structures corresponding to some set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ExactInf_cfb073de0b7b01929a9d02e6500f2443}{
virtual double \hyperlink{classdai_1_1ExactInf_cfb073de0b7b01929a9d02e6500f2443}{run} ()}
\label{classdai_1_1ExactInf_cfb073de0b7b01929a9d02e6500f2443}

\begin{CompactList}\small\item\em Runs the approximate inference algorithm. \item\end{CompactList}\item 
virtual double \hyperlink{classdai_1_1ExactInf_4f3189ff1567e80dd245a1308f1f31bf}{maxDiff} () const 
\item 
virtual size\_\-t \hyperlink{classdai_1_1ExactInf_2df22866419ee923043c8fcf0a2ff62b}{Iterations} () const 
\end{CompactItemize}
\end{Indent}
\begin{Indent}{\bf Additional interface specific for ExactInf}\par
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ExactInf_6a8257999f86bc9aea76c4906eeed7e6}{
\hyperlink{classdai_1_1TFactor}{Factor} \textbf{beliefV} (size\_\-t i) const }
\label{classdai_1_1ExactInf_6a8257999f86bc9aea76c4906eeed7e6}

\item 
\hypertarget{classdai_1_1ExactInf_75fe681325b30f2e8ad643a9273610a7}{
\hyperlink{classdai_1_1TFactor}{Factor} \textbf{beliefF} (size\_\-t I) const }
\label{classdai_1_1ExactInf_75fe681325b30f2e8ad643a9273610a7}

\end{CompactItemize}
\end{Indent}
\subsection*{Public Attributes}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ExactInf_b4dbf2483cfdfbb9971b2f69c42a2327}{
struct \hyperlink{structdai_1_1ExactInf_1_1Properties}{dai::ExactInf::Properties} \hyperlink{classdai_1_1ExactInf_b4dbf2483cfdfbb9971b2f69c42a2327}{props}}
\label{classdai_1_1ExactInf_b4dbf2483cfdfbb9971b2f69c42a2327}

\begin{CompactList}\small\item\em Parameters of this inference algorithm. \item\end{CompactList}\end{CompactItemize}
\subsection*{Static Public Attributes}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ExactInf_2280f2174f843cb88eb715d51536b812}{
static const char $\ast$ \hyperlink{classdai_1_1ExactInf_2280f2174f843cb88eb715d51536b812}{Name} = \char`\"{}EXACT\char`\"{}}
\label{classdai_1_1ExactInf_2280f2174f843cb88eb715d51536b812}

\begin{CompactList}\small\item\em Name of this inference algorithm. \item\end{CompactList}\end{CompactItemize}
\subsection*{Classes}
\begin{CompactItemize}
\item 
struct \hyperlink{structdai_1_1ExactInf_1_1Properties}{Properties}
\begin{CompactList}\small\item\em Parameters of this inference algorithm. \item\end{CompactList}\end{CompactItemize}


\subsection{Member Function Documentation}
\hypertarget{classdai_1_1ExactInf_8b86be92502af6ef5ecb38f12406733d}{
\index{dai::ExactInf@{dai::ExactInf}!init@{init}}
\index{init@{init}!dai::ExactInf@{dai::ExactInf}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}void dai::ExactInf::init ()\hspace{0.3cm}{\tt  \mbox{[}virtual\mbox{]}}}}
\label{classdai_1_1ExactInf_8b86be92502af6ef5ecb38f12406733d}


Initializes all data structures of the approximate inference algorithm. 

This method should be called at least once before \hyperlink{classdai_1_1ExactInf_cfb073de0b7b01929a9d02e6500f2443}{run()} is called 

Implements \hyperlink{classdai_1_1InfAlg_99dd53d1aaccf09a4b977a49a983cc85}{dai::InfAlg}.\hypertarget{classdai_1_1ExactInf_ace58f99e40bb4084c73d6b77fd26456}{
\index{dai::ExactInf@{dai::ExactInf}!init@{init}}
\index{init@{init}!dai::ExactInf@{dai::ExactInf}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}virtual void dai::ExactInf::init (const {\bf VarSet} \& {\em ns})\hspace{0.3cm}{\tt  \mbox{[}inline, virtual\mbox{]}}}}
\label{classdai_1_1ExactInf_ace58f99e40bb4084c73d6b77fd26456}


Initializes all data structures corresponding to some set of variables. 

This method can be used to do a partial initialization after a part of the factor graph has changed. Instead of initializing all data structures, it only initializes those involving the variables in ns. 

Implements \hyperlink{classdai_1_1InfAlg_7d006e89e01a2f3e2a40b0f7f6e37ae5}{dai::InfAlg}.\hypertarget{classdai_1_1ExactInf_4f3189ff1567e80dd245a1308f1f31bf}{
\index{dai::ExactInf@{dai::ExactInf}!maxDiff@{maxDiff}}
\index{maxDiff@{maxDiff}!dai::ExactInf@{dai::ExactInf}}
\subsubsection[maxDiff]{\setlength{\rightskip}{0pt plus 5cm}virtual double dai::ExactInf::maxDiff () const\hspace{0.3cm}{\tt  \mbox{[}inline, virtual\mbox{]}}}}
\label{classdai_1_1ExactInf_4f3189ff1567e80dd245a1308f1f31bf}


Return maximum difference between single node beliefs in the last pass \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implements \hyperlink{classdai_1_1InfAlg_7e1ca7da15403d5d2af4a855186c0b46}{dai::InfAlg}.\hypertarget{classdai_1_1ExactInf_2df22866419ee923043c8fcf0a2ff62b}{
\index{dai::ExactInf@{dai::ExactInf}!Iterations@{Iterations}}
\index{Iterations@{Iterations}!dai::ExactInf@{dai::ExactInf}}
\subsubsection[Iterations]{\setlength{\rightskip}{0pt plus 5cm}virtual size\_\-t dai::ExactInf::Iterations () const\hspace{0.3cm}{\tt  \mbox{[}inline, virtual\mbox{]}}}}
\label{classdai_1_1ExactInf_2df22866419ee923043c8fcf0a2ff62b}


Return number of passes over the factorgraph \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implements \hyperlink{classdai_1_1InfAlg_7a93807863cc0a2025c1a78bdf1e14b8}{dai::InfAlg}.

The documentation for this class was generated from the following files:\begin{CompactItemize}
\item 
include/dai/\hyperlink{exactinf_8h}{exactinf.h}\item 
src/exactinf.cpp\end{CompactItemize}

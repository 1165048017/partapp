\hypertarget{classdai_1_1MultiFor}{
\section{dai::MultiFor Class Reference}
\label{classdai_1_1MultiFor}\index{dai::MultiFor@{dai::MultiFor}}
}
{\tt \#include $<$dai/index.h$>$}



\subsection{Detailed Description}
\hyperlink{classdai_1_1MultiFor}{MultiFor} makes it easy to perform a dynamic number of nested for loops. 

An example of the usage is as follows: 

\begin{Code}\begin{verbatim}  std::vector<size_t> dims;
  dims.push_back( 3 );
  dims.push_back( 4 );
  dims.push_back( 5 );
  for( MultiFor s(dims); s.valid(); ++s )
      cout << "linear index: " << (size_t)s << " corresponds to indices " << s[0] << ", " << s[1] << ", " << s[2] << endl;
\end{verbatim}
\end{Code}

 which would be equivalent to: 

\begin{Code}\begin{verbatim}  size_t s = 0;
  for( size_t s0 = 0; s0 < 3; s0++ )
      for( size_t s1 = 0; s1 < 4; s1++ )
          for( size_t s2 = 0; s2 < 5; s++, s2++ )
              cout << "linear index: " << (size_t)s << " corresponds to indices " << s0 << ", " << s1 << ", " << s2 << endl;
\end{verbatim}
\end{Code}

 \subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1MultiFor_9ad4786f54d6cebf5bc6111058415c79}{
\hyperlink{classdai_1_1MultiFor_9ad4786f54d6cebf5bc6111058415c79}{MultiFor} ()}
\label{classdai_1_1MultiFor_9ad4786f54d6cebf5bc6111058415c79}

\begin{CompactList}\small\item\em Default constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_6f3ee9f121903fa4fddf56416151e3c0}{
\hyperlink{classdai_1_1MultiFor_6f3ee9f121903fa4fddf56416151e3c0}{MultiFor} (const std::vector$<$ size\_\-t $>$ \&d)}
\label{classdai_1_1MultiFor_6f3ee9f121903fa4fddf56416151e3c0}

\begin{CompactList}\small\item\em Initialize from vector of index dimensions. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_f29ba6cf5f64475130f5c48fd4b52e53}{
\hyperlink{classdai_1_1MultiFor_f29ba6cf5f64475130f5c48fd4b52e53}{MultiFor} (const \hyperlink{classdai_1_1MultiFor}{MultiFor} \&x)}
\label{classdai_1_1MultiFor_f29ba6cf5f64475130f5c48fd4b52e53}

\begin{CompactList}\small\item\em Copy constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_0f5bb0cd496a84c7705a95cd52b80096}{
\hyperlink{classdai_1_1MultiFor}{MultiFor} \& \hyperlink{classdai_1_1MultiFor_0f5bb0cd496a84c7705a95cd52b80096}{operator=} (const \hyperlink{classdai_1_1MultiFor}{MultiFor} \&x)}
\label{classdai_1_1MultiFor_0f5bb0cd496a84c7705a95cd52b80096}

\begin{CompactList}\small\item\em Assignment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_3127a6180e9d1ade8e4e0a310d46c964}{
\hyperlink{classdai_1_1MultiFor_3127a6180e9d1ade8e4e0a310d46c964}{operator size\_\-t} () const }
\label{classdai_1_1MultiFor_3127a6180e9d1ade8e4e0a310d46c964}

\begin{CompactList}\small\item\em Return linear state. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_dcf44dd24e2be73381cf3b5cdbe470a1}{
size\_\-t \hyperlink{classdai_1_1MultiFor_dcf44dd24e2be73381cf3b5cdbe470a1}{operator\mbox{[}$\,$\mbox{]}} (size\_\-t k) const }
\label{classdai_1_1MultiFor_dcf44dd24e2be73381cf3b5cdbe470a1}

\begin{CompactList}\small\item\em Return k'th index. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_ca071de84757bdc9b45982e9826a1fdb}{
\hyperlink{classdai_1_1MultiFor}{MultiFor} \& \hyperlink{classdai_1_1MultiFor_ca071de84757bdc9b45982e9826a1fdb}{operator++} ()}
\label{classdai_1_1MultiFor_ca071de84757bdc9b45982e9826a1fdb}

\begin{CompactList}\small\item\em Prefix increment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_06238b80d9f59dd6e56b516db39bdace}{
void \hyperlink{classdai_1_1MultiFor_06238b80d9f59dd6e56b516db39bdace}{operator++} (int)}
\label{classdai_1_1MultiFor_06238b80d9f59dd6e56b516db39bdace}

\begin{CompactList}\small\item\em Postfix increment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1MultiFor_298bca4ac1b10613d2d2b7edd641c0a9}{
bool \hyperlink{classdai_1_1MultiFor_298bca4ac1b10613d2d2b7edd641c0a9}{valid} () const }
\label{classdai_1_1MultiFor_298bca4ac1b10613d2d2b7edd641c0a9}

\begin{CompactList}\small\item\em Returns true if the current state is valid. \item\end{CompactList}\end{CompactItemize}


The documentation for this class was generated from the following file:\begin{CompactItemize}
\item 
include/dai/\hyperlink{index_8h}{index.h}\end{CompactItemize}

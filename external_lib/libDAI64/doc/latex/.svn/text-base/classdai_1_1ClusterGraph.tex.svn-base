\hypertarget{classdai_1_1ClusterGraph}{
\section{dai::ClusterGraph Class Reference}
\label{classdai_1_1ClusterGraph}\index{dai::ClusterGraph@{dai::ClusterGraph}}
}
{\tt \#include $<$dai/clustergraph.h$>$}



\subsection{Detailed Description}
A \hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} is a hypergraph with VarSets as nodes. 

It is implemented as bipartite graph with variable (\hyperlink{classdai_1_1Var}{Var}) nodes and cluster (\hyperlink{classdai_1_1VarSet}{VarSet}) nodes. \subsection*{Public Types}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ClusterGraph_f3157e5f5baf0f36a8c37c43c4a70818}{
typedef \hyperlink{structdai_1_1BipartiteGraph_1_1Neighbor}{BipartiteGraph::Neighbor} \hyperlink{classdai_1_1ClusterGraph_f3157e5f5baf0f36a8c37c43c4a70818}{Neighbor}}
\label{classdai_1_1ClusterGraph_f3157e5f5baf0f36a8c37c43c4a70818}

\begin{CompactList}\small\item\em Shorthand for \hyperlink{structdai_1_1BipartiteGraph_1_1Neighbor}{BipartiteGraph::Neighbor}. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_c5d233b46473ce14c1773db35cb8100d}{
typedef \hyperlink{classdai_1_1BipartiteGraph_ff511d0eba0fd2956c08b602029ba95f}{BipartiteGraph::Edge} \hyperlink{classdai_1_1ClusterGraph_c5d233b46473ce14c1773db35cb8100d}{Edge}}
\label{classdai_1_1ClusterGraph_c5d233b46473ce14c1773db35cb8100d}

\begin{CompactList}\small\item\em Shorthand for \hyperlink{classdai_1_1BipartiteGraph_ff511d0eba0fd2956c08b602029ba95f}{BipartiteGraph::Edge}. \item\end{CompactList}\end{CompactItemize}
\subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ClusterGraph_d2e6d97e39753c1524026e8dbe52387a}{
\hyperlink{classdai_1_1ClusterGraph_d2e6d97e39753c1524026e8dbe52387a}{ClusterGraph} ()}
\label{classdai_1_1ClusterGraph_d2e6d97e39753c1524026e8dbe52387a}

\begin{CompactList}\small\item\em Default constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_5509e79c9c41d7219104eaf07fce6a36}{
\hyperlink{classdai_1_1ClusterGraph_5509e79c9c41d7219104eaf07fce6a36}{ClusterGraph} (const std::vector$<$ \hyperlink{classdai_1_1VarSet}{VarSet} $>$ \&cls)}
\label{classdai_1_1ClusterGraph_5509e79c9c41d7219104eaf07fce6a36}

\begin{CompactList}\small\item\em Construct from vector$<$VarSet$>$. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_591f12b43ccc7d0f046169c03d61c948}{
\hyperlink{classdai_1_1ClusterGraph_591f12b43ccc7d0f046169c03d61c948}{ClusterGraph} (const \hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \&x)}
\label{classdai_1_1ClusterGraph_591f12b43ccc7d0f046169c03d61c948}

\begin{CompactList}\small\item\em Copy constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_6397064f5586477caff7d3aec485248f}{
\hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \& \hyperlink{classdai_1_1ClusterGraph_6397064f5586477caff7d3aec485248f}{operator=} (const \hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \&x)}
\label{classdai_1_1ClusterGraph_6397064f5586477caff7d3aec485248f}

\begin{CompactList}\small\item\em Assignment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_768d5b0b1636909630dfca1a0f4df878}{
bool \hyperlink{classdai_1_1ClusterGraph_768d5b0b1636909630dfca1a0f4df878}{isMaximal} (size\_\-t I) const }
\label{classdai_1_1ClusterGraph_768d5b0b1636909630dfca1a0f4df878}

\begin{CompactList}\small\item\em Returns true if cluster I is not contained in a larger cluster. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_13cfa2d4973d387d55ba0a54d4676a6e}{
\hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \& \hyperlink{classdai_1_1ClusterGraph_13cfa2d4973d387d55ba0a54d4676a6e}{eraseNonMaximal} ()}
\label{classdai_1_1ClusterGraph_13cfa2d4973d387d55ba0a54d4676a6e}

\begin{CompactList}\small\item\em Erases all VarSets that are not maximal. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_6a3592792de64c05211abc9aebf525d2}{
size\_\-t \hyperlink{classdai_1_1ClusterGraph_6a3592792de64c05211abc9aebf525d2}{size} () const }
\label{classdai_1_1ClusterGraph_6a3592792de64c05211abc9aebf525d2}

\begin{CompactList}\small\item\em Returns number of clusters. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_bd0f148c5953b0ec4340e1b1c37ab0ef}{
size\_\-t \hyperlink{classdai_1_1ClusterGraph_bd0f148c5953b0ec4340e1b1c37ab0ef}{findVar} (const \hyperlink{classdai_1_1Var}{Var} \&n) const }
\label{classdai_1_1ClusterGraph_bd0f148c5953b0ec4340e1b1c37ab0ef}

\begin{CompactList}\small\item\em Returns index of variable n. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_b193856e886cf22d9773282dd4a01f20}{
bool \hyperlink{classdai_1_1ClusterGraph_b193856e886cf22d9773282dd4a01f20}{adj} (size\_\-t i1, size\_\-t i2)}
\label{classdai_1_1ClusterGraph_b193856e886cf22d9773282dd4a01f20}

\begin{CompactList}\small\item\em Returns true if vars with indices i1 and i2 are adjacent, i.e., both contained in the same cluster. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_bcb07aa0dd6b564c9af98f07ff3a486e}{
\hyperlink{classdai_1_1VarSet}{VarSet} \hyperlink{classdai_1_1ClusterGraph_bcb07aa0dd6b564c9af98f07ff3a486e}{Delta} (size\_\-t i) const }
\label{classdai_1_1ClusterGraph_bcb07aa0dd6b564c9af98f07ff3a486e}

\begin{CompactList}\small\item\em Returns union of clusters that contain the variable with index i. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_da8f45f04be422aaf399e02565013d6c}{
void \hyperlink{classdai_1_1ClusterGraph_da8f45f04be422aaf399e02565013d6c}{insert} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&cl)}
\label{classdai_1_1ClusterGraph_da8f45f04be422aaf399e02565013d6c}

\begin{CompactList}\small\item\em Inserts a cluster (if it does not already exist). \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_407cabb372ced5d4399cea029f1e1bf0}{
\hyperlink{classdai_1_1VarSet}{VarSet} \hyperlink{classdai_1_1ClusterGraph_407cabb372ced5d4399cea029f1e1bf0}{delta} (size\_\-t i) const }
\label{classdai_1_1ClusterGraph_407cabb372ced5d4399cea029f1e1bf0}

\begin{CompactList}\small\item\em Returns union of clusters that contain variable with index i, minus this variable. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_21a1a08351c17c90a3efac6a5f8a4818}{
\hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \& \hyperlink{classdai_1_1ClusterGraph_21a1a08351c17c90a3efac6a5f8a4818}{eraseSubsuming} (size\_\-t i)}
\label{classdai_1_1ClusterGraph_21a1a08351c17c90a3efac6a5f8a4818}

\begin{CompactList}\small\item\em Erases all clusters that contain n where n is the variable with index i. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_bb5e88ece31a9a7ff405f988dc1a1e46}{
const std::vector$<$ \hyperlink{classdai_1_1VarSet}{VarSet} $>$ \& \hyperlink{classdai_1_1ClusterGraph_bb5e88ece31a9a7ff405f988dc1a1e46}{toVector} () const }
\label{classdai_1_1ClusterGraph_bb5e88ece31a9a7ff405f988dc1a1e46}

\begin{CompactList}\small\item\em Returns a const reference to the clusters. \item\end{CompactList}\item 
size\_\-t \hyperlink{classdai_1_1ClusterGraph_517e9ea33d7ec133586110eb5106fcc4}{eliminationCost} (size\_\-t i)
\begin{CompactList}\small\item\em Calculates cost of eliminating the variable with index i. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_1ec39220612d165fc15dde360b57bf46}{
\hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \hyperlink{classdai_1_1ClusterGraph_1ec39220612d165fc15dde360b57bf46}{VarElim} (const std::vector$<$ \hyperlink{classdai_1_1Var}{Var} $>$ \&ElimSeq) const }
\label{classdai_1_1ClusterGraph_1ec39220612d165fc15dde360b57bf46}

\begin{CompactList}\small\item\em Performs Variable Elimination without Probs, i.e. only keeping track of. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_742b9a4367bf6ce1a6a05e58b9892089}{
\hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \hyperlink{classdai_1_1ClusterGraph_742b9a4367bf6ce1a6a05e58b9892089}{VarElim\_\-MinFill} () const }
\label{classdai_1_1ClusterGraph_742b9a4367bf6ce1a6a05e58b9892089}

\begin{CompactList}\small\item\em Performs Variable Eliminiation using the MinFill heuristic. \item\end{CompactList}\end{CompactItemize}
\subsection*{Public Attributes}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ClusterGraph_d8a1a655cf546d42303d46f3d08079cc}{
\hyperlink{classdai_1_1BipartiteGraph}{BipartiteGraph} \hyperlink{classdai_1_1ClusterGraph_d8a1a655cf546d42303d46f3d08079cc}{G}}
\label{classdai_1_1ClusterGraph_d8a1a655cf546d42303d46f3d08079cc}

\begin{CompactList}\small\item\em Stores the neighborhood structure. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_b96a722f403754e0437c5fbe0c364f57}{
std::vector$<$ \hyperlink{classdai_1_1Var}{Var} $>$ \hyperlink{classdai_1_1ClusterGraph_b96a722f403754e0437c5fbe0c364f57}{vars}}
\label{classdai_1_1ClusterGraph_b96a722f403754e0437c5fbe0c364f57}

\begin{CompactList}\small\item\em Stores the variables corresponding to the nodes. \item\end{CompactList}\item 
\hypertarget{classdai_1_1ClusterGraph_cf58184945136e95a49177c52da8d2c2}{
std::vector$<$ \hyperlink{classdai_1_1VarSet}{VarSet} $>$ \hyperlink{classdai_1_1ClusterGraph_cf58184945136e95a49177c52da8d2c2}{clusters}}
\label{classdai_1_1ClusterGraph_cf58184945136e95a49177c52da8d2c2}

\begin{CompactList}\small\item\em Stores the clusters corresponding to the hyperedges. \item\end{CompactList}\end{CompactItemize}
\subsection*{Friends}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1ClusterGraph_23a45a96ea996832c667d346c99bc760}{
std::ostream \& \hyperlink{classdai_1_1ClusterGraph_23a45a96ea996832c667d346c99bc760}{operator$<$$<$} (std::ostream \&os, const \hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} \&cl)}
\label{classdai_1_1ClusterGraph_23a45a96ea996832c667d346c99bc760}

\begin{CompactList}\small\item\em Writes a \hyperlink{classdai_1_1ClusterGraph}{ClusterGraph} to an output stream. \item\end{CompactList}\end{CompactItemize}


\subsection{Member Function Documentation}
\hypertarget{classdai_1_1ClusterGraph_517e9ea33d7ec133586110eb5106fcc4}{
\index{dai::ClusterGraph@{dai::ClusterGraph}!eliminationCost@{eliminationCost}}
\index{eliminationCost@{eliminationCost}!dai::ClusterGraph@{dai::ClusterGraph}}
\subsubsection[eliminationCost]{\setlength{\rightskip}{0pt plus 5cm}size\_\-t dai::ClusterGraph::eliminationCost (size\_\-t {\em i})\hspace{0.3cm}{\tt  \mbox{[}inline\mbox{]}}}}
\label{classdai_1_1ClusterGraph_517e9ea33d7ec133586110eb5106fcc4}


Calculates cost of eliminating the variable with index i. 

The cost is measured as \char`\"{}number of added edges in the adjacency graph\char`\"{}, where the adjacency graph has the variables as its nodes and connects nodes i1 and i2 iff i1 and i2 occur in some common cluster. 

The documentation for this class was generated from the following files:\begin{CompactItemize}
\item 
include/dai/\hyperlink{clustergraph_8h}{clustergraph.h}\item 
src/clustergraph.cpp\end{CompactItemize}

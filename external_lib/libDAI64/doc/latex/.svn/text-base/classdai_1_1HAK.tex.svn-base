\hypertarget{classdai_1_1HAK}{
\section{dai::HAK Class Reference}
\label{classdai_1_1HAK}\index{dai::HAK@{dai::HAK}}
}
{\tt \#include $<$dai/hak.h$>$}

Inheritance diagram for dai::HAK::\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[height=3cm]{classdai_1_1HAK}
\end{center}
\end{figure}


\subsection{Detailed Description}
Approximate inference algorithm: implementation of single-loop (\char`\"{}Generalized Belief Propagation\char`\"{}) and double-loop algorithms by Heskes, Albers and Kappen. \subsection*{Public Member Functions}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1HAK_deffdd4894e50b585d11cab9e9813d6f}{
\hyperlink{classdai_1_1HAK_deffdd4894e50b585d11cab9e9813d6f}{HAK} ()}
\label{classdai_1_1HAK_deffdd4894e50b585d11cab9e9813d6f}

\begin{CompactList}\small\item\em Default constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_d956a4113227fae22e2c5c30ee003622}{
\hyperlink{classdai_1_1HAK_d956a4113227fae22e2c5c30ee003622}{HAK} (const \hyperlink{classdai_1_1HAK}{HAK} \&x)}
\label{classdai_1_1HAK_d956a4113227fae22e2c5c30ee003622}

\begin{CompactList}\small\item\em Copy constructor. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_ee00f8b04cc05ef8516800d4ec56b7b4}{
\hyperlink{classdai_1_1HAK}{HAK} \& \hyperlink{classdai_1_1HAK_ee00f8b04cc05ef8516800d4ec56b7b4}{operator=} (const \hyperlink{classdai_1_1HAK}{HAK} \&x)}
\label{classdai_1_1HAK_ee00f8b04cc05ef8516800d4ec56b7b4}

\begin{CompactList}\small\item\em Assignment operator. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_5cd7000971e68e732d5dffa7c665804a}{
\hyperlink{classdai_1_1HAK_5cd7000971e68e732d5dffa7c665804a}{HAK} (const \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \&fg, const \hyperlink{classdai_1_1PropertySet}{PropertySet} \&opts)}
\label{classdai_1_1HAK_5cd7000971e68e732d5dffa7c665804a}

\begin{CompactList}\small\item\em Construct from \hyperlink{classdai_1_1FactorGraph}{FactorGraph} fg and \hyperlink{classdai_1_1PropertySet}{PropertySet} opts. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_f0608983940f78bd6fefe0933404861e}{
\hyperlink{classdai_1_1HAK_f0608983940f78bd6fefe0933404861e}{HAK} (const \hyperlink{classdai_1_1RegionGraph}{RegionGraph} \&rg, const \hyperlink{classdai_1_1PropertySet}{PropertySet} \&opts)}
\label{classdai_1_1HAK_f0608983940f78bd6fefe0933404861e}

\begin{CompactList}\small\item\em Construct from \hyperlink{classdai_1_1RegionGraph}{RegionGraph} rg and \hyperlink{classdai_1_1PropertySet}{PropertySet} opts. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{
void \hyperlink{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}{backupFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_48ba6a58d10b8802d690e5e92ec5abe9}

\begin{CompactList}\small\item\em Save factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{
void \hyperlink{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}{backupFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_0176904d3b4b9d083288ea8c4a2dc8bc}

\begin{CompactList}\small\item\em Save Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{
void \hyperlink{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}{restoreFactor} (size\_\-t I)}
\label{classdai_1_1DAIAlg_bf8dbd2797ec871e86566a6dfc0864e3}

\begin{CompactList}\small\item\em Restore factor I. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{
void \hyperlink{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}{restoreFactors} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)}
\label{classdai_1_1DAIAlg_3ce97e9370f1cdc785526c1a6c1eaadf}

\begin{CompactList}\small\item\em Restore Factors involving ns. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{
void \hyperlink{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}{clamp} (const \hyperlink{classdai_1_1Var}{Var} \&n, size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_b7d537f1a9d116617d8dce722ce65dc0}

\begin{CompactList}\small\item\em Clamp variable n to value i (i.e. multiply with a Kronecker delta $\delta_{x_n, i}$). \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{
void \hyperlink{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}{makeCavity} (size\_\-t i, bool backup=false)}
\label{classdai_1_1DAIAlg_7f0b8452352080a1e35ab9a68cb589fd}

\begin{CompactList}\small\item\em Set all factors interacting with var(i) to 1. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{
\hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}{fg} ()}
\label{classdai_1_1DAIAlg_9348542c22d04ed804388f1fe3009fa3}

\begin{CompactList}\small\item\em Get reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\item 
\hypertarget{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{
const \hyperlink{classdai_1_1FactorGraph}{FactorGraph} \& \hyperlink{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}{fg} () const }
\label{classdai_1_1DAIAlg_35400e471b8c3c98bef6c74ceac8fa16}

\begin{CompactList}\small\item\em Get const reference to underlying \hyperlink{classdai_1_1FactorGraph}{FactorGraph}. \item\end{CompactList}\end{CompactItemize}
\begin{Indent}{\bf General InfAlg interface}\par
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1HAK_d128f5829b28e44aafcb9a4aae6881df}{
virtual \hyperlink{classdai_1_1HAK}{HAK} $\ast$ \hyperlink{classdai_1_1HAK_d128f5829b28e44aafcb9a4aae6881df}{clone} () const }
\label{classdai_1_1HAK_d128f5829b28e44aafcb9a4aae6881df}

\begin{CompactList}\small\item\em Returns a pointer to a new, cloned copy of $\ast$this (i.e., virtual copy constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_895c9278a3958a7ad390c714386b0224}{
virtual \hyperlink{classdai_1_1HAK}{HAK} $\ast$ \hyperlink{classdai_1_1HAK_895c9278a3958a7ad390c714386b0224}{create} () const }
\label{classdai_1_1HAK_895c9278a3958a7ad390c714386b0224}

\begin{CompactList}\small\item\em Returns a pointer to a newly constructed object $\ast$this (i.e., virtual default constructor). \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_05b7d9c9850ea10299b3dbce1e61bc23}{
virtual std::string \hyperlink{classdai_1_1HAK_05b7d9c9850ea10299b3dbce1e61bc23}{identify} () const }
\label{classdai_1_1HAK_05b7d9c9850ea10299b3dbce1e61bc23}

\begin{CompactList}\small\item\em Identifies itself for logging purposes. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_a08448a7be322c657568996d045d5b89}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1HAK_a08448a7be322c657568996d045d5b89}{belief} (const \hyperlink{classdai_1_1Var}{Var} \&n) const }
\label{classdai_1_1HAK_a08448a7be322c657568996d045d5b89}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a variable. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_c50b3b1bd84f2a8b9ea3b2ffab987f06}{
virtual \hyperlink{classdai_1_1TFactor}{Factor} \hyperlink{classdai_1_1HAK_c50b3b1bd84f2a8b9ea3b2ffab987f06}{belief} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns) const }
\label{classdai_1_1HAK_c50b3b1bd84f2a8b9ea3b2ffab987f06}

\begin{CompactList}\small\item\em Returns the \char`\"{}belief\char`\"{} (i.e., approximate marginal probability distribution) of a set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_b0580070bad1f55d8d00c5e9c3c90e42}{
virtual std::vector$<$ \hyperlink{classdai_1_1TFactor}{Factor} $>$ \hyperlink{classdai_1_1HAK_b0580070bad1f55d8d00c5e9c3c90e42}{beliefs} () const }
\label{classdai_1_1HAK_b0580070bad1f55d8d00c5e9c3c90e42}

\begin{CompactList}\small\item\em Returns all \char`\"{}beliefs\char`\"{} (i.e., approximate marginal probability distribution) calculated by the algorithm. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_c1787a35ebd8c1cd1e615f4db00b828f}{
virtual \hyperlink{namespacedai_e7d0472fdc89a8635825d01940e91cbf}{Real} \hyperlink{classdai_1_1HAK_c1787a35ebd8c1cd1e615f4db00b828f}{logZ} () const }
\label{classdai_1_1HAK_c1787a35ebd8c1cd1e615f4db00b828f}

\begin{CompactList}\small\item\em Returns the logarithm of the (approximated) partition sum (normalizing constant of the factor graph). \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1HAK_b30055f32f2c9a84d76668ff74606697}{init} ()
\begin{CompactList}\small\item\em Initializes all data structures of the approximate inference algorithm. \item\end{CompactList}\item 
virtual void \hyperlink{classdai_1_1HAK_53cd01bc1e70859d556ac71b5e25a192}{init} (const \hyperlink{classdai_1_1VarSet}{VarSet} \&ns)
\begin{CompactList}\small\item\em Initializes all data structures corresponding to some set of variables. \item\end{CompactList}\item 
\hypertarget{classdai_1_1HAK_0f9bade51e38b8fb955b7a61f88ecf20}{
virtual double \hyperlink{classdai_1_1HAK_0f9bade51e38b8fb955b7a61f88ecf20}{run} ()}
\label{classdai_1_1HAK_0f9bade51e38b8fb955b7a61f88ecf20}

\begin{CompactList}\small\item\em Runs the approximate inference algorithm. \item\end{CompactList}\item 
virtual double \hyperlink{classdai_1_1HAK_1eb4c5a84c30f7c8db8b8f4c0c54f567}{maxDiff} () const 
\item 
virtual size\_\-t \hyperlink{classdai_1_1HAK_27599fc844670e503786ac5d485713c5}{Iterations} () const 
\end{CompactItemize}
\end{Indent}
\begin{Indent}{\bf Additional interface specific for HAK}\par
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1HAK_fd59710aeec6f9e3d590f842a0c32e5a}{
\hyperlink{classdai_1_1TFactor}{Factor} \& \textbf{muab} (size\_\-t alpha, size\_\-t \_\-beta)}
\label{classdai_1_1HAK_fd59710aeec6f9e3d590f842a0c32e5a}

\item 
\hypertarget{classdai_1_1HAK_225f9820b16c8884254e93674ac323f5}{
\hyperlink{classdai_1_1TFactor}{Factor} \& \textbf{muba} (size\_\-t alpha, size\_\-t \_\-beta)}
\label{classdai_1_1HAK_225f9820b16c8884254e93674ac323f5}

\item 
\hypertarget{classdai_1_1HAK_d80f083bd4c25018f7d8879a4dd4f9b9}{
const \hyperlink{classdai_1_1TFactor}{Factor} \& \textbf{Qa} (size\_\-t alpha) const }
\label{classdai_1_1HAK_d80f083bd4c25018f7d8879a4dd4f9b9}

\item 
\hypertarget{classdai_1_1HAK_75d51d0575991d4a103e33c998b422bb}{
const \hyperlink{classdai_1_1TFactor}{Factor} \& \textbf{Qb} (size\_\-t beta) const }
\label{classdai_1_1HAK_75d51d0575991d4a103e33c998b422bb}

\item 
\hypertarget{classdai_1_1HAK_46eb952d6cd80454d0d945d30c43690a}{
double \textbf{doGBP} ()}
\label{classdai_1_1HAK_46eb952d6cd80454d0d945d30c43690a}

\item 
\hypertarget{classdai_1_1HAK_f054e00f630f11c47fea098b3e5dda64}{
double \textbf{doDoubleLoop} ()}
\label{classdai_1_1HAK_f054e00f630f11c47fea098b3e5dda64}

\end{CompactItemize}
\end{Indent}
\subsection*{Public Attributes}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1HAK_79379f7d6a7b5d8918101eb6f02c3348}{
struct \hyperlink{structdai_1_1HAK_1_1Properties}{dai::HAK::Properties} \hyperlink{classdai_1_1HAK_79379f7d6a7b5d8918101eb6f02c3348}{props}}
\label{classdai_1_1HAK_79379f7d6a7b5d8918101eb6f02c3348}

\begin{CompactList}\small\item\em Parameters of this inference algorithm. \item\end{CompactList}\end{CompactItemize}
\subsection*{Static Public Attributes}
\begin{CompactItemize}
\item 
\hypertarget{classdai_1_1HAK_a729615f0c298f6e7e2b84ed0e3fb2e4}{
static const char $\ast$ \hyperlink{classdai_1_1HAK_a729615f0c298f6e7e2b84ed0e3fb2e4}{Name} = \char`\"{}HAK\char`\"{}}
\label{classdai_1_1HAK_a729615f0c298f6e7e2b84ed0e3fb2e4}

\begin{CompactList}\small\item\em Name of this inference algorithm. \item\end{CompactList}\end{CompactItemize}
\subsection*{Classes}
\begin{CompactItemize}
\item 
struct \hyperlink{structdai_1_1HAK_1_1Properties}{Properties}
\begin{CompactList}\small\item\em Parameters of this inference algorithm. \item\end{CompactList}\end{CompactItemize}


\subsection{Member Function Documentation}
\hypertarget{classdai_1_1HAK_b30055f32f2c9a84d76668ff74606697}{
\index{dai::HAK@{dai::HAK}!init@{init}}
\index{init@{init}!dai::HAK@{dai::HAK}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}void dai::HAK::init ()\hspace{0.3cm}{\tt  \mbox{[}virtual\mbox{]}}}}
\label{classdai_1_1HAK_b30055f32f2c9a84d76668ff74606697}


Initializes all data structures of the approximate inference algorithm. 

This method should be called at least once before \hyperlink{classdai_1_1HAK_0f9bade51e38b8fb955b7a61f88ecf20}{run()} is called 

Implements \hyperlink{classdai_1_1InfAlg_99dd53d1aaccf09a4b977a49a983cc85}{dai::InfAlg}.\hypertarget{classdai_1_1HAK_53cd01bc1e70859d556ac71b5e25a192}{
\index{dai::HAK@{dai::HAK}!init@{init}}
\index{init@{init}!dai::HAK@{dai::HAK}}
\subsubsection[init]{\setlength{\rightskip}{0pt plus 5cm}void dai::HAK::init (const {\bf VarSet} \& {\em ns})\hspace{0.3cm}{\tt  \mbox{[}virtual\mbox{]}}}}
\label{classdai_1_1HAK_53cd01bc1e70859d556ac71b5e25a192}


Initializes all data structures corresponding to some set of variables. 

This method can be used to do a partial initialization after a part of the factor graph has changed. Instead of initializing all data structures, it only initializes those involving the variables in ns. 

Implements \hyperlink{classdai_1_1InfAlg_7d006e89e01a2f3e2a40b0f7f6e37ae5}{dai::InfAlg}.\hypertarget{classdai_1_1HAK_1eb4c5a84c30f7c8db8b8f4c0c54f567}{
\index{dai::HAK@{dai::HAK}!maxDiff@{maxDiff}}
\index{maxDiff@{maxDiff}!dai::HAK@{dai::HAK}}
\subsubsection[maxDiff]{\setlength{\rightskip}{0pt plus 5cm}virtual double dai::HAK::maxDiff () const\hspace{0.3cm}{\tt  \mbox{[}inline, virtual\mbox{]}}}}
\label{classdai_1_1HAK_1eb4c5a84c30f7c8db8b8f4c0c54f567}


Return maximum difference between single node beliefs in the last pass \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implements \hyperlink{classdai_1_1InfAlg_7e1ca7da15403d5d2af4a855186c0b46}{dai::InfAlg}.\hypertarget{classdai_1_1HAK_27599fc844670e503786ac5d485713c5}{
\index{dai::HAK@{dai::HAK}!Iterations@{Iterations}}
\index{Iterations@{Iterations}!dai::HAK@{dai::HAK}}
\subsubsection[Iterations]{\setlength{\rightskip}{0pt plus 5cm}virtual size\_\-t dai::HAK::Iterations () const\hspace{0.3cm}{\tt  \mbox{[}inline, virtual\mbox{]}}}}
\label{classdai_1_1HAK_27599fc844670e503786ac5d485713c5}


Return number of passes over the factorgraph \begin{Desc}
\item[Exceptions:]
\begin{description}
\item[{\em \hyperlink{classdai_1_1Exception}{Exception}}]if not implemented/supported \end{description}
\end{Desc}


Implements \hyperlink{classdai_1_1InfAlg_7a93807863cc0a2025c1a78bdf1e14b8}{dai::InfAlg}.

The documentation for this class was generated from the following files:\begin{CompactItemize}
\item 
include/dai/\hyperlink{hak_8h}{hak.h}\item 
src/hak.cpp\end{CompactItemize}

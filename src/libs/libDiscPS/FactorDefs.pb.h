// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FactorDefs.proto

#ifndef PROTOBUF_FactorDefs_2eproto__INCLUDED
#define PROTOBUF_FactorDefs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FactorDefs_2eproto();
void protobuf_AssignDesc_FactorDefs_2eproto();
void protobuf_ShutdownFile_FactorDefs_2eproto();

class RepulsiveFactor;
class AttractiveFactor;
class FactorDefs;

// ===================================================================

class RepulsiveFactor : public ::google::protobuf::Message {
 public:
  RepulsiveFactor();
  virtual ~RepulsiveFactor();
  
  RepulsiveFactor(const RepulsiveFactor& from);
  
  inline RepulsiveFactor& operator=(const RepulsiveFactor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RepulsiveFactor& default_instance();
  
  void Swap(RepulsiveFactor* other);
  
  // implements Message ----------------------------------------------
  
  RepulsiveFactor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepulsiveFactor& from);
  void MergeFrom(const RepulsiveFactor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pidx1 = 1;
  inline bool has_pidx1() const;
  inline void clear_pidx1();
  static const int kPidx1FieldNumber = 1;
  inline ::google::protobuf::int32 pidx1() const;
  inline void set_pidx1(::google::protobuf::int32 value);
  
  // required int32 pidx2 = 2;
  inline bool has_pidx2() const;
  inline void clear_pidx2();
  static const int kPidx2FieldNumber = 2;
  inline ::google::protobuf::int32 pidx2() const;
  inline void set_pidx2(::google::protobuf::int32 value);
  
  // optional double min_relative_area = 3 [default = 0.2];
  inline bool has_min_relative_area() const;
  inline void clear_min_relative_area();
  static const int kMinRelativeAreaFieldNumber = 3;
  inline double min_relative_area() const;
  inline void set_min_relative_area(double value);
  
  // optional double alpha = 4 [default = 1.2];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  inline double alpha() const;
  inline void set_alpha(double value);
  
  // @@protoc_insertion_point(class_scope:RepulsiveFactor)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 pidx1_;
  ::google::protobuf::int32 pidx2_;
  double min_relative_area_;
  double alpha_;
  friend void  protobuf_AddDesc_FactorDefs_2eproto();
  friend void protobuf_AssignDesc_FactorDefs_2eproto();
  friend void protobuf_ShutdownFile_FactorDefs_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RepulsiveFactor* default_instance_;
};
// -------------------------------------------------------------------

class AttractiveFactor : public ::google::protobuf::Message {
 public:
  AttractiveFactor();
  virtual ~AttractiveFactor();
  
  AttractiveFactor(const AttractiveFactor& from);
  
  inline AttractiveFactor& operator=(const AttractiveFactor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttractiveFactor& default_instance();
  
  void Swap(AttractiveFactor* other);
  
  // implements Message ----------------------------------------------
  
  AttractiveFactor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttractiveFactor& from);
  void MergeFrom(const AttractiveFactor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 didx1 = 1;
  inline bool has_didx1() const;
  inline void clear_didx1();
  static const int kDidx1FieldNumber = 1;
  inline ::google::protobuf::int32 didx1() const;
  inline void set_didx1(::google::protobuf::int32 value);
  
  // required int32 pidx1 = 2;
  inline bool has_pidx1() const;
  inline void clear_pidx1();
  static const int kPidx1FieldNumber = 2;
  inline ::google::protobuf::int32 pidx1() const;
  inline void set_pidx1(::google::protobuf::int32 value);
  
  // required int32 didx2 = 3;
  inline bool has_didx2() const;
  inline void clear_didx2();
  static const int kDidx2FieldNumber = 3;
  inline ::google::protobuf::int32 didx2() const;
  inline void set_didx2(::google::protobuf::int32 value);
  
  // required int32 pidx2 = 4;
  inline bool has_pidx2() const;
  inline void clear_pidx2();
  static const int kPidx2FieldNumber = 4;
  inline ::google::protobuf::int32 pidx2() const;
  inline void set_pidx2(::google::protobuf::int32 value);
  
  // optional double mu_x = 5 [default = 0];
  inline bool has_mu_x() const;
  inline void clear_mu_x();
  static const int kMuXFieldNumber = 5;
  inline double mu_x() const;
  inline void set_mu_x(double value);
  
  // optional double mu_y = 6 [default = 0];
  inline bool has_mu_y() const;
  inline void clear_mu_y();
  static const int kMuYFieldNumber = 6;
  inline double mu_y() const;
  inline void set_mu_y(double value);
  
  // optional double sigma_x = 7 [default = 5];
  inline bool has_sigma_x() const;
  inline void clear_sigma_x();
  static const int kSigmaXFieldNumber = 7;
  inline double sigma_x() const;
  inline void set_sigma_x(double value);
  
  // optional double sigma_y = 8 [default = 5];
  inline bool has_sigma_y() const;
  inline void clear_sigma_y();
  static const int kSigmaYFieldNumber = 8;
  inline double sigma_y() const;
  inline void set_sigma_y(double value);
  
  // @@protoc_insertion_point(class_scope:AttractiveFactor)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 didx1_;
  ::google::protobuf::int32 pidx1_;
  ::google::protobuf::int32 didx2_;
  ::google::protobuf::int32 pidx2_;
  double mu_x_;
  double mu_y_;
  double sigma_x_;
  double sigma_y_;
  friend void  protobuf_AddDesc_FactorDefs_2eproto();
  friend void protobuf_AssignDesc_FactorDefs_2eproto();
  friend void protobuf_ShutdownFile_FactorDefs_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AttractiveFactor* default_instance_;
};
// -------------------------------------------------------------------

class FactorDefs : public ::google::protobuf::Message {
 public:
  FactorDefs();
  virtual ~FactorDefs();
  
  FactorDefs(const FactorDefs& from);
  
  inline FactorDefs& operator=(const FactorDefs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FactorDefs& default_instance();
  
  void Swap(FactorDefs* other);
  
  // implements Message ----------------------------------------------
  
  FactorDefs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactorDefs& from);
  void MergeFrom(const FactorDefs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RepulsiveFactor repulsive_factor = 4;
  inline int repulsive_factor_size() const;
  inline void clear_repulsive_factor();
  static const int kRepulsiveFactorFieldNumber = 4;
  inline const ::RepulsiveFactor& repulsive_factor(int index) const;
  inline ::RepulsiveFactor* mutable_repulsive_factor(int index);
  inline ::RepulsiveFactor* add_repulsive_factor();
  inline const ::google::protobuf::RepeatedPtrField< ::RepulsiveFactor >&
      repulsive_factor() const;
  inline ::google::protobuf::RepeatedPtrField< ::RepulsiveFactor >*
      mutable_repulsive_factor();
  
  // repeated .AttractiveFactor attractive_factor = 5;
  inline int attractive_factor_size() const;
  inline void clear_attractive_factor();
  static const int kAttractiveFactorFieldNumber = 5;
  inline const ::AttractiveFactor& attractive_factor(int index) const;
  inline ::AttractiveFactor* mutable_attractive_factor(int index);
  inline ::AttractiveFactor* add_attractive_factor();
  inline const ::google::protobuf::RepeatedPtrField< ::AttractiveFactor >&
      attractive_factor() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttractiveFactor >*
      mutable_attractive_factor();
  
  // @@protoc_insertion_point(class_scope:FactorDefs)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::RepulsiveFactor > repulsive_factor_;
  ::google::protobuf::RepeatedPtrField< ::AttractiveFactor > attractive_factor_;
  friend void  protobuf_AddDesc_FactorDefs_2eproto();
  friend void protobuf_AssignDesc_FactorDefs_2eproto();
  friend void protobuf_ShutdownFile_FactorDefs_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FactorDefs* default_instance_;
};
// ===================================================================


// ===================================================================

// RepulsiveFactor

// required int32 pidx1 = 1;
inline bool RepulsiveFactor::has_pidx1() const {
  return _has_bit(0);
}
inline void RepulsiveFactor::clear_pidx1() {
  pidx1_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RepulsiveFactor::pidx1() const {
  return pidx1_;
}
inline void RepulsiveFactor::set_pidx1(::google::protobuf::int32 value) {
  _set_bit(0);
  pidx1_ = value;
}

// required int32 pidx2 = 2;
inline bool RepulsiveFactor::has_pidx2() const {
  return _has_bit(1);
}
inline void RepulsiveFactor::clear_pidx2() {
  pidx2_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RepulsiveFactor::pidx2() const {
  return pidx2_;
}
inline void RepulsiveFactor::set_pidx2(::google::protobuf::int32 value) {
  _set_bit(1);
  pidx2_ = value;
}

// optional double min_relative_area = 3 [default = 0.2];
inline bool RepulsiveFactor::has_min_relative_area() const {
  return _has_bit(2);
}
inline void RepulsiveFactor::clear_min_relative_area() {
  min_relative_area_ = 0.2;
  _clear_bit(2);
}
inline double RepulsiveFactor::min_relative_area() const {
  return min_relative_area_;
}
inline void RepulsiveFactor::set_min_relative_area(double value) {
  _set_bit(2);
  min_relative_area_ = value;
}

// optional double alpha = 4 [default = 1.2];
inline bool RepulsiveFactor::has_alpha() const {
  return _has_bit(3);
}
inline void RepulsiveFactor::clear_alpha() {
  alpha_ = 1.2;
  _clear_bit(3);
}
inline double RepulsiveFactor::alpha() const {
  return alpha_;
}
inline void RepulsiveFactor::set_alpha(double value) {
  _set_bit(3);
  alpha_ = value;
}

// -------------------------------------------------------------------

// AttractiveFactor

// required int32 didx1 = 1;
inline bool AttractiveFactor::has_didx1() const {
  return _has_bit(0);
}
inline void AttractiveFactor::clear_didx1() {
  didx1_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 AttractiveFactor::didx1() const {
  return didx1_;
}
inline void AttractiveFactor::set_didx1(::google::protobuf::int32 value) {
  _set_bit(0);
  didx1_ = value;
}

// required int32 pidx1 = 2;
inline bool AttractiveFactor::has_pidx1() const {
  return _has_bit(1);
}
inline void AttractiveFactor::clear_pidx1() {
  pidx1_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 AttractiveFactor::pidx1() const {
  return pidx1_;
}
inline void AttractiveFactor::set_pidx1(::google::protobuf::int32 value) {
  _set_bit(1);
  pidx1_ = value;
}

// required int32 didx2 = 3;
inline bool AttractiveFactor::has_didx2() const {
  return _has_bit(2);
}
inline void AttractiveFactor::clear_didx2() {
  didx2_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 AttractiveFactor::didx2() const {
  return didx2_;
}
inline void AttractiveFactor::set_didx2(::google::protobuf::int32 value) {
  _set_bit(2);
  didx2_ = value;
}

// required int32 pidx2 = 4;
inline bool AttractiveFactor::has_pidx2() const {
  return _has_bit(3);
}
inline void AttractiveFactor::clear_pidx2() {
  pidx2_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 AttractiveFactor::pidx2() const {
  return pidx2_;
}
inline void AttractiveFactor::set_pidx2(::google::protobuf::int32 value) {
  _set_bit(3);
  pidx2_ = value;
}

// optional double mu_x = 5 [default = 0];
inline bool AttractiveFactor::has_mu_x() const {
  return _has_bit(4);
}
inline void AttractiveFactor::clear_mu_x() {
  mu_x_ = 0;
  _clear_bit(4);
}
inline double AttractiveFactor::mu_x() const {
  return mu_x_;
}
inline void AttractiveFactor::set_mu_x(double value) {
  _set_bit(4);
  mu_x_ = value;
}

// optional double mu_y = 6 [default = 0];
inline bool AttractiveFactor::has_mu_y() const {
  return _has_bit(5);
}
inline void AttractiveFactor::clear_mu_y() {
  mu_y_ = 0;
  _clear_bit(5);
}
inline double AttractiveFactor::mu_y() const {
  return mu_y_;
}
inline void AttractiveFactor::set_mu_y(double value) {
  _set_bit(5);
  mu_y_ = value;
}

// optional double sigma_x = 7 [default = 5];
inline bool AttractiveFactor::has_sigma_x() const {
  return _has_bit(6);
}
inline void AttractiveFactor::clear_sigma_x() {
  sigma_x_ = 5;
  _clear_bit(6);
}
inline double AttractiveFactor::sigma_x() const {
  return sigma_x_;
}
inline void AttractiveFactor::set_sigma_x(double value) {
  _set_bit(6);
  sigma_x_ = value;
}

// optional double sigma_y = 8 [default = 5];
inline bool AttractiveFactor::has_sigma_y() const {
  return _has_bit(7);
}
inline void AttractiveFactor::clear_sigma_y() {
  sigma_y_ = 5;
  _clear_bit(7);
}
inline double AttractiveFactor::sigma_y() const {
  return sigma_y_;
}
inline void AttractiveFactor::set_sigma_y(double value) {
  _set_bit(7);
  sigma_y_ = value;
}

// -------------------------------------------------------------------

// FactorDefs

// repeated .RepulsiveFactor repulsive_factor = 4;
inline int FactorDefs::repulsive_factor_size() const {
  return repulsive_factor_.size();
}
inline void FactorDefs::clear_repulsive_factor() {
  repulsive_factor_.Clear();
}
inline const ::RepulsiveFactor& FactorDefs::repulsive_factor(int index) const {
  return repulsive_factor_.Get(index);
}
inline ::RepulsiveFactor* FactorDefs::mutable_repulsive_factor(int index) {
  return repulsive_factor_.Mutable(index);
}
inline ::RepulsiveFactor* FactorDefs::add_repulsive_factor() {
  return repulsive_factor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RepulsiveFactor >&
FactorDefs::repulsive_factor() const {
  return repulsive_factor_;
}
inline ::google::protobuf::RepeatedPtrField< ::RepulsiveFactor >*
FactorDefs::mutable_repulsive_factor() {
  return &repulsive_factor_;
}

// repeated .AttractiveFactor attractive_factor = 5;
inline int FactorDefs::attractive_factor_size() const {
  return attractive_factor_.size();
}
inline void FactorDefs::clear_attractive_factor() {
  attractive_factor_.Clear();
}
inline const ::AttractiveFactor& FactorDefs::attractive_factor(int index) const {
  return attractive_factor_.Get(index);
}
inline ::AttractiveFactor* FactorDefs::mutable_attractive_factor(int index) {
  return attractive_factor_.Mutable(index);
}
inline ::AttractiveFactor* FactorDefs::add_attractive_factor() {
  return attractive_factor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttractiveFactor >&
FactorDefs::attractive_factor() const {
  return attractive_factor_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttractiveFactor >*
FactorDefs::mutable_attractive_factor() {
  return &attractive_factor_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FactorDefs_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FactorDefs.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RepulsiveFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepulsiveFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttractiveFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttractiveFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactorDefs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactorDefs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FactorDefs_2eproto() {
  protobuf_AddDesc_FactorDefs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FactorDefs.proto");
  GOOGLE_CHECK(file != NULL);
  RepulsiveFactor_descriptor_ = file->message_type(0);
  static const int RepulsiveFactor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, pidx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, pidx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, min_relative_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, alpha_),
  };
  RepulsiveFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepulsiveFactor_descriptor_,
      RepulsiveFactor::default_instance_,
      RepulsiveFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepulsiveFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepulsiveFactor));
  AttractiveFactor_descriptor_ = file->message_type(1);
  static const int AttractiveFactor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, didx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, pidx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, didx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, pidx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, mu_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, mu_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, sigma_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, sigma_y_),
  };
  AttractiveFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttractiveFactor_descriptor_,
      AttractiveFactor::default_instance_,
      AttractiveFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttractiveFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttractiveFactor));
  FactorDefs_descriptor_ = file->message_type(2);
  static const int FactorDefs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorDefs, repulsive_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorDefs, attractive_factor_),
  };
  FactorDefs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactorDefs_descriptor_,
      FactorDefs::default_instance_,
      FactorDefs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorDefs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorDefs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactorDefs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FactorDefs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepulsiveFactor_descriptor_, &RepulsiveFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttractiveFactor_descriptor_, &AttractiveFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactorDefs_descriptor_, &FactorDefs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FactorDefs_2eproto() {
  delete RepulsiveFactor::default_instance_;
  delete RepulsiveFactor_reflection_;
  delete AttractiveFactor::default_instance_;
  delete AttractiveFactor_reflection_;
  delete FactorDefs::default_instance_;
  delete FactorDefs_reflection_;
}

void protobuf_AddDesc_FactorDefs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FactorDefs.proto\"c\n\017RepulsiveFactor\022\r\n"
    "\005pidx1\030\001 \002(\005\022\r\n\005pidx2\030\002 \002(\005\022\036\n\021min_relat"
    "ive_area\030\003 \001(\001:\0030.2\022\022\n\005alpha\030\004 \001(\001:\0031.2\""
    "\230\001\n\020AttractiveFactor\022\r\n\005didx1\030\001 \002(\005\022\r\n\005p"
    "idx1\030\002 \002(\005\022\r\n\005didx2\030\003 \002(\005\022\r\n\005pidx2\030\004 \002(\005"
    "\022\017\n\004mu_x\030\005 \001(\001:\0010\022\017\n\004mu_y\030\006 \001(\001:\0010\022\022\n\007si"
    "gma_x\030\007 \001(\001:\0015\022\022\n\007sigma_y\030\010 \001(\001:\0015\"f\n\nFa"
    "ctorDefs\022*\n\020repulsive_factor\030\004 \003(\0132\020.Rep"
    "ulsiveFactor\022,\n\021attractive_factor\030\005 \003(\0132"
    "\021.AttractiveFactor", 378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FactorDefs.proto", &protobuf_RegisterTypes);
  RepulsiveFactor::default_instance_ = new RepulsiveFactor();
  AttractiveFactor::default_instance_ = new AttractiveFactor();
  FactorDefs::default_instance_ = new FactorDefs();
  RepulsiveFactor::default_instance_->InitAsDefaultInstance();
  AttractiveFactor::default_instance_->InitAsDefaultInstance();
  FactorDefs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FactorDefs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FactorDefs_2eproto {
  StaticDescriptorInitializer_FactorDefs_2eproto() {
    protobuf_AddDesc_FactorDefs_2eproto();
  }
} static_descriptor_initializer_FactorDefs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RepulsiveFactor::kPidx1FieldNumber;
const int RepulsiveFactor::kPidx2FieldNumber;
const int RepulsiveFactor::kMinRelativeAreaFieldNumber;
const int RepulsiveFactor::kAlphaFieldNumber;
#endif  // !_MSC_VER

RepulsiveFactor::RepulsiveFactor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RepulsiveFactor::InitAsDefaultInstance() {
}

RepulsiveFactor::RepulsiveFactor(const RepulsiveFactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RepulsiveFactor::SharedCtor() {
  _cached_size_ = 0;
  pidx1_ = 0;
  pidx2_ = 0;
  min_relative_area_ = 0.2;
  alpha_ = 1.2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepulsiveFactor::~RepulsiveFactor() {
  SharedDtor();
}

void RepulsiveFactor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepulsiveFactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepulsiveFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepulsiveFactor_descriptor_;
}

const RepulsiveFactor& RepulsiveFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactorDefs_2eproto();  return *default_instance_;
}

RepulsiveFactor* RepulsiveFactor::default_instance_ = NULL;

RepulsiveFactor* RepulsiveFactor::New() const {
  return new RepulsiveFactor;
}

void RepulsiveFactor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pidx1_ = 0;
    pidx2_ = 0;
    min_relative_area_ = 0.2;
    alpha_ = 1.2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepulsiveFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pidx1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pidx1_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pidx2;
        break;
      }
      
      // required int32 pidx2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pidx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pidx2_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_min_relative_area;
        break;
      }
      
      // optional double min_relative_area = 3 [default = 0.2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_relative_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_relative_area_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_alpha;
        break;
      }
      
      // optional double alpha = 4 [default = 1.2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RepulsiveFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pidx1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pidx1(), output);
  }
  
  // required int32 pidx2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pidx2(), output);
  }
  
  // optional double min_relative_area = 3 [default = 0.2];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_relative_area(), output);
  }
  
  // optional double alpha = 4 [default = 1.2];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alpha(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RepulsiveFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pidx1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pidx1(), target);
  }
  
  // required int32 pidx2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pidx2(), target);
  }
  
  // optional double min_relative_area = 3 [default = 0.2];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_relative_area(), target);
  }
  
  // optional double alpha = 4 [default = 1.2];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alpha(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RepulsiveFactor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pidx1 = 1;
    if (has_pidx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pidx1());
    }
    
    // required int32 pidx2 = 2;
    if (has_pidx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pidx2());
    }
    
    // optional double min_relative_area = 3 [default = 0.2];
    if (has_min_relative_area()) {
      total_size += 1 + 8;
    }
    
    // optional double alpha = 4 [default = 1.2];
    if (has_alpha()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepulsiveFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepulsiveFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepulsiveFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepulsiveFactor::MergeFrom(const RepulsiveFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pidx1(from.pidx1());
    }
    if (from._has_bit(1)) {
      set_pidx2(from.pidx2());
    }
    if (from._has_bit(2)) {
      set_min_relative_area(from.min_relative_area());
    }
    if (from._has_bit(3)) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepulsiveFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepulsiveFactor::CopyFrom(const RepulsiveFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepulsiveFactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RepulsiveFactor::Swap(RepulsiveFactor* other) {
  if (other != this) {
    std::swap(pidx1_, other->pidx1_);
    std::swap(pidx2_, other->pidx2_);
    std::swap(min_relative_area_, other->min_relative_area_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepulsiveFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepulsiveFactor_descriptor_;
  metadata.reflection = RepulsiveFactor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttractiveFactor::kDidx1FieldNumber;
const int AttractiveFactor::kPidx1FieldNumber;
const int AttractiveFactor::kDidx2FieldNumber;
const int AttractiveFactor::kPidx2FieldNumber;
const int AttractiveFactor::kMuXFieldNumber;
const int AttractiveFactor::kMuYFieldNumber;
const int AttractiveFactor::kSigmaXFieldNumber;
const int AttractiveFactor::kSigmaYFieldNumber;
#endif  // !_MSC_VER

AttractiveFactor::AttractiveFactor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttractiveFactor::InitAsDefaultInstance() {
}

AttractiveFactor::AttractiveFactor(const AttractiveFactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttractiveFactor::SharedCtor() {
  _cached_size_ = 0;
  didx1_ = 0;
  pidx1_ = 0;
  didx2_ = 0;
  pidx2_ = 0;
  mu_x_ = 0;
  mu_y_ = 0;
  sigma_x_ = 5;
  sigma_y_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttractiveFactor::~AttractiveFactor() {
  SharedDtor();
}

void AttractiveFactor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttractiveFactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttractiveFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttractiveFactor_descriptor_;
}

const AttractiveFactor& AttractiveFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactorDefs_2eproto();  return *default_instance_;
}

AttractiveFactor* AttractiveFactor::default_instance_ = NULL;

AttractiveFactor* AttractiveFactor::New() const {
  return new AttractiveFactor;
}

void AttractiveFactor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    didx1_ = 0;
    pidx1_ = 0;
    didx2_ = 0;
    pidx2_ = 0;
    mu_x_ = 0;
    mu_y_ = 0;
    sigma_x_ = 5;
    sigma_y_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttractiveFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 didx1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &didx1_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pidx1;
        break;
      }
      
      // required int32 pidx1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pidx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pidx1_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_didx2;
        break;
      }
      
      // required int32 didx2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_didx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &didx2_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pidx2;
        break;
      }
      
      // required int32 pidx2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pidx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pidx2_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_mu_x;
        break;
      }
      
      // optional double mu_x = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mu_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_x_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_mu_y;
        break;
      }
      
      // optional double mu_y = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mu_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_sigma_x;
        break;
      }
      
      // optional double sigma_x = 7 [default = 5];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sigma_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_x_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_sigma_y;
        break;
      }
      
      // optional double sigma_y = 8 [default = 5];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sigma_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_y_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttractiveFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 didx1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->didx1(), output);
  }
  
  // required int32 pidx1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pidx1(), output);
  }
  
  // required int32 didx2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->didx2(), output);
  }
  
  // required int32 pidx2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pidx2(), output);
  }
  
  // optional double mu_x = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->mu_x(), output);
  }
  
  // optional double mu_y = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mu_y(), output);
  }
  
  // optional double sigma_x = 7 [default = 5];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sigma_x(), output);
  }
  
  // optional double sigma_y = 8 [default = 5];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sigma_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttractiveFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 didx1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->didx1(), target);
  }
  
  // required int32 pidx1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pidx1(), target);
  }
  
  // required int32 didx2 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->didx2(), target);
  }
  
  // required int32 pidx2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pidx2(), target);
  }
  
  // optional double mu_x = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->mu_x(), target);
  }
  
  // optional double mu_y = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mu_y(), target);
  }
  
  // optional double sigma_x = 7 [default = 5];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sigma_x(), target);
  }
  
  // optional double sigma_y = 8 [default = 5];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sigma_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttractiveFactor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 didx1 = 1;
    if (has_didx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->didx1());
    }
    
    // required int32 pidx1 = 2;
    if (has_pidx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pidx1());
    }
    
    // required int32 didx2 = 3;
    if (has_didx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->didx2());
    }
    
    // required int32 pidx2 = 4;
    if (has_pidx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pidx2());
    }
    
    // optional double mu_x = 5 [default = 0];
    if (has_mu_x()) {
      total_size += 1 + 8;
    }
    
    // optional double mu_y = 6 [default = 0];
    if (has_mu_y()) {
      total_size += 1 + 8;
    }
    
    // optional double sigma_x = 7 [default = 5];
    if (has_sigma_x()) {
      total_size += 1 + 8;
    }
    
    // optional double sigma_y = 8 [default = 5];
    if (has_sigma_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttractiveFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttractiveFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttractiveFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttractiveFactor::MergeFrom(const AttractiveFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_didx1(from.didx1());
    }
    if (from._has_bit(1)) {
      set_pidx1(from.pidx1());
    }
    if (from._has_bit(2)) {
      set_didx2(from.didx2());
    }
    if (from._has_bit(3)) {
      set_pidx2(from.pidx2());
    }
    if (from._has_bit(4)) {
      set_mu_x(from.mu_x());
    }
    if (from._has_bit(5)) {
      set_mu_y(from.mu_y());
    }
    if (from._has_bit(6)) {
      set_sigma_x(from.sigma_x());
    }
    if (from._has_bit(7)) {
      set_sigma_y(from.sigma_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttractiveFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttractiveFactor::CopyFrom(const AttractiveFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttractiveFactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void AttractiveFactor::Swap(AttractiveFactor* other) {
  if (other != this) {
    std::swap(didx1_, other->didx1_);
    std::swap(pidx1_, other->pidx1_);
    std::swap(didx2_, other->didx2_);
    std::swap(pidx2_, other->pidx2_);
    std::swap(mu_x_, other->mu_x_);
    std::swap(mu_y_, other->mu_y_);
    std::swap(sigma_x_, other->sigma_x_);
    std::swap(sigma_y_, other->sigma_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttractiveFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttractiveFactor_descriptor_;
  metadata.reflection = AttractiveFactor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactorDefs::kRepulsiveFactorFieldNumber;
const int FactorDefs::kAttractiveFactorFieldNumber;
#endif  // !_MSC_VER

FactorDefs::FactorDefs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactorDefs::InitAsDefaultInstance() {
}

FactorDefs::FactorDefs(const FactorDefs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactorDefs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactorDefs::~FactorDefs() {
  SharedDtor();
}

void FactorDefs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactorDefs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactorDefs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactorDefs_descriptor_;
}

const FactorDefs& FactorDefs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactorDefs_2eproto();  return *default_instance_;
}

FactorDefs* FactorDefs::default_instance_ = NULL;

FactorDefs* FactorDefs::New() const {
  return new FactorDefs;
}

void FactorDefs::Clear() {
  repulsive_factor_.Clear();
  attractive_factor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactorDefs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RepulsiveFactor repulsive_factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repulsive_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repulsive_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_repulsive_factor;
        if (input->ExpectTag(42)) goto parse_attractive_factor;
        break;
      }
      
      // repeated .AttractiveFactor attractive_factor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attractive_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attractive_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attractive_factor;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactorDefs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RepulsiveFactor repulsive_factor = 4;
  for (int i = 0; i < this->repulsive_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->repulsive_factor(i), output);
  }
  
  // repeated .AttractiveFactor attractive_factor = 5;
  for (int i = 0; i < this->attractive_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attractive_factor(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactorDefs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RepulsiveFactor repulsive_factor = 4;
  for (int i = 0; i < this->repulsive_factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->repulsive_factor(i), target);
  }
  
  // repeated .AttractiveFactor attractive_factor = 5;
  for (int i = 0; i < this->attractive_factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attractive_factor(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactorDefs::ByteSize() const {
  int total_size = 0;
  
  // repeated .RepulsiveFactor repulsive_factor = 4;
  total_size += 1 * this->repulsive_factor_size();
  for (int i = 0; i < this->repulsive_factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repulsive_factor(i));
  }
  
  // repeated .AttractiveFactor attractive_factor = 5;
  total_size += 1 * this->attractive_factor_size();
  for (int i = 0; i < this->attractive_factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attractive_factor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactorDefs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactorDefs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactorDefs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactorDefs::MergeFrom(const FactorDefs& from) {
  GOOGLE_CHECK_NE(&from, this);
  repulsive_factor_.MergeFrom(from.repulsive_factor_);
  attractive_factor_.MergeFrom(from.attractive_factor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactorDefs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactorDefs::CopyFrom(const FactorDefs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactorDefs::IsInitialized() const {
  
  for (int i = 0; i < repulsive_factor_size(); i++) {
    if (!this->repulsive_factor(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attractive_factor_size(); i++) {
    if (!this->attractive_factor(i).IsInitialized()) return false;
  }
  return true;
}

void FactorDefs::Swap(FactorDefs* other) {
  if (other != this) {
    repulsive_factor_.Swap(&other->repulsive_factor_);
    attractive_factor_.Swap(&other->attractive_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactorDefs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactorDefs_descriptor_;
  metadata.reflection = FactorDefs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

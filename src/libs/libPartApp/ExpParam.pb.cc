// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExpParam.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExpParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExpParam_2eproto() {
  protobuf_AddDesc_ExpParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExpParam.proto");
  GOOGLE_CHECK(file != NULL);
  ExpParam_descriptor_ = file->message_type(0);
  static const int ExpParam_offsets_[90] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, train_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, validation_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, test_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, neg_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, bootstrap_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, train_dataset_reshaped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_subdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, class_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, comp_class_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scoregrid_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scoregrid_train_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, normalize_kmeans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, ndim_joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, poselet_strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, vis_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, vp_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, bootstrap_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_best_part_det_vis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_clus_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_unary_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_unary_pos_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_unary_rot_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_unary_rot_comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_data_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_data_test_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, poselet_resp_val_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, poselet_resp_test_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, spatial_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dpm_torso_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, force_recompute_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, torso_pos_prior_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, torso_det_test_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, torso_det_train_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, poselet_rot_strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, rootidx_det_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_gt_torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_dpm_torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pred_unary_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_torso_pos_prior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_dpm_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dpm_head_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, test_dpm_unary_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dpm_unary_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_dpm_unary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, do_dpm_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, use_pairwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, save_part_marginals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dpm_model_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, unary_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, interpolate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, pos_dpm_torso_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, test_dpm_torso_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, torso_hyp_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_marginals_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_conf_eval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_conf_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, abc_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_scale_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_rotation_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, flip_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, object_height_width_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, compute_part_marginals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_pose_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, is_multicomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, mix_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, strip_border_detections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, save_image_scoregrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_num_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_factors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_samples_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_bp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_samples_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_bbox_prior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_bbox_prior_annopoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, dai_multiperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, detection_masks_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, roi_annolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, roi_extend_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, roi_extend_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, roi_save_num_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, compute_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, reweight_inference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, save_root_marginal_),
  };
  ExpParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpParam_descriptor_,
      ExpParam::default_instance_,
      ExpParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExpParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpParam_descriptor_, &ExpParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExpParam_2eproto() {
  delete ExpParam::default_instance_;
  delete ExpParam_reflection_;
}

void protobuf_AddDesc_ExpParam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ExpParam.proto\"\266\024\n\010ExpParam\022\025\n\rtrain_d"
    "ataset\030\001 \003(\t\022\032\n\022validation_dataset\030\010 \003(\t"
    "\022\024\n\014test_dataset\030\002 \003(\t\022\023\n\013neg_dataset\0303 "
    "\003(\t\022\031\n\021bootstrap_dataset\030V \003(\t\022\036\n\026train_"
    "dataset_reshaped\030\' \003(\t\022\017\n\007log_dir\030\003 \001(\t\022"
    "\022\n\nlog_subdir\030\007 \001(\t\022\021\n\tclass_dir\030\004 \001(\t\022\026"
    "\n\016comp_class_dir\0302 \003(\t\022\025\n\rscoregrid_dir\030"
    "\020 \001(\t\022\033\n\023scoregrid_train_dir\030, \001(\t\022\037\n\020no"
    "rmalize_kmeans\030Q \001(\010:\005false\022\025\n\nndim_join"
    "t\030R \001(\r:\0012\022\031\n\rposelet_strip\030S \001(\r:\00240\022\025\n"
    "\nvis_weight\030T \001(\002:\0010\022\024\n\tvp_weight\030U \001(\002:"
    "\0010\022 \n\023bootstrap_threshold\030X \001(\002:\0030.3\022 \n\025"
    "num_best_part_det_vis\030Z \001(\005:\0011\022\031\n\rmin_cl"
    "us_size\030\\ \001(\002:\00210\022\035\n\016pred_unary_rot\030] \001("
    "\010:\005false\022 \n\025pred_unary_pos_weight\030_ \001(\002:"
    "\0011\022 \n\025pred_unary_rot_weight\030` \001(\002:\0011\022\036\n\023"
    "pred_unary_rot_comp\030a \001(\r:\0011\022\025\n\rpred_dat"
    "a_dir\030b \001(\t\022\033\n\022pred_data_test_dir\030\207\001 \001(\t"
    "\022\035\n\024poselet_resp_val_dir\030\211\001 \001(\t\022\036\n\025posel"
    "et_resp_test_dir\030\212\001 \001(\t\022\024\n\013spatial_dir\030\213"
    "\001 \001(\t\022\033\n\020dpm_torso_weight\030c \001(\002:\0011\022$\n\026fo"
    "rce_recompute_scores\030e \001(\010:\004true\022!\n\026tors"
    "o_pos_prior_weight\030i \001(\002:\0011\022\032\n\022torso_det"
    "_test_dir\030k \001(\t\022\033\n\023torso_det_train_dir\030l"
    " \001(\t\022\031\n\021poselet_rot_strip\030m \001(\r\022\031\n\013rooti"
    "dx_det\030n \001(\r:\0041000\022\033\n\014use_gt_torso\030o \001(\010"
    ":\005false\022\034\n\ruse_dpm_torso\030p \001(\010:\005false\022\035\n"
    "\016pred_unary_pos\030r \001(\010:\005false\022\"\n\023use_tors"
    "o_pos_prior\030x \001(\010:\005false\022\033\n\014use_dpm_head"
    "\030z \001(\010:\005false\022\032\n\017dpm_head_weight\030} \001(\002:\001"
    "1\022\032\n\022test_dpm_unary_dir\030~ \001(\t\022\033\n\020dpm_una"
    "ry_weight\030\177 \001(\002:\0011\022\035\n\ruse_dpm_unary\030\200\001 \001"
    "(\010:\005false\022\032\n\ndo_dpm_rot\030\203\001 \001(\010:\005false\022\033\n"
    "\014use_pairwise\030\204\001 \001(\010:\004true\022#\n\023save_part_"
    "marginals\030\205\001 \001(\010:\005false\022\026\n\rdpm_model_dir"
    "\030\206\001 \001(\t\022\027\n\014unary_weight\0308 \001(\002:\0011\022\032\n\013inte"
    "rpolate\030M \001(\010:\005false\022\031\n\021pos_dpm_torso_di"
    "r\030E \001(\t\022\032\n\022test_dpm_torso_dir\030G \001(\t\022\025\n\rt"
    "orso_hyp_idx\030H \001(\r\022\032\n\022part_marginals_dir"
    "\030I \001(\t\022\021\n\tpart_conf\030\005 \001(\t\022\026\n\016part_conf_e"
    "val\030  \001(\t\022\"\n\016part_conf_type\030! \001(\t:\nhuman"
    "_full\022\021\n\tabc_param\030\006 \001(\t\022\033\n\020min_object_s"
    "cale\030\t \001(\002:\0011\022\033\n\020max_object_scale\030\n \001(\002:"
    "\0011\022\032\n\017num_scale_steps\030\013 \001(\r:\0011\022\037\n\021min_pa"
    "rt_rotation\030\014 \001(\002:\004-180\022\036\n\021max_part_rota"
    "tion\030\r \001(\002:\003180\022\036\n\022num_rotation_steps\030\016 "
    "\001(\r:\00248\022\037\n\020flip_orientation\030\017 \001(\010:\005false"
    "\022&\n\031object_height_width_ratio\030\025 \001(\002:\0032.5"
    "\022$\n\026compute_part_marginals\030\026 \001(\010:\004true\022\033"
    "\n\020num_pose_samples\030\027 \001(\005:\0010\022 \n\021is_multic"
    "omponent\030( \001(\010:\005false\022\031\n\016num_components\030"
    ") \001(\005:\0011\022\017\n\007mix_dir\030- \001(\t\022\"\n\027strip_borde"
    "r_detections\030\030 \001(\002:\0010\022#\n\024save_image_scor"
    "egrid\030\031 \001(\010:\005false\022\035\n\017dai_num_samples\030\034 "
    "\001(\005:\0041000\022\025\n\013dai_factors\030\035 \001(\t:\000\022\031\n\017dai_"
    "samples_dir\030\036 \001(\t:\000\022\034\n\013dai_bp_type\030\037 \001(\t"
    ":\007sumprod\022#\n\020dai_samples_type\030\" \001(\t:\tpar"
    "t_post\022\035\n\016dai_bbox_prior\030# \001(\010:\005false\022(\n"
    "\031dai_bbox_prior_annopoints\030% \001(\010:\005false\022"
    "\036\n\017dai_multiperson\030$ \001(\010:\005false\022\035\n\023detec"
    "tion_masks_dir\030& \001(\t:\000\022\026\n\014roi_annolist\030*"
    " \001(\t:\000\022\030\n\014roi_extend_x\030. \001(\005:\002-1\022\030\n\014roi_"
    "extend_y\030/ \001(\005:\002-1\022\"\n\024roi_save_num_sampl"
    "es\0300 \001(\002:\0041000\022\032\n\013compute_max\030+ \001(\010:\005fal"
    "se\022!\n\022reweight_inference\0305 \001(\010:\005false\022\"\n"
    "\022save_root_marginal\030\210\001 \001(\010:\005false", 2633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExpParam.proto", &protobuf_RegisterTypes);
  ExpParam::default_instance_ = new ExpParam();
  ExpParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExpParam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExpParam_2eproto {
  StaticDescriptorInitializer_ExpParam_2eproto() {
    protobuf_AddDesc_ExpParam_2eproto();
  }
} static_descriptor_initializer_ExpParam_2eproto_;


// ===================================================================

const ::std::string ExpParam::_default_log_dir_;
const ::std::string ExpParam::_default_log_subdir_;
const ::std::string ExpParam::_default_class_dir_;
const ::std::string ExpParam::_default_scoregrid_dir_;
const ::std::string ExpParam::_default_scoregrid_train_dir_;
const ::std::string ExpParam::_default_pred_data_dir_;
const ::std::string ExpParam::_default_pred_data_test_dir_;
const ::std::string ExpParam::_default_poselet_resp_val_dir_;
const ::std::string ExpParam::_default_poselet_resp_test_dir_;
const ::std::string ExpParam::_default_spatial_dir_;
const ::std::string ExpParam::_default_torso_det_test_dir_;
const ::std::string ExpParam::_default_torso_det_train_dir_;
const ::std::string ExpParam::_default_test_dpm_unary_dir_;
const ::std::string ExpParam::_default_dpm_model_dir_;
const ::std::string ExpParam::_default_pos_dpm_torso_dir_;
const ::std::string ExpParam::_default_test_dpm_torso_dir_;
const ::std::string ExpParam::_default_part_marginals_dir_;
const ::std::string ExpParam::_default_part_conf_;
const ::std::string ExpParam::_default_part_conf_eval_;
const ::std::string ExpParam::_default_part_conf_type_("human_full");
const ::std::string ExpParam::_default_abc_param_;
const ::std::string ExpParam::_default_mix_dir_;
const ::std::string ExpParam::_default_dai_factors_;
const ::std::string ExpParam::_default_dai_samples_dir_;
const ::std::string ExpParam::_default_dai_bp_type_("sumprod");
const ::std::string ExpParam::_default_dai_samples_type_("part_post");
const ::std::string ExpParam::_default_detection_masks_dir_;
const ::std::string ExpParam::_default_roi_annolist_;
#ifndef _MSC_VER
const int ExpParam::kTrainDatasetFieldNumber;
const int ExpParam::kValidationDatasetFieldNumber;
const int ExpParam::kTestDatasetFieldNumber;
const int ExpParam::kNegDatasetFieldNumber;
const int ExpParam::kBootstrapDatasetFieldNumber;
const int ExpParam::kTrainDatasetReshapedFieldNumber;
const int ExpParam::kLogDirFieldNumber;
const int ExpParam::kLogSubdirFieldNumber;
const int ExpParam::kClassDirFieldNumber;
const int ExpParam::kCompClassDirFieldNumber;
const int ExpParam::kScoregridDirFieldNumber;
const int ExpParam::kScoregridTrainDirFieldNumber;
const int ExpParam::kNormalizeKmeansFieldNumber;
const int ExpParam::kNdimJointFieldNumber;
const int ExpParam::kPoseletStripFieldNumber;
const int ExpParam::kVisWeightFieldNumber;
const int ExpParam::kVpWeightFieldNumber;
const int ExpParam::kBootstrapThresholdFieldNumber;
const int ExpParam::kNumBestPartDetVisFieldNumber;
const int ExpParam::kMinClusSizeFieldNumber;
const int ExpParam::kPredUnaryRotFieldNumber;
const int ExpParam::kPredUnaryPosWeightFieldNumber;
const int ExpParam::kPredUnaryRotWeightFieldNumber;
const int ExpParam::kPredUnaryRotCompFieldNumber;
const int ExpParam::kPredDataDirFieldNumber;
const int ExpParam::kPredDataTestDirFieldNumber;
const int ExpParam::kPoseletRespValDirFieldNumber;
const int ExpParam::kPoseletRespTestDirFieldNumber;
const int ExpParam::kSpatialDirFieldNumber;
const int ExpParam::kDpmTorsoWeightFieldNumber;
const int ExpParam::kForceRecomputeScoresFieldNumber;
const int ExpParam::kTorsoPosPriorWeightFieldNumber;
const int ExpParam::kTorsoDetTestDirFieldNumber;
const int ExpParam::kTorsoDetTrainDirFieldNumber;
const int ExpParam::kPoseletRotStripFieldNumber;
const int ExpParam::kRootidxDetFieldNumber;
const int ExpParam::kUseGtTorsoFieldNumber;
const int ExpParam::kUseDpmTorsoFieldNumber;
const int ExpParam::kPredUnaryPosFieldNumber;
const int ExpParam::kUseTorsoPosPriorFieldNumber;
const int ExpParam::kUseDpmHeadFieldNumber;
const int ExpParam::kDpmHeadWeightFieldNumber;
const int ExpParam::kTestDpmUnaryDirFieldNumber;
const int ExpParam::kDpmUnaryWeightFieldNumber;
const int ExpParam::kUseDpmUnaryFieldNumber;
const int ExpParam::kDoDpmRotFieldNumber;
const int ExpParam::kUsePairwiseFieldNumber;
const int ExpParam::kSavePartMarginalsFieldNumber;
const int ExpParam::kDpmModelDirFieldNumber;
const int ExpParam::kUnaryWeightFieldNumber;
const int ExpParam::kInterpolateFieldNumber;
const int ExpParam::kPosDpmTorsoDirFieldNumber;
const int ExpParam::kTestDpmTorsoDirFieldNumber;
const int ExpParam::kTorsoHypIdxFieldNumber;
const int ExpParam::kPartMarginalsDirFieldNumber;
const int ExpParam::kPartConfFieldNumber;
const int ExpParam::kPartConfEvalFieldNumber;
const int ExpParam::kPartConfTypeFieldNumber;
const int ExpParam::kAbcParamFieldNumber;
const int ExpParam::kMinObjectScaleFieldNumber;
const int ExpParam::kMaxObjectScaleFieldNumber;
const int ExpParam::kNumScaleStepsFieldNumber;
const int ExpParam::kMinPartRotationFieldNumber;
const int ExpParam::kMaxPartRotationFieldNumber;
const int ExpParam::kNumRotationStepsFieldNumber;
const int ExpParam::kFlipOrientationFieldNumber;
const int ExpParam::kObjectHeightWidthRatioFieldNumber;
const int ExpParam::kComputePartMarginalsFieldNumber;
const int ExpParam::kNumPoseSamplesFieldNumber;
const int ExpParam::kIsMulticomponentFieldNumber;
const int ExpParam::kNumComponentsFieldNumber;
const int ExpParam::kMixDirFieldNumber;
const int ExpParam::kStripBorderDetectionsFieldNumber;
const int ExpParam::kSaveImageScoregridFieldNumber;
const int ExpParam::kDaiNumSamplesFieldNumber;
const int ExpParam::kDaiFactorsFieldNumber;
const int ExpParam::kDaiSamplesDirFieldNumber;
const int ExpParam::kDaiBpTypeFieldNumber;
const int ExpParam::kDaiSamplesTypeFieldNumber;
const int ExpParam::kDaiBboxPriorFieldNumber;
const int ExpParam::kDaiBboxPriorAnnopointsFieldNumber;
const int ExpParam::kDaiMultipersonFieldNumber;
const int ExpParam::kDetectionMasksDirFieldNumber;
const int ExpParam::kRoiAnnolistFieldNumber;
const int ExpParam::kRoiExtendXFieldNumber;
const int ExpParam::kRoiExtendYFieldNumber;
const int ExpParam::kRoiSaveNumSamplesFieldNumber;
const int ExpParam::kComputeMaxFieldNumber;
const int ExpParam::kReweightInferenceFieldNumber;
const int ExpParam::kSaveRootMarginalFieldNumber;
#endif  // !_MSC_VER

ExpParam::ExpParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpParam::InitAsDefaultInstance() {
}

ExpParam::ExpParam(const ExpParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpParam::SharedCtor() {
  _cached_size_ = 0;
  log_dir_ = const_cast< ::std::string*>(&_default_log_dir_);
  log_subdir_ = const_cast< ::std::string*>(&_default_log_subdir_);
  class_dir_ = const_cast< ::std::string*>(&_default_class_dir_);
  scoregrid_dir_ = const_cast< ::std::string*>(&_default_scoregrid_dir_);
  scoregrid_train_dir_ = const_cast< ::std::string*>(&_default_scoregrid_train_dir_);
  normalize_kmeans_ = false;
  ndim_joint_ = 2u;
  poselet_strip_ = 40u;
  vis_weight_ = 0;
  vp_weight_ = 0;
  bootstrap_threshold_ = 0.3f;
  num_best_part_det_vis_ = 1;
  min_clus_size_ = 10;
  pred_unary_rot_ = false;
  pred_unary_pos_weight_ = 1;
  pred_unary_rot_weight_ = 1;
  pred_unary_rot_comp_ = 1u;
  pred_data_dir_ = const_cast< ::std::string*>(&_default_pred_data_dir_);
  pred_data_test_dir_ = const_cast< ::std::string*>(&_default_pred_data_test_dir_);
  poselet_resp_val_dir_ = const_cast< ::std::string*>(&_default_poselet_resp_val_dir_);
  poselet_resp_test_dir_ = const_cast< ::std::string*>(&_default_poselet_resp_test_dir_);
  spatial_dir_ = const_cast< ::std::string*>(&_default_spatial_dir_);
  dpm_torso_weight_ = 1;
  force_recompute_scores_ = true;
  torso_pos_prior_weight_ = 1;
  torso_det_test_dir_ = const_cast< ::std::string*>(&_default_torso_det_test_dir_);
  torso_det_train_dir_ = const_cast< ::std::string*>(&_default_torso_det_train_dir_);
  poselet_rot_strip_ = 0u;
  rootidx_det_ = 1000u;
  use_gt_torso_ = false;
  use_dpm_torso_ = false;
  pred_unary_pos_ = false;
  use_torso_pos_prior_ = false;
  use_dpm_head_ = false;
  dpm_head_weight_ = 1;
  test_dpm_unary_dir_ = const_cast< ::std::string*>(&_default_test_dpm_unary_dir_);
  dpm_unary_weight_ = 1;
  use_dpm_unary_ = false;
  do_dpm_rot_ = false;
  use_pairwise_ = true;
  save_part_marginals_ = false;
  dpm_model_dir_ = const_cast< ::std::string*>(&_default_dpm_model_dir_);
  unary_weight_ = 1;
  interpolate_ = false;
  pos_dpm_torso_dir_ = const_cast< ::std::string*>(&_default_pos_dpm_torso_dir_);
  test_dpm_torso_dir_ = const_cast< ::std::string*>(&_default_test_dpm_torso_dir_);
  torso_hyp_idx_ = 0u;
  part_marginals_dir_ = const_cast< ::std::string*>(&_default_part_marginals_dir_);
  part_conf_ = const_cast< ::std::string*>(&_default_part_conf_);
  part_conf_eval_ = const_cast< ::std::string*>(&_default_part_conf_eval_);
  part_conf_type_ = const_cast< ::std::string*>(&_default_part_conf_type_);
  abc_param_ = const_cast< ::std::string*>(&_default_abc_param_);
  min_object_scale_ = 1;
  max_object_scale_ = 1;
  num_scale_steps_ = 1u;
  min_part_rotation_ = -180;
  max_part_rotation_ = 180;
  num_rotation_steps_ = 48u;
  flip_orientation_ = false;
  object_height_width_ratio_ = 2.5f;
  compute_part_marginals_ = true;
  num_pose_samples_ = 0;
  is_multicomponent_ = false;
  num_components_ = 1;
  mix_dir_ = const_cast< ::std::string*>(&_default_mix_dir_);
  strip_border_detections_ = 0;
  save_image_scoregrid_ = false;
  dai_num_samples_ = 1000;
  dai_factors_ = const_cast< ::std::string*>(&_default_dai_factors_);
  dai_samples_dir_ = const_cast< ::std::string*>(&_default_dai_samples_dir_);
  dai_bp_type_ = const_cast< ::std::string*>(&_default_dai_bp_type_);
  dai_samples_type_ = const_cast< ::std::string*>(&_default_dai_samples_type_);
  dai_bbox_prior_ = false;
  dai_bbox_prior_annopoints_ = false;
  dai_multiperson_ = false;
  detection_masks_dir_ = const_cast< ::std::string*>(&_default_detection_masks_dir_);
  roi_annolist_ = const_cast< ::std::string*>(&_default_roi_annolist_);
  roi_extend_x_ = -1;
  roi_extend_y_ = -1;
  roi_save_num_samples_ = 1000;
  compute_max_ = false;
  reweight_inference_ = false;
  save_root_marginal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpParam::~ExpParam() {
  SharedDtor();
}

void ExpParam::SharedDtor() {
  if (log_dir_ != &_default_log_dir_) {
    delete log_dir_;
  }
  if (log_subdir_ != &_default_log_subdir_) {
    delete log_subdir_;
  }
  if (class_dir_ != &_default_class_dir_) {
    delete class_dir_;
  }
  if (scoregrid_dir_ != &_default_scoregrid_dir_) {
    delete scoregrid_dir_;
  }
  if (scoregrid_train_dir_ != &_default_scoregrid_train_dir_) {
    delete scoregrid_train_dir_;
  }
  if (pred_data_dir_ != &_default_pred_data_dir_) {
    delete pred_data_dir_;
  }
  if (pred_data_test_dir_ != &_default_pred_data_test_dir_) {
    delete pred_data_test_dir_;
  }
  if (poselet_resp_val_dir_ != &_default_poselet_resp_val_dir_) {
    delete poselet_resp_val_dir_;
  }
  if (poselet_resp_test_dir_ != &_default_poselet_resp_test_dir_) {
    delete poselet_resp_test_dir_;
  }
  if (spatial_dir_ != &_default_spatial_dir_) {
    delete spatial_dir_;
  }
  if (torso_det_test_dir_ != &_default_torso_det_test_dir_) {
    delete torso_det_test_dir_;
  }
  if (torso_det_train_dir_ != &_default_torso_det_train_dir_) {
    delete torso_det_train_dir_;
  }
  if (test_dpm_unary_dir_ != &_default_test_dpm_unary_dir_) {
    delete test_dpm_unary_dir_;
  }
  if (dpm_model_dir_ != &_default_dpm_model_dir_) {
    delete dpm_model_dir_;
  }
  if (pos_dpm_torso_dir_ != &_default_pos_dpm_torso_dir_) {
    delete pos_dpm_torso_dir_;
  }
  if (test_dpm_torso_dir_ != &_default_test_dpm_torso_dir_) {
    delete test_dpm_torso_dir_;
  }
  if (part_marginals_dir_ != &_default_part_marginals_dir_) {
    delete part_marginals_dir_;
  }
  if (part_conf_ != &_default_part_conf_) {
    delete part_conf_;
  }
  if (part_conf_eval_ != &_default_part_conf_eval_) {
    delete part_conf_eval_;
  }
  if (part_conf_type_ != &_default_part_conf_type_) {
    delete part_conf_type_;
  }
  if (abc_param_ != &_default_abc_param_) {
    delete abc_param_;
  }
  if (mix_dir_ != &_default_mix_dir_) {
    delete mix_dir_;
  }
  if (dai_factors_ != &_default_dai_factors_) {
    delete dai_factors_;
  }
  if (dai_samples_dir_ != &_default_dai_samples_dir_) {
    delete dai_samples_dir_;
  }
  if (dai_bp_type_ != &_default_dai_bp_type_) {
    delete dai_bp_type_;
  }
  if (dai_samples_type_ != &_default_dai_samples_type_) {
    delete dai_samples_type_;
  }
  if (detection_masks_dir_ != &_default_detection_masks_dir_) {
    delete detection_masks_dir_;
  }
  if (roi_annolist_ != &_default_roi_annolist_) {
    delete roi_annolist_;
  }
  if (this != default_instance_) {
  }
}

void ExpParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParam_descriptor_;
}

const ExpParam& ExpParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpParam_2eproto();  return *default_instance_;
}

ExpParam* ExpParam::default_instance_ = NULL;

ExpParam* ExpParam::New() const {
  return new ExpParam;
}

void ExpParam::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (_has_bit(6)) {
      if (log_dir_ != &_default_log_dir_) {
        log_dir_->clear();
      }
    }
    if (_has_bit(7)) {
      if (log_subdir_ != &_default_log_subdir_) {
        log_subdir_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (class_dir_ != &_default_class_dir_) {
        class_dir_->clear();
      }
    }
    if (_has_bit(10)) {
      if (scoregrid_dir_ != &_default_scoregrid_dir_) {
        scoregrid_dir_->clear();
      }
    }
    if (_has_bit(11)) {
      if (scoregrid_train_dir_ != &_default_scoregrid_train_dir_) {
        scoregrid_train_dir_->clear();
      }
    }
    normalize_kmeans_ = false;
    ndim_joint_ = 2u;
    poselet_strip_ = 40u;
    vis_weight_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vp_weight_ = 0;
    bootstrap_threshold_ = 0.3f;
    num_best_part_det_vis_ = 1;
    min_clus_size_ = 10;
    pred_unary_rot_ = false;
    pred_unary_pos_weight_ = 1;
    pred_unary_rot_weight_ = 1;
    pred_unary_rot_comp_ = 1u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (pred_data_dir_ != &_default_pred_data_dir_) {
        pred_data_dir_->clear();
      }
    }
    if (_has_bit(25)) {
      if (pred_data_test_dir_ != &_default_pred_data_test_dir_) {
        pred_data_test_dir_->clear();
      }
    }
    if (_has_bit(26)) {
      if (poselet_resp_val_dir_ != &_default_poselet_resp_val_dir_) {
        poselet_resp_val_dir_->clear();
      }
    }
    if (_has_bit(27)) {
      if (poselet_resp_test_dir_ != &_default_poselet_resp_test_dir_) {
        poselet_resp_test_dir_->clear();
      }
    }
    if (_has_bit(28)) {
      if (spatial_dir_ != &_default_spatial_dir_) {
        spatial_dir_->clear();
      }
    }
    dpm_torso_weight_ = 1;
    force_recompute_scores_ = true;
    torso_pos_prior_weight_ = 1;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (torso_det_test_dir_ != &_default_torso_det_test_dir_) {
        torso_det_test_dir_->clear();
      }
    }
    if (_has_bit(33)) {
      if (torso_det_train_dir_ != &_default_torso_det_train_dir_) {
        torso_det_train_dir_->clear();
      }
    }
    poselet_rot_strip_ = 0u;
    rootidx_det_ = 1000u;
    use_gt_torso_ = false;
    use_dpm_torso_ = false;
    pred_unary_pos_ = false;
    use_torso_pos_prior_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    use_dpm_head_ = false;
    dpm_head_weight_ = 1;
    if (_has_bit(42)) {
      if (test_dpm_unary_dir_ != &_default_test_dpm_unary_dir_) {
        test_dpm_unary_dir_->clear();
      }
    }
    dpm_unary_weight_ = 1;
    use_dpm_unary_ = false;
    do_dpm_rot_ = false;
    use_pairwise_ = true;
    save_part_marginals_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (_has_bit(48)) {
      if (dpm_model_dir_ != &_default_dpm_model_dir_) {
        dpm_model_dir_->clear();
      }
    }
    unary_weight_ = 1;
    interpolate_ = false;
    if (_has_bit(51)) {
      if (pos_dpm_torso_dir_ != &_default_pos_dpm_torso_dir_) {
        pos_dpm_torso_dir_->clear();
      }
    }
    if (_has_bit(52)) {
      if (test_dpm_torso_dir_ != &_default_test_dpm_torso_dir_) {
        test_dpm_torso_dir_->clear();
      }
    }
    torso_hyp_idx_ = 0u;
    if (_has_bit(54)) {
      if (part_marginals_dir_ != &_default_part_marginals_dir_) {
        part_marginals_dir_->clear();
      }
    }
    if (_has_bit(55)) {
      if (part_conf_ != &_default_part_conf_) {
        part_conf_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (_has_bit(56)) {
      if (part_conf_eval_ != &_default_part_conf_eval_) {
        part_conf_eval_->clear();
      }
    }
    if (_has_bit(57)) {
      if (part_conf_type_ != &_default_part_conf_type_) {
        part_conf_type_->assign(_default_part_conf_type_);
      }
    }
    if (_has_bit(58)) {
      if (abc_param_ != &_default_abc_param_) {
        abc_param_->clear();
      }
    }
    min_object_scale_ = 1;
    max_object_scale_ = 1;
    num_scale_steps_ = 1u;
    min_part_rotation_ = -180;
    max_part_rotation_ = 180;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    num_rotation_steps_ = 48u;
    flip_orientation_ = false;
    object_height_width_ratio_ = 2.5f;
    compute_part_marginals_ = true;
    num_pose_samples_ = 0;
    is_multicomponent_ = false;
    num_components_ = 1;
    if (_has_bit(71)) {
      if (mix_dir_ != &_default_mix_dir_) {
        mix_dir_->clear();
      }
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    strip_border_detections_ = 0;
    save_image_scoregrid_ = false;
    dai_num_samples_ = 1000;
    if (_has_bit(75)) {
      if (dai_factors_ != &_default_dai_factors_) {
        dai_factors_->clear();
      }
    }
    if (_has_bit(76)) {
      if (dai_samples_dir_ != &_default_dai_samples_dir_) {
        dai_samples_dir_->clear();
      }
    }
    if (_has_bit(77)) {
      if (dai_bp_type_ != &_default_dai_bp_type_) {
        dai_bp_type_->assign(_default_dai_bp_type_);
      }
    }
    if (_has_bit(78)) {
      if (dai_samples_type_ != &_default_dai_samples_type_) {
        dai_samples_type_->assign(_default_dai_samples_type_);
      }
    }
    dai_bbox_prior_ = false;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    dai_bbox_prior_annopoints_ = false;
    dai_multiperson_ = false;
    if (_has_bit(82)) {
      if (detection_masks_dir_ != &_default_detection_masks_dir_) {
        detection_masks_dir_->clear();
      }
    }
    if (_has_bit(83)) {
      if (roi_annolist_ != &_default_roi_annolist_) {
        roi_annolist_->clear();
      }
    }
    roi_extend_x_ = -1;
    roi_extend_y_ = -1;
    roi_save_num_samples_ = 1000;
    compute_max_ = false;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    reweight_inference_ = false;
    save_root_marginal_ = false;
  }
  train_dataset_.Clear();
  validation_dataset_.Clear();
  test_dataset_.Clear();
  neg_dataset_.Clear();
  bootstrap_dataset_.Clear();
  train_dataset_reshaped_.Clear();
  comp_class_dir_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string train_dataset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_train_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_dataset(0).data(), this->train_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_train_dataset;
        if (input->ExpectTag(18)) goto parse_test_dataset;
        break;
      }
      
      // repeated string test_dataset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_dataset(0).data(), this->test_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_test_dataset;
        if (input->ExpectTag(26)) goto parse_log_dir;
        break;
      }
      
      // optional string log_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_class_dir;
        break;
      }
      
      // optional string class_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_dir().data(), this->class_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_part_conf;
        break;
      }
      
      // optional string part_conf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_conf().data(), this->part_conf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_abc_param;
        break;
      }
      
      // optional string abc_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abc_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abc_param().data(), this->abc_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_log_subdir;
        break;
      }
      
      // optional string log_subdir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_subdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_subdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_subdir().data(), this->log_subdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        break;
      }
      
      // repeated string validation_dataset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validation_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_validation_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validation_dataset(0).data(), this->validation_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        if (input->ExpectTag(77)) goto parse_min_object_scale;
        break;
      }
      
      // optional float min_object_scale = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_object_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_scale_)));
          _set_bit(59);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_max_object_scale;
        break;
      }
      
      // optional float max_object_scale = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_object_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_object_scale_)));
          _set_bit(60);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_scale_steps;
        break;
      }
      
      // optional uint32 num_scale_steps = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_scale_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_scale_steps_)));
          _set_bit(61);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_min_part_rotation;
        break;
      }
      
      // optional float min_part_rotation = 12 [default = -180];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_part_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_part_rotation_)));
          _set_bit(62);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_max_part_rotation;
        break;
      }
      
      // optional float max_part_rotation = 13 [default = 180];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_part_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_part_rotation_)));
          _set_bit(63);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_num_rotation_steps;
        break;
      }
      
      // optional uint32 num_rotation_steps = 14 [default = 48];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rotation_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rotation_steps_)));
          _set_bit(64);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_flip_orientation;
        break;
      }
      
      // optional bool flip_orientation = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_orientation_)));
          _set_bit(65);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_scoregrid_dir;
        break;
      }
      
      // optional string scoregrid_dir = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoregrid_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scoregrid_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scoregrid_dir().data(), this->scoregrid_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_object_height_width_ratio;
        break;
      }
      
      // optional float object_height_width_ratio = 21 [default = 2.5];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_object_height_width_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_width_ratio_)));
          _set_bit(66);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_compute_part_marginals;
        break;
      }
      
      // optional bool compute_part_marginals = 22 [default = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compute_part_marginals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_part_marginals_)));
          _set_bit(67);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_num_pose_samples;
        break;
      }
      
      // optional int32 num_pose_samples = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_pose_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pose_samples_)));
          _set_bit(68);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_strip_border_detections;
        break;
      }
      
      // optional float strip_border_detections = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strip_border_detections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strip_border_detections_)));
          _set_bit(72);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_save_image_scoregrid;
        break;
      }
      
      // optional bool save_image_scoregrid = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_image_scoregrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_image_scoregrid_)));
          _set_bit(73);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_dai_num_samples;
        break;
      }
      
      // optional int32 dai_num_samples = 28 [default = 1000];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dai_num_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dai_num_samples_)));
          _set_bit(74);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_dai_factors;
        break;
      }
      
      // optional string dai_factors = 29 [default = ""];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dai_factors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dai_factors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dai_factors().data(), this->dai_factors().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_dai_samples_dir;
        break;
      }
      
      // optional string dai_samples_dir = 30 [default = ""];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dai_samples_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dai_samples_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dai_samples_dir().data(), this->dai_samples_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_dai_bp_type;
        break;
      }
      
      // optional string dai_bp_type = 31 [default = "sumprod"];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dai_bp_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dai_bp_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dai_bp_type().data(), this->dai_bp_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_part_conf_eval;
        break;
      }
      
      // optional string part_conf_eval = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_conf_eval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_conf_eval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_conf_eval().data(), this->part_conf_eval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_part_conf_type;
        break;
      }
      
      // optional string part_conf_type = 33 [default = "human_full"];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_conf_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_conf_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_conf_type().data(), this->part_conf_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_dai_samples_type;
        break;
      }
      
      // optional string dai_samples_type = 34 [default = "part_post"];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dai_samples_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dai_samples_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dai_samples_type().data(), this->dai_samples_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_dai_bbox_prior;
        break;
      }
      
      // optional bool dai_bbox_prior = 35 [default = false];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dai_bbox_prior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dai_bbox_prior_)));
          _set_bit(79);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_dai_multiperson;
        break;
      }
      
      // optional bool dai_multiperson = 36 [default = false];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dai_multiperson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dai_multiperson_)));
          _set_bit(81);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_dai_bbox_prior_annopoints;
        break;
      }
      
      // optional bool dai_bbox_prior_annopoints = 37 [default = false];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dai_bbox_prior_annopoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dai_bbox_prior_annopoints_)));
          _set_bit(80);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_detection_masks_dir;
        break;
      }
      
      // optional string detection_masks_dir = 38 [default = ""];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detection_masks_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_masks_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detection_masks_dir().data(), this->detection_masks_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_train_dataset_reshaped;
        break;
      }
      
      // repeated string train_dataset_reshaped = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_dataset_reshaped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_train_dataset_reshaped()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_dataset_reshaped(0).data(), this->train_dataset_reshaped(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_train_dataset_reshaped;
        if (input->ExpectTag(320)) goto parse_is_multicomponent;
        break;
      }
      
      // optional bool is_multicomponent = 40 [default = false];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_multicomponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multicomponent_)));
          _set_bit(69);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_num_components;
        break;
      }
      
      // optional int32 num_components = 41 [default = 1];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_components:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_components_)));
          _set_bit(70);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_roi_annolist;
        break;
      }
      
      // optional string roi_annolist = 42 [default = ""];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roi_annolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roi_annolist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roi_annolist().data(), this->roi_annolist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_compute_max;
        break;
      }
      
      // optional bool compute_max = 43 [default = false];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compute_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_max_)));
          _set_bit(87);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_scoregrid_train_dir;
        break;
      }
      
      // optional string scoregrid_train_dir = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoregrid_train_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scoregrid_train_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scoregrid_train_dir().data(), this->scoregrid_train_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_mix_dir;
        break;
      }
      
      // optional string mix_dir = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mix_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mix_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mix_dir().data(), this->mix_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_roi_extend_x;
        break;
      }
      
      // optional int32 roi_extend_x = 46 [default = -1];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roi_extend_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_extend_x_)));
          _set_bit(84);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_roi_extend_y;
        break;
      }
      
      // optional int32 roi_extend_y = 47 [default = -1];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roi_extend_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_extend_y_)));
          _set_bit(85);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_roi_save_num_samples;
        break;
      }
      
      // optional float roi_save_num_samples = 48 [default = 1000];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roi_save_num_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_save_num_samples_)));
          _set_bit(86);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_comp_class_dir;
        break;
      }
      
      // repeated string comp_class_dir = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_class_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_comp_class_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comp_class_dir(0).data(), this->comp_class_dir(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_comp_class_dir;
        if (input->ExpectTag(410)) goto parse_neg_dataset;
        break;
      }
      
      // repeated string neg_dataset = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_neg_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_neg_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->neg_dataset(0).data(), this->neg_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_neg_dataset;
        if (input->ExpectTag(424)) goto parse_reweight_inference;
        break;
      }
      
      // optional bool reweight_inference = 53 [default = false];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reweight_inference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reweight_inference_)));
          _set_bit(88);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(453)) goto parse_unary_weight;
        break;
      }
      
      // optional float unary_weight = 56 [default = 1];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unary_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unary_weight_)));
          _set_bit(49);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_pos_dpm_torso_dir;
        break;
      }
      
      // optional string pos_dpm_torso_dir = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_dpm_torso_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos_dpm_torso_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pos_dpm_torso_dir().data(), this->pos_dpm_torso_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_test_dpm_torso_dir;
        break;
      }
      
      // optional string test_dpm_torso_dir = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_dpm_torso_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_dpm_torso_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_dpm_torso_dir().data(), this->test_dpm_torso_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_torso_hyp_idx;
        break;
      }
      
      // optional uint32 torso_hyp_idx = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_torso_hyp_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torso_hyp_idx_)));
          _set_bit(53);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_part_marginals_dir;
        break;
      }
      
      // optional string part_marginals_dir = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_marginals_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_marginals_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_marginals_dir().data(), this->part_marginals_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_interpolate;
        break;
      }
      
      // optional bool interpolate = 77 [default = false];
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interpolate_)));
          _set_bit(50);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_normalize_kmeans;
        break;
      }
      
      // optional bool normalize_kmeans = 81 [default = false];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalize_kmeans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_kmeans_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_ndim_joint;
        break;
      }
      
      // optional uint32 ndim_joint = 82 [default = 2];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ndim_joint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndim_joint_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_poselet_strip;
        break;
      }
      
      // optional uint32 poselet_strip = 83 [default = 40];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poselet_strip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poselet_strip_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(677)) goto parse_vis_weight;
        break;
      }
      
      // optional float vis_weight = 84 [default = 0];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vis_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vis_weight_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(685)) goto parse_vp_weight;
        break;
      }
      
      // optional float vp_weight = 85 [default = 0];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vp_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vp_weight_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(690)) goto parse_bootstrap_dataset;
        break;
      }
      
      // repeated string bootstrap_dataset = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bootstrap_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bootstrap_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bootstrap_dataset(0).data(), this->bootstrap_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(690)) goto parse_bootstrap_dataset;
        if (input->ExpectTag(709)) goto parse_bootstrap_threshold;
        break;
      }
      
      // optional float bootstrap_threshold = 88 [default = 0.3];
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bootstrap_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bootstrap_threshold_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_num_best_part_det_vis;
        break;
      }
      
      // optional int32 num_best_part_det_vis = 90 [default = 1];
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_best_part_det_vis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_best_part_det_vis_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(741)) goto parse_min_clus_size;
        break;
      }
      
      // optional float min_clus_size = 92 [default = 10];
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_clus_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_clus_size_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_pred_unary_rot;
        break;
      }
      
      // optional bool pred_unary_rot = 93 [default = false];
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pred_unary_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pred_unary_rot_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(765)) goto parse_pred_unary_pos_weight;
        break;
      }
      
      // optional float pred_unary_pos_weight = 95 [default = 1];
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pred_unary_pos_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pred_unary_pos_weight_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(773)) goto parse_pred_unary_rot_weight;
        break;
      }
      
      // optional float pred_unary_rot_weight = 96 [default = 1];
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pred_unary_rot_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pred_unary_rot_weight_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_pred_unary_rot_comp;
        break;
      }
      
      // optional uint32 pred_unary_rot_comp = 97 [default = 1];
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pred_unary_rot_comp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pred_unary_rot_comp_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_pred_data_dir;
        break;
      }
      
      // optional string pred_data_dir = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pred_data_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pred_data_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pred_data_dir().data(), this->pred_data_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(797)) goto parse_dpm_torso_weight;
        break;
      }
      
      // optional float dpm_torso_weight = 99 [default = 1];
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpm_torso_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpm_torso_weight_)));
          _set_bit(29);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_force_recompute_scores;
        break;
      }
      
      // optional bool force_recompute_scores = 101 [default = true];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_recompute_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_recompute_scores_)));
          _set_bit(30);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(845)) goto parse_torso_pos_prior_weight;
        break;
      }
      
      // optional float torso_pos_prior_weight = 105 [default = 1];
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torso_pos_prior_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torso_pos_prior_weight_)));
          _set_bit(31);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_torso_det_test_dir;
        break;
      }
      
      // optional string torso_det_test_dir = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso_det_test_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torso_det_test_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->torso_det_test_dir().data(), this->torso_det_test_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_torso_det_train_dir;
        break;
      }
      
      // optional string torso_det_train_dir = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso_det_train_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torso_det_train_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->torso_det_train_dir().data(), this->torso_det_train_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(872)) goto parse_poselet_rot_strip;
        break;
      }
      
      // optional uint32 poselet_rot_strip = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poselet_rot_strip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poselet_rot_strip_)));
          _set_bit(34);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_rootidx_det;
        break;
      }
      
      // optional uint32 rootidx_det = 110 [default = 1000];
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rootidx_det:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rootidx_det_)));
          _set_bit(35);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_use_gt_torso;
        break;
      }
      
      // optional bool use_gt_torso = 111 [default = false];
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_gt_torso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gt_torso_)));
          _set_bit(36);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(896)) goto parse_use_dpm_torso;
        break;
      }
      
      // optional bool use_dpm_torso = 112 [default = false];
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_dpm_torso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dpm_torso_)));
          _set_bit(37);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(912)) goto parse_pred_unary_pos;
        break;
      }
      
      // optional bool pred_unary_pos = 114 [default = false];
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pred_unary_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pred_unary_pos_)));
          _set_bit(38);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_use_torso_pos_prior;
        break;
      }
      
      // optional bool use_torso_pos_prior = 120 [default = false];
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_torso_pos_prior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_torso_pos_prior_)));
          _set_bit(39);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(976)) goto parse_use_dpm_head;
        break;
      }
      
      // optional bool use_dpm_head = 122 [default = false];
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_dpm_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dpm_head_)));
          _set_bit(40);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1005)) goto parse_dpm_head_weight;
        break;
      }
      
      // optional float dpm_head_weight = 125 [default = 1];
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpm_head_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpm_head_weight_)));
          _set_bit(41);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1010)) goto parse_test_dpm_unary_dir;
        break;
      }
      
      // optional string test_dpm_unary_dir = 126;
      case 126: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_dpm_unary_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_dpm_unary_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_dpm_unary_dir().data(), this->test_dpm_unary_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1021)) goto parse_dpm_unary_weight;
        break;
      }
      
      // optional float dpm_unary_weight = 127 [default = 1];
      case 127: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpm_unary_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpm_unary_weight_)));
          _set_bit(43);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1024)) goto parse_use_dpm_unary;
        break;
      }
      
      // optional bool use_dpm_unary = 128 [default = false];
      case 128: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_dpm_unary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dpm_unary_)));
          _set_bit(44);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1048)) goto parse_do_dpm_rot;
        break;
      }
      
      // optional bool do_dpm_rot = 131 [default = false];
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_dpm_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_dpm_rot_)));
          _set_bit(45);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1056)) goto parse_use_pairwise;
        break;
      }
      
      // optional bool use_pairwise = 132 [default = true];
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_pairwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pairwise_)));
          _set_bit(46);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1064)) goto parse_save_part_marginals;
        break;
      }
      
      // optional bool save_part_marginals = 133 [default = false];
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_part_marginals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_part_marginals_)));
          _set_bit(47);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1074)) goto parse_dpm_model_dir;
        break;
      }
      
      // optional string dpm_model_dir = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dpm_model_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpm_model_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dpm_model_dir().data(), this->dpm_model_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1082)) goto parse_pred_data_test_dir;
        break;
      }
      
      // optional string pred_data_test_dir = 135;
      case 135: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pred_data_test_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pred_data_test_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pred_data_test_dir().data(), this->pred_data_test_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1088)) goto parse_save_root_marginal;
        break;
      }
      
      // optional bool save_root_marginal = 136 [default = false];
      case 136: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_root_marginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_root_marginal_)));
          _set_bit(89);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1098)) goto parse_poselet_resp_val_dir;
        break;
      }
      
      // optional string poselet_resp_val_dir = 137;
      case 137: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poselet_resp_val_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poselet_resp_val_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poselet_resp_val_dir().data(), this->poselet_resp_val_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1106)) goto parse_poselet_resp_test_dir;
        break;
      }
      
      // optional string poselet_resp_test_dir = 138;
      case 138: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poselet_resp_test_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poselet_resp_test_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poselet_resp_test_dir().data(), this->poselet_resp_test_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1114)) goto parse_spatial_dir;
        break;
      }
      
      // optional string spatial_dir = 139;
      case 139: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spatial_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spatial_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spatial_dir().data(), this->spatial_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->train_dataset(i).data(), this->train_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_dataset(i), output);
  }
  
  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->test_dataset(i).data(), this->test_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_dataset(i), output);
  }
  
  // optional string log_dir = 3;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->log_dir(), output);
  }
  
  // optional string class_dir = 4;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->class_dir(), output);
  }
  
  // optional string part_conf = 5;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->part_conf(), output);
  }
  
  // optional string abc_param = 6;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->abc_param(), output);
  }
  
  // optional string log_subdir = 7;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->log_subdir(), output);
  }
  
  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->validation_dataset(i).data(), this->validation_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->validation_dataset(i), output);
  }
  
  // optional float min_object_scale = 9 [default = 1];
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_object_scale(), output);
  }
  
  // optional float max_object_scale = 10 [default = 1];
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->max_object_scale(), output);
  }
  
  // optional uint32 num_scale_steps = 11 [default = 1];
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_scale_steps(), output);
  }
  
  // optional float min_part_rotation = 12 [default = -180];
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->min_part_rotation(), output);
  }
  
  // optional float max_part_rotation = 13 [default = 180];
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->max_part_rotation(), output);
  }
  
  // optional uint32 num_rotation_steps = 14 [default = 48];
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_rotation_steps(), output);
  }
  
  // optional bool flip_orientation = 15 [default = false];
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->flip_orientation(), output);
  }
  
  // optional string scoregrid_dir = 16;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->scoregrid_dir(), output);
  }
  
  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->object_height_width_ratio(), output);
  }
  
  // optional bool compute_part_marginals = 22 [default = true];
  if (_has_bit(67)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->compute_part_marginals(), output);
  }
  
  // optional int32 num_pose_samples = 23 [default = 0];
  if (_has_bit(68)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->num_pose_samples(), output);
  }
  
  // optional float strip_border_detections = 24 [default = 0];
  if (_has_bit(72)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->strip_border_detections(), output);
  }
  
  // optional bool save_image_scoregrid = 25 [default = false];
  if (_has_bit(73)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->save_image_scoregrid(), output);
  }
  
  // optional int32 dai_num_samples = 28 [default = 1000];
  if (_has_bit(74)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->dai_num_samples(), output);
  }
  
  // optional string dai_factors = 29 [default = ""];
  if (_has_bit(75)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_factors().data(), this->dai_factors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->dai_factors(), output);
  }
  
  // optional string dai_samples_dir = 30 [default = ""];
  if (_has_bit(76)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_samples_dir().data(), this->dai_samples_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->dai_samples_dir(), output);
  }
  
  // optional string dai_bp_type = 31 [default = "sumprod"];
  if (_has_bit(77)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_bp_type().data(), this->dai_bp_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->dai_bp_type(), output);
  }
  
  // optional string part_conf_eval = 32;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf_eval().data(), this->part_conf_eval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->part_conf_eval(), output);
  }
  
  // optional string part_conf_type = 33 [default = "human_full"];
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf_type().data(), this->part_conf_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->part_conf_type(), output);
  }
  
  // optional string dai_samples_type = 34 [default = "part_post"];
  if (_has_bit(78)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_samples_type().data(), this->dai_samples_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->dai_samples_type(), output);
  }
  
  // optional bool dai_bbox_prior = 35 [default = false];
  if (_has_bit(79)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->dai_bbox_prior(), output);
  }
  
  // optional bool dai_multiperson = 36 [default = false];
  if (_has_bit(81)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->dai_multiperson(), output);
  }
  
  // optional bool dai_bbox_prior_annopoints = 37 [default = false];
  if (_has_bit(80)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->dai_bbox_prior_annopoints(), output);
  }
  
  // optional string detection_masks_dir = 38 [default = ""];
  if (_has_bit(82)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detection_masks_dir().data(), this->detection_masks_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->detection_masks_dir(), output);
  }
  
  // repeated string train_dataset_reshaped = 39;
  for (int i = 0; i < this->train_dataset_reshaped_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->train_dataset_reshaped(i).data(), this->train_dataset_reshaped(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->train_dataset_reshaped(i), output);
  }
  
  // optional bool is_multicomponent = 40 [default = false];
  if (_has_bit(69)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->is_multicomponent(), output);
  }
  
  // optional int32 num_components = 41 [default = 1];
  if (_has_bit(70)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->num_components(), output);
  }
  
  // optional string roi_annolist = 42 [default = ""];
  if (_has_bit(83)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roi_annolist().data(), this->roi_annolist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->roi_annolist(), output);
  }
  
  // optional bool compute_max = 43 [default = false];
  if (_has_bit(87)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->compute_max(), output);
  }
  
  // optional string scoregrid_train_dir = 44;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_train_dir().data(), this->scoregrid_train_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->scoregrid_train_dir(), output);
  }
  
  // optional string mix_dir = 45;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mix_dir().data(), this->mix_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->mix_dir(), output);
  }
  
  // optional int32 roi_extend_x = 46 [default = -1];
  if (_has_bit(84)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->roi_extend_x(), output);
  }
  
  // optional int32 roi_extend_y = 47 [default = -1];
  if (_has_bit(85)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->roi_extend_y(), output);
  }
  
  // optional float roi_save_num_samples = 48 [default = 1000];
  if (_has_bit(86)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->roi_save_num_samples(), output);
  }
  
  // repeated string comp_class_dir = 50;
  for (int i = 0; i < this->comp_class_dir_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->comp_class_dir(i).data(), this->comp_class_dir(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->comp_class_dir(i), output);
  }
  
  // repeated string neg_dataset = 51;
  for (int i = 0; i < this->neg_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->neg_dataset(i).data(), this->neg_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->neg_dataset(i), output);
  }
  
  // optional bool reweight_inference = 53 [default = false];
  if (_has_bit(88)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->reweight_inference(), output);
  }
  
  // optional float unary_weight = 56 [default = 1];
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->unary_weight(), output);
  }
  
  // optional string pos_dpm_torso_dir = 69;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos_dpm_torso_dir().data(), this->pos_dpm_torso_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      69, this->pos_dpm_torso_dir(), output);
  }
  
  // optional string test_dpm_torso_dir = 71;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dpm_torso_dir().data(), this->test_dpm_torso_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      71, this->test_dpm_torso_dir(), output);
  }
  
  // optional uint32 torso_hyp_idx = 72;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->torso_hyp_idx(), output);
  }
  
  // optional string part_marginals_dir = 73;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_marginals_dir().data(), this->part_marginals_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      73, this->part_marginals_dir(), output);
  }
  
  // optional bool interpolate = 77 [default = false];
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->interpolate(), output);
  }
  
  // optional bool normalize_kmeans = 81 [default = false];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->normalize_kmeans(), output);
  }
  
  // optional uint32 ndim_joint = 82 [default = 2];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->ndim_joint(), output);
  }
  
  // optional uint32 poselet_strip = 83 [default = 40];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->poselet_strip(), output);
  }
  
  // optional float vis_weight = 84 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(84, this->vis_weight(), output);
  }
  
  // optional float vp_weight = 85 [default = 0];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(85, this->vp_weight(), output);
  }
  
  // repeated string bootstrap_dataset = 86;
  for (int i = 0; i < this->bootstrap_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bootstrap_dataset(i).data(), this->bootstrap_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      86, this->bootstrap_dataset(i), output);
  }
  
  // optional float bootstrap_threshold = 88 [default = 0.3];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(88, this->bootstrap_threshold(), output);
  }
  
  // optional int32 num_best_part_det_vis = 90 [default = 1];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->num_best_part_det_vis(), output);
  }
  
  // optional float min_clus_size = 92 [default = 10];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(92, this->min_clus_size(), output);
  }
  
  // optional bool pred_unary_rot = 93 [default = false];
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->pred_unary_rot(), output);
  }
  
  // optional float pred_unary_pos_weight = 95 [default = 1];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(95, this->pred_unary_pos_weight(), output);
  }
  
  // optional float pred_unary_rot_weight = 96 [default = 1];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(96, this->pred_unary_rot_weight(), output);
  }
  
  // optional uint32 pred_unary_rot_comp = 97 [default = 1];
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(97, this->pred_unary_rot_comp(), output);
  }
  
  // optional string pred_data_dir = 98;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pred_data_dir().data(), this->pred_data_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      98, this->pred_data_dir(), output);
  }
  
  // optional float dpm_torso_weight = 99 [default = 1];
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(99, this->dpm_torso_weight(), output);
  }
  
  // optional bool force_recompute_scores = 101 [default = true];
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->force_recompute_scores(), output);
  }
  
  // optional float torso_pos_prior_weight = 105 [default = 1];
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(105, this->torso_pos_prior_weight(), output);
  }
  
  // optional string torso_det_test_dir = 107;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torso_det_test_dir().data(), this->torso_det_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      107, this->torso_det_test_dir(), output);
  }
  
  // optional string torso_det_train_dir = 108;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torso_det_train_dir().data(), this->torso_det_train_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      108, this->torso_det_train_dir(), output);
  }
  
  // optional uint32 poselet_rot_strip = 109;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(109, this->poselet_rot_strip(), output);
  }
  
  // optional uint32 rootidx_det = 110 [default = 1000];
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->rootidx_det(), output);
  }
  
  // optional bool use_gt_torso = 111 [default = false];
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(111, this->use_gt_torso(), output);
  }
  
  // optional bool use_dpm_torso = 112 [default = false];
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(112, this->use_dpm_torso(), output);
  }
  
  // optional bool pred_unary_pos = 114 [default = false];
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(114, this->pred_unary_pos(), output);
  }
  
  // optional bool use_torso_pos_prior = 120 [default = false];
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->use_torso_pos_prior(), output);
  }
  
  // optional bool use_dpm_head = 122 [default = false];
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(122, this->use_dpm_head(), output);
  }
  
  // optional float dpm_head_weight = 125 [default = 1];
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(125, this->dpm_head_weight(), output);
  }
  
  // optional string test_dpm_unary_dir = 126;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dpm_unary_dir().data(), this->test_dpm_unary_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      126, this->test_dpm_unary_dir(), output);
  }
  
  // optional float dpm_unary_weight = 127 [default = 1];
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(127, this->dpm_unary_weight(), output);
  }
  
  // optional bool use_dpm_unary = 128 [default = false];
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(128, this->use_dpm_unary(), output);
  }
  
  // optional bool do_dpm_rot = 131 [default = false];
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(131, this->do_dpm_rot(), output);
  }
  
  // optional bool use_pairwise = 132 [default = true];
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(132, this->use_pairwise(), output);
  }
  
  // optional bool save_part_marginals = 133 [default = false];
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(133, this->save_part_marginals(), output);
  }
  
  // optional string dpm_model_dir = 134;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dpm_model_dir().data(), this->dpm_model_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      134, this->dpm_model_dir(), output);
  }
  
  // optional string pred_data_test_dir = 135;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pred_data_test_dir().data(), this->pred_data_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      135, this->pred_data_test_dir(), output);
  }
  
  // optional bool save_root_marginal = 136 [default = false];
  if (_has_bit(89)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(136, this->save_root_marginal(), output);
  }
  
  // optional string poselet_resp_val_dir = 137;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poselet_resp_val_dir().data(), this->poselet_resp_val_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      137, this->poselet_resp_val_dir(), output);
  }
  
  // optional string poselet_resp_test_dir = 138;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poselet_resp_test_dir().data(), this->poselet_resp_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      138, this->poselet_resp_test_dir(), output);
  }
  
  // optional string spatial_dir = 139;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spatial_dir().data(), this->spatial_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      139, this->spatial_dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_dataset(i).data(), this->train_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->train_dataset(i), target);
  }
  
  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dataset(i).data(), this->test_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_dataset(i), target);
  }
  
  // optional string log_dir = 3;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_dir(), target);
  }
  
  // optional string class_dir = 4;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_dir(), target);
  }
  
  // optional string part_conf = 5;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->part_conf(), target);
  }
  
  // optional string abc_param = 6;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->abc_param(), target);
  }
  
  // optional string log_subdir = 7;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log_subdir(), target);
  }
  
  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validation_dataset(i).data(), this->validation_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->validation_dataset(i), target);
  }
  
  // optional float min_object_scale = 9 [default = 1];
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_object_scale(), target);
  }
  
  // optional float max_object_scale = 10 [default = 1];
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->max_object_scale(), target);
  }
  
  // optional uint32 num_scale_steps = 11 [default = 1];
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_scale_steps(), target);
  }
  
  // optional float min_part_rotation = 12 [default = -180];
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->min_part_rotation(), target);
  }
  
  // optional float max_part_rotation = 13 [default = 180];
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->max_part_rotation(), target);
  }
  
  // optional uint32 num_rotation_steps = 14 [default = 48];
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_rotation_steps(), target);
  }
  
  // optional bool flip_orientation = 15 [default = false];
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->flip_orientation(), target);
  }
  
  // optional string scoregrid_dir = 16;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->scoregrid_dir(), target);
  }
  
  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->object_height_width_ratio(), target);
  }
  
  // optional bool compute_part_marginals = 22 [default = true];
  if (_has_bit(67)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->compute_part_marginals(), target);
  }
  
  // optional int32 num_pose_samples = 23 [default = 0];
  if (_has_bit(68)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->num_pose_samples(), target);
  }
  
  // optional float strip_border_detections = 24 [default = 0];
  if (_has_bit(72)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->strip_border_detections(), target);
  }
  
  // optional bool save_image_scoregrid = 25 [default = false];
  if (_has_bit(73)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->save_image_scoregrid(), target);
  }
  
  // optional int32 dai_num_samples = 28 [default = 1000];
  if (_has_bit(74)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->dai_num_samples(), target);
  }
  
  // optional string dai_factors = 29 [default = ""];
  if (_has_bit(75)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_factors().data(), this->dai_factors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->dai_factors(), target);
  }
  
  // optional string dai_samples_dir = 30 [default = ""];
  if (_has_bit(76)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_samples_dir().data(), this->dai_samples_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->dai_samples_dir(), target);
  }
  
  // optional string dai_bp_type = 31 [default = "sumprod"];
  if (_has_bit(77)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_bp_type().data(), this->dai_bp_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->dai_bp_type(), target);
  }
  
  // optional string part_conf_eval = 32;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf_eval().data(), this->part_conf_eval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->part_conf_eval(), target);
  }
  
  // optional string part_conf_type = 33 [default = "human_full"];
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf_type().data(), this->part_conf_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->part_conf_type(), target);
  }
  
  // optional string dai_samples_type = 34 [default = "part_post"];
  if (_has_bit(78)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dai_samples_type().data(), this->dai_samples_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->dai_samples_type(), target);
  }
  
  // optional bool dai_bbox_prior = 35 [default = false];
  if (_has_bit(79)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->dai_bbox_prior(), target);
  }
  
  // optional bool dai_multiperson = 36 [default = false];
  if (_has_bit(81)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->dai_multiperson(), target);
  }
  
  // optional bool dai_bbox_prior_annopoints = 37 [default = false];
  if (_has_bit(80)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->dai_bbox_prior_annopoints(), target);
  }
  
  // optional string detection_masks_dir = 38 [default = ""];
  if (_has_bit(82)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detection_masks_dir().data(), this->detection_masks_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->detection_masks_dir(), target);
  }
  
  // repeated string train_dataset_reshaped = 39;
  for (int i = 0; i < this->train_dataset_reshaped_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_dataset_reshaped(i).data(), this->train_dataset_reshaped(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(39, this->train_dataset_reshaped(i), target);
  }
  
  // optional bool is_multicomponent = 40 [default = false];
  if (_has_bit(69)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->is_multicomponent(), target);
  }
  
  // optional int32 num_components = 41 [default = 1];
  if (_has_bit(70)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->num_components(), target);
  }
  
  // optional string roi_annolist = 42 [default = ""];
  if (_has_bit(83)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roi_annolist().data(), this->roi_annolist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->roi_annolist(), target);
  }
  
  // optional bool compute_max = 43 [default = false];
  if (_has_bit(87)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->compute_max(), target);
  }
  
  // optional string scoregrid_train_dir = 44;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_train_dir().data(), this->scoregrid_train_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->scoregrid_train_dir(), target);
  }
  
  // optional string mix_dir = 45;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mix_dir().data(), this->mix_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->mix_dir(), target);
  }
  
  // optional int32 roi_extend_x = 46 [default = -1];
  if (_has_bit(84)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->roi_extend_x(), target);
  }
  
  // optional int32 roi_extend_y = 47 [default = -1];
  if (_has_bit(85)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->roi_extend_y(), target);
  }
  
  // optional float roi_save_num_samples = 48 [default = 1000];
  if (_has_bit(86)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->roi_save_num_samples(), target);
  }
  
  // repeated string comp_class_dir = 50;
  for (int i = 0; i < this->comp_class_dir_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_class_dir(i).data(), this->comp_class_dir(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(50, this->comp_class_dir(i), target);
  }
  
  // repeated string neg_dataset = 51;
  for (int i = 0; i < this->neg_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->neg_dataset(i).data(), this->neg_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(51, this->neg_dataset(i), target);
  }
  
  // optional bool reweight_inference = 53 [default = false];
  if (_has_bit(88)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->reweight_inference(), target);
  }
  
  // optional float unary_weight = 56 [default = 1];
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->unary_weight(), target);
  }
  
  // optional string pos_dpm_torso_dir = 69;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos_dpm_torso_dir().data(), this->pos_dpm_torso_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        69, this->pos_dpm_torso_dir(), target);
  }
  
  // optional string test_dpm_torso_dir = 71;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dpm_torso_dir().data(), this->test_dpm_torso_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        71, this->test_dpm_torso_dir(), target);
  }
  
  // optional uint32 torso_hyp_idx = 72;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->torso_hyp_idx(), target);
  }
  
  // optional string part_marginals_dir = 73;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_marginals_dir().data(), this->part_marginals_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        73, this->part_marginals_dir(), target);
  }
  
  // optional bool interpolate = 77 [default = false];
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->interpolate(), target);
  }
  
  // optional bool normalize_kmeans = 81 [default = false];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->normalize_kmeans(), target);
  }
  
  // optional uint32 ndim_joint = 82 [default = 2];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->ndim_joint(), target);
  }
  
  // optional uint32 poselet_strip = 83 [default = 40];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(83, this->poselet_strip(), target);
  }
  
  // optional float vis_weight = 84 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(84, this->vis_weight(), target);
  }
  
  // optional float vp_weight = 85 [default = 0];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(85, this->vp_weight(), target);
  }
  
  // repeated string bootstrap_dataset = 86;
  for (int i = 0; i < this->bootstrap_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bootstrap_dataset(i).data(), this->bootstrap_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(86, this->bootstrap_dataset(i), target);
  }
  
  // optional float bootstrap_threshold = 88 [default = 0.3];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(88, this->bootstrap_threshold(), target);
  }
  
  // optional int32 num_best_part_det_vis = 90 [default = 1];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->num_best_part_det_vis(), target);
  }
  
  // optional float min_clus_size = 92 [default = 10];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(92, this->min_clus_size(), target);
  }
  
  // optional bool pred_unary_rot = 93 [default = false];
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(93, this->pred_unary_rot(), target);
  }
  
  // optional float pred_unary_pos_weight = 95 [default = 1];
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(95, this->pred_unary_pos_weight(), target);
  }
  
  // optional float pred_unary_rot_weight = 96 [default = 1];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(96, this->pred_unary_rot_weight(), target);
  }
  
  // optional uint32 pred_unary_rot_comp = 97 [default = 1];
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(97, this->pred_unary_rot_comp(), target);
  }
  
  // optional string pred_data_dir = 98;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pred_data_dir().data(), this->pred_data_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        98, this->pred_data_dir(), target);
  }
  
  // optional float dpm_torso_weight = 99 [default = 1];
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(99, this->dpm_torso_weight(), target);
  }
  
  // optional bool force_recompute_scores = 101 [default = true];
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->force_recompute_scores(), target);
  }
  
  // optional float torso_pos_prior_weight = 105 [default = 1];
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(105, this->torso_pos_prior_weight(), target);
  }
  
  // optional string torso_det_test_dir = 107;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torso_det_test_dir().data(), this->torso_det_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        107, this->torso_det_test_dir(), target);
  }
  
  // optional string torso_det_train_dir = 108;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torso_det_train_dir().data(), this->torso_det_train_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        108, this->torso_det_train_dir(), target);
  }
  
  // optional uint32 poselet_rot_strip = 109;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(109, this->poselet_rot_strip(), target);
  }
  
  // optional uint32 rootidx_det = 110 [default = 1000];
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->rootidx_det(), target);
  }
  
  // optional bool use_gt_torso = 111 [default = false];
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(111, this->use_gt_torso(), target);
  }
  
  // optional bool use_dpm_torso = 112 [default = false];
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(112, this->use_dpm_torso(), target);
  }
  
  // optional bool pred_unary_pos = 114 [default = false];
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(114, this->pred_unary_pos(), target);
  }
  
  // optional bool use_torso_pos_prior = 120 [default = false];
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->use_torso_pos_prior(), target);
  }
  
  // optional bool use_dpm_head = 122 [default = false];
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(122, this->use_dpm_head(), target);
  }
  
  // optional float dpm_head_weight = 125 [default = 1];
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(125, this->dpm_head_weight(), target);
  }
  
  // optional string test_dpm_unary_dir = 126;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dpm_unary_dir().data(), this->test_dpm_unary_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        126, this->test_dpm_unary_dir(), target);
  }
  
  // optional float dpm_unary_weight = 127 [default = 1];
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(127, this->dpm_unary_weight(), target);
  }
  
  // optional bool use_dpm_unary = 128 [default = false];
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(128, this->use_dpm_unary(), target);
  }
  
  // optional bool do_dpm_rot = 131 [default = false];
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(131, this->do_dpm_rot(), target);
  }
  
  // optional bool use_pairwise = 132 [default = true];
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(132, this->use_pairwise(), target);
  }
  
  // optional bool save_part_marginals = 133 [default = false];
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(133, this->save_part_marginals(), target);
  }
  
  // optional string dpm_model_dir = 134;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dpm_model_dir().data(), this->dpm_model_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        134, this->dpm_model_dir(), target);
  }
  
  // optional string pred_data_test_dir = 135;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pred_data_test_dir().data(), this->pred_data_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        135, this->pred_data_test_dir(), target);
  }
  
  // optional bool save_root_marginal = 136 [default = false];
  if (_has_bit(89)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(136, this->save_root_marginal(), target);
  }
  
  // optional string poselet_resp_val_dir = 137;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poselet_resp_val_dir().data(), this->poselet_resp_val_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        137, this->poselet_resp_val_dir(), target);
  }
  
  // optional string poselet_resp_test_dir = 138;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poselet_resp_test_dir().data(), this->poselet_resp_test_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        138, this->poselet_resp_test_dir(), target);
  }
  
  // optional string spatial_dir = 139;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spatial_dir().data(), this->spatial_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        139, this->spatial_dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional string log_dir = 3;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }
    
    // optional string log_subdir = 7;
    if (has_log_subdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_subdir());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string class_dir = 4;
    if (has_class_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_dir());
    }
    
    // optional string scoregrid_dir = 16;
    if (has_scoregrid_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scoregrid_dir());
    }
    
    // optional string scoregrid_train_dir = 44;
    if (has_scoregrid_train_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scoregrid_train_dir());
    }
    
    // optional bool normalize_kmeans = 81 [default = false];
    if (has_normalize_kmeans()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 ndim_joint = 82 [default = 2];
    if (has_ndim_joint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ndim_joint());
    }
    
    // optional uint32 poselet_strip = 83 [default = 40];
    if (has_poselet_strip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poselet_strip());
    }
    
    // optional float vis_weight = 84 [default = 0];
    if (has_vis_weight()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vp_weight = 85 [default = 0];
    if (has_vp_weight()) {
      total_size += 2 + 4;
    }
    
    // optional float bootstrap_threshold = 88 [default = 0.3];
    if (has_bootstrap_threshold()) {
      total_size += 2 + 4;
    }
    
    // optional int32 num_best_part_det_vis = 90 [default = 1];
    if (has_num_best_part_det_vis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_best_part_det_vis());
    }
    
    // optional float min_clus_size = 92 [default = 10];
    if (has_min_clus_size()) {
      total_size += 2 + 4;
    }
    
    // optional bool pred_unary_rot = 93 [default = false];
    if (has_pred_unary_rot()) {
      total_size += 2 + 1;
    }
    
    // optional float pred_unary_pos_weight = 95 [default = 1];
    if (has_pred_unary_pos_weight()) {
      total_size += 2 + 4;
    }
    
    // optional float pred_unary_rot_weight = 96 [default = 1];
    if (has_pred_unary_rot_weight()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 pred_unary_rot_comp = 97 [default = 1];
    if (has_pred_unary_rot_comp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pred_unary_rot_comp());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string pred_data_dir = 98;
    if (has_pred_data_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pred_data_dir());
    }
    
    // optional string pred_data_test_dir = 135;
    if (has_pred_data_test_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pred_data_test_dir());
    }
    
    // optional string poselet_resp_val_dir = 137;
    if (has_poselet_resp_val_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poselet_resp_val_dir());
    }
    
    // optional string poselet_resp_test_dir = 138;
    if (has_poselet_resp_test_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poselet_resp_test_dir());
    }
    
    // optional string spatial_dir = 139;
    if (has_spatial_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spatial_dir());
    }
    
    // optional float dpm_torso_weight = 99 [default = 1];
    if (has_dpm_torso_weight()) {
      total_size += 2 + 4;
    }
    
    // optional bool force_recompute_scores = 101 [default = true];
    if (has_force_recompute_scores()) {
      total_size += 2 + 1;
    }
    
    // optional float torso_pos_prior_weight = 105 [default = 1];
    if (has_torso_pos_prior_weight()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string torso_det_test_dir = 107;
    if (has_torso_det_test_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->torso_det_test_dir());
    }
    
    // optional string torso_det_train_dir = 108;
    if (has_torso_det_train_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->torso_det_train_dir());
    }
    
    // optional uint32 poselet_rot_strip = 109;
    if (has_poselet_rot_strip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poselet_rot_strip());
    }
    
    // optional uint32 rootidx_det = 110 [default = 1000];
    if (has_rootidx_det()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rootidx_det());
    }
    
    // optional bool use_gt_torso = 111 [default = false];
    if (has_use_gt_torso()) {
      total_size += 2 + 1;
    }
    
    // optional bool use_dpm_torso = 112 [default = false];
    if (has_use_dpm_torso()) {
      total_size += 2 + 1;
    }
    
    // optional bool pred_unary_pos = 114 [default = false];
    if (has_pred_unary_pos()) {
      total_size += 2 + 1;
    }
    
    // optional bool use_torso_pos_prior = 120 [default = false];
    if (has_use_torso_pos_prior()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool use_dpm_head = 122 [default = false];
    if (has_use_dpm_head()) {
      total_size += 2 + 1;
    }
    
    // optional float dpm_head_weight = 125 [default = 1];
    if (has_dpm_head_weight()) {
      total_size += 2 + 4;
    }
    
    // optional string test_dpm_unary_dir = 126;
    if (has_test_dpm_unary_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_dpm_unary_dir());
    }
    
    // optional float dpm_unary_weight = 127 [default = 1];
    if (has_dpm_unary_weight()) {
      total_size += 2 + 4;
    }
    
    // optional bool use_dpm_unary = 128 [default = false];
    if (has_use_dpm_unary()) {
      total_size += 2 + 1;
    }
    
    // optional bool do_dpm_rot = 131 [default = false];
    if (has_do_dpm_rot()) {
      total_size += 2 + 1;
    }
    
    // optional bool use_pairwise = 132 [default = true];
    if (has_use_pairwise()) {
      total_size += 2 + 1;
    }
    
    // optional bool save_part_marginals = 133 [default = false];
    if (has_save_part_marginals()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string dpm_model_dir = 134;
    if (has_dpm_model_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpm_model_dir());
    }
    
    // optional float unary_weight = 56 [default = 1];
    if (has_unary_weight()) {
      total_size += 2 + 4;
    }
    
    // optional bool interpolate = 77 [default = false];
    if (has_interpolate()) {
      total_size += 2 + 1;
    }
    
    // optional string pos_dpm_torso_dir = 69;
    if (has_pos_dpm_torso_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos_dpm_torso_dir());
    }
    
    // optional string test_dpm_torso_dir = 71;
    if (has_test_dpm_torso_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_dpm_torso_dir());
    }
    
    // optional uint32 torso_hyp_idx = 72;
    if (has_torso_hyp_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->torso_hyp_idx());
    }
    
    // optional string part_marginals_dir = 73;
    if (has_part_marginals_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_marginals_dir());
    }
    
    // optional string part_conf = 5;
    if (has_part_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_conf());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional string part_conf_eval = 32;
    if (has_part_conf_eval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_conf_eval());
    }
    
    // optional string part_conf_type = 33 [default = "human_full"];
    if (has_part_conf_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_conf_type());
    }
    
    // optional string abc_param = 6;
    if (has_abc_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abc_param());
    }
    
    // optional float min_object_scale = 9 [default = 1];
    if (has_min_object_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float max_object_scale = 10 [default = 1];
    if (has_max_object_scale()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 num_scale_steps = 11 [default = 1];
    if (has_num_scale_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_scale_steps());
    }
    
    // optional float min_part_rotation = 12 [default = -180];
    if (has_min_part_rotation()) {
      total_size += 1 + 4;
    }
    
    // optional float max_part_rotation = 13 [default = 180];
    if (has_max_part_rotation()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 num_rotation_steps = 14 [default = 48];
    if (has_num_rotation_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rotation_steps());
    }
    
    // optional bool flip_orientation = 15 [default = false];
    if (has_flip_orientation()) {
      total_size += 1 + 1;
    }
    
    // optional float object_height_width_ratio = 21 [default = 2.5];
    if (has_object_height_width_ratio()) {
      total_size += 2 + 4;
    }
    
    // optional bool compute_part_marginals = 22 [default = true];
    if (has_compute_part_marginals()) {
      total_size += 2 + 1;
    }
    
    // optional int32 num_pose_samples = 23 [default = 0];
    if (has_num_pose_samples()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_pose_samples());
    }
    
    // optional bool is_multicomponent = 40 [default = false];
    if (has_is_multicomponent()) {
      total_size += 2 + 1;
    }
    
    // optional int32 num_components = 41 [default = 1];
    if (has_num_components()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components());
    }
    
    // optional string mix_dir = 45;
    if (has_mix_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mix_dir());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional float strip_border_detections = 24 [default = 0];
    if (has_strip_border_detections()) {
      total_size += 2 + 4;
    }
    
    // optional bool save_image_scoregrid = 25 [default = false];
    if (has_save_image_scoregrid()) {
      total_size += 2 + 1;
    }
    
    // optional int32 dai_num_samples = 28 [default = 1000];
    if (has_dai_num_samples()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dai_num_samples());
    }
    
    // optional string dai_factors = 29 [default = ""];
    if (has_dai_factors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dai_factors());
    }
    
    // optional string dai_samples_dir = 30 [default = ""];
    if (has_dai_samples_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dai_samples_dir());
    }
    
    // optional string dai_bp_type = 31 [default = "sumprod"];
    if (has_dai_bp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dai_bp_type());
    }
    
    // optional string dai_samples_type = 34 [default = "part_post"];
    if (has_dai_samples_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dai_samples_type());
    }
    
    // optional bool dai_bbox_prior = 35 [default = false];
    if (has_dai_bbox_prior()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional bool dai_bbox_prior_annopoints = 37 [default = false];
    if (has_dai_bbox_prior_annopoints()) {
      total_size += 2 + 1;
    }
    
    // optional bool dai_multiperson = 36 [default = false];
    if (has_dai_multiperson()) {
      total_size += 2 + 1;
    }
    
    // optional string detection_masks_dir = 38 [default = ""];
    if (has_detection_masks_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detection_masks_dir());
    }
    
    // optional string roi_annolist = 42 [default = ""];
    if (has_roi_annolist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roi_annolist());
    }
    
    // optional int32 roi_extend_x = 46 [default = -1];
    if (has_roi_extend_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roi_extend_x());
    }
    
    // optional int32 roi_extend_y = 47 [default = -1];
    if (has_roi_extend_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roi_extend_y());
    }
    
    // optional float roi_save_num_samples = 48 [default = 1000];
    if (has_roi_save_num_samples()) {
      total_size += 2 + 4;
    }
    
    // optional bool compute_max = 43 [default = false];
    if (has_compute_max()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional bool reweight_inference = 53 [default = false];
    if (has_reweight_inference()) {
      total_size += 2 + 1;
    }
    
    // optional bool save_root_marginal = 136 [default = false];
    if (has_save_root_marginal()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string train_dataset = 1;
  total_size += 1 * this->train_dataset_size();
  for (int i = 0; i < this->train_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->train_dataset(i));
  }
  
  // repeated string validation_dataset = 8;
  total_size += 1 * this->validation_dataset_size();
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->validation_dataset(i));
  }
  
  // repeated string test_dataset = 2;
  total_size += 1 * this->test_dataset_size();
  for (int i = 0; i < this->test_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_dataset(i));
  }
  
  // repeated string neg_dataset = 51;
  total_size += 2 * this->neg_dataset_size();
  for (int i = 0; i < this->neg_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->neg_dataset(i));
  }
  
  // repeated string bootstrap_dataset = 86;
  total_size += 2 * this->bootstrap_dataset_size();
  for (int i = 0; i < this->bootstrap_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bootstrap_dataset(i));
  }
  
  // repeated string train_dataset_reshaped = 39;
  total_size += 2 * this->train_dataset_reshaped_size();
  for (int i = 0; i < this->train_dataset_reshaped_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->train_dataset_reshaped(i));
  }
  
  // repeated string comp_class_dir = 50;
  total_size += 2 * this->comp_class_dir_size();
  for (int i = 0; i < this->comp_class_dir_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->comp_class_dir(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpParam::MergeFrom(const ExpParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_dataset_.MergeFrom(from.train_dataset_);
  validation_dataset_.MergeFrom(from.validation_dataset_);
  test_dataset_.MergeFrom(from.test_dataset_);
  neg_dataset_.MergeFrom(from.neg_dataset_);
  bootstrap_dataset_.MergeFrom(from.bootstrap_dataset_);
  train_dataset_reshaped_.MergeFrom(from.train_dataset_reshaped_);
  comp_class_dir_.MergeFrom(from.comp_class_dir_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from._has_bit(6)) {
      set_log_dir(from.log_dir());
    }
    if (from._has_bit(7)) {
      set_log_subdir(from.log_subdir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_class_dir(from.class_dir());
    }
    if (from._has_bit(10)) {
      set_scoregrid_dir(from.scoregrid_dir());
    }
    if (from._has_bit(11)) {
      set_scoregrid_train_dir(from.scoregrid_train_dir());
    }
    if (from._has_bit(12)) {
      set_normalize_kmeans(from.normalize_kmeans());
    }
    if (from._has_bit(13)) {
      set_ndim_joint(from.ndim_joint());
    }
    if (from._has_bit(14)) {
      set_poselet_strip(from.poselet_strip());
    }
    if (from._has_bit(15)) {
      set_vis_weight(from.vis_weight());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_vp_weight(from.vp_weight());
    }
    if (from._has_bit(17)) {
      set_bootstrap_threshold(from.bootstrap_threshold());
    }
    if (from._has_bit(18)) {
      set_num_best_part_det_vis(from.num_best_part_det_vis());
    }
    if (from._has_bit(19)) {
      set_min_clus_size(from.min_clus_size());
    }
    if (from._has_bit(20)) {
      set_pred_unary_rot(from.pred_unary_rot());
    }
    if (from._has_bit(21)) {
      set_pred_unary_pos_weight(from.pred_unary_pos_weight());
    }
    if (from._has_bit(22)) {
      set_pred_unary_rot_weight(from.pred_unary_rot_weight());
    }
    if (from._has_bit(23)) {
      set_pred_unary_rot_comp(from.pred_unary_rot_comp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_pred_data_dir(from.pred_data_dir());
    }
    if (from._has_bit(25)) {
      set_pred_data_test_dir(from.pred_data_test_dir());
    }
    if (from._has_bit(26)) {
      set_poselet_resp_val_dir(from.poselet_resp_val_dir());
    }
    if (from._has_bit(27)) {
      set_poselet_resp_test_dir(from.poselet_resp_test_dir());
    }
    if (from._has_bit(28)) {
      set_spatial_dir(from.spatial_dir());
    }
    if (from._has_bit(29)) {
      set_dpm_torso_weight(from.dpm_torso_weight());
    }
    if (from._has_bit(30)) {
      set_force_recompute_scores(from.force_recompute_scores());
    }
    if (from._has_bit(31)) {
      set_torso_pos_prior_weight(from.torso_pos_prior_weight());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_torso_det_test_dir(from.torso_det_test_dir());
    }
    if (from._has_bit(33)) {
      set_torso_det_train_dir(from.torso_det_train_dir());
    }
    if (from._has_bit(34)) {
      set_poselet_rot_strip(from.poselet_rot_strip());
    }
    if (from._has_bit(35)) {
      set_rootidx_det(from.rootidx_det());
    }
    if (from._has_bit(36)) {
      set_use_gt_torso(from.use_gt_torso());
    }
    if (from._has_bit(37)) {
      set_use_dpm_torso(from.use_dpm_torso());
    }
    if (from._has_bit(38)) {
      set_pred_unary_pos(from.pred_unary_pos());
    }
    if (from._has_bit(39)) {
      set_use_torso_pos_prior(from.use_torso_pos_prior());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_use_dpm_head(from.use_dpm_head());
    }
    if (from._has_bit(41)) {
      set_dpm_head_weight(from.dpm_head_weight());
    }
    if (from._has_bit(42)) {
      set_test_dpm_unary_dir(from.test_dpm_unary_dir());
    }
    if (from._has_bit(43)) {
      set_dpm_unary_weight(from.dpm_unary_weight());
    }
    if (from._has_bit(44)) {
      set_use_dpm_unary(from.use_dpm_unary());
    }
    if (from._has_bit(45)) {
      set_do_dpm_rot(from.do_dpm_rot());
    }
    if (from._has_bit(46)) {
      set_use_pairwise(from.use_pairwise());
    }
    if (from._has_bit(47)) {
      set_save_part_marginals(from.save_part_marginals());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_dpm_model_dir(from.dpm_model_dir());
    }
    if (from._has_bit(49)) {
      set_unary_weight(from.unary_weight());
    }
    if (from._has_bit(50)) {
      set_interpolate(from.interpolate());
    }
    if (from._has_bit(51)) {
      set_pos_dpm_torso_dir(from.pos_dpm_torso_dir());
    }
    if (from._has_bit(52)) {
      set_test_dpm_torso_dir(from.test_dpm_torso_dir());
    }
    if (from._has_bit(53)) {
      set_torso_hyp_idx(from.torso_hyp_idx());
    }
    if (from._has_bit(54)) {
      set_part_marginals_dir(from.part_marginals_dir());
    }
    if (from._has_bit(55)) {
      set_part_conf(from.part_conf());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_part_conf_eval(from.part_conf_eval());
    }
    if (from._has_bit(57)) {
      set_part_conf_type(from.part_conf_type());
    }
    if (from._has_bit(58)) {
      set_abc_param(from.abc_param());
    }
    if (from._has_bit(59)) {
      set_min_object_scale(from.min_object_scale());
    }
    if (from._has_bit(60)) {
      set_max_object_scale(from.max_object_scale());
    }
    if (from._has_bit(61)) {
      set_num_scale_steps(from.num_scale_steps());
    }
    if (from._has_bit(62)) {
      set_min_part_rotation(from.min_part_rotation());
    }
    if (from._has_bit(63)) {
      set_max_part_rotation(from.max_part_rotation());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set_num_rotation_steps(from.num_rotation_steps());
    }
    if (from._has_bit(65)) {
      set_flip_orientation(from.flip_orientation());
    }
    if (from._has_bit(66)) {
      set_object_height_width_ratio(from.object_height_width_ratio());
    }
    if (from._has_bit(67)) {
      set_compute_part_marginals(from.compute_part_marginals());
    }
    if (from._has_bit(68)) {
      set_num_pose_samples(from.num_pose_samples());
    }
    if (from._has_bit(69)) {
      set_is_multicomponent(from.is_multicomponent());
    }
    if (from._has_bit(70)) {
      set_num_components(from.num_components());
    }
    if (from._has_bit(71)) {
      set_mix_dir(from.mix_dir());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from._has_bit(72)) {
      set_strip_border_detections(from.strip_border_detections());
    }
    if (from._has_bit(73)) {
      set_save_image_scoregrid(from.save_image_scoregrid());
    }
    if (from._has_bit(74)) {
      set_dai_num_samples(from.dai_num_samples());
    }
    if (from._has_bit(75)) {
      set_dai_factors(from.dai_factors());
    }
    if (from._has_bit(76)) {
      set_dai_samples_dir(from.dai_samples_dir());
    }
    if (from._has_bit(77)) {
      set_dai_bp_type(from.dai_bp_type());
    }
    if (from._has_bit(78)) {
      set_dai_samples_type(from.dai_samples_type());
    }
    if (from._has_bit(79)) {
      set_dai_bbox_prior(from.dai_bbox_prior());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from._has_bit(80)) {
      set_dai_bbox_prior_annopoints(from.dai_bbox_prior_annopoints());
    }
    if (from._has_bit(81)) {
      set_dai_multiperson(from.dai_multiperson());
    }
    if (from._has_bit(82)) {
      set_detection_masks_dir(from.detection_masks_dir());
    }
    if (from._has_bit(83)) {
      set_roi_annolist(from.roi_annolist());
    }
    if (from._has_bit(84)) {
      set_roi_extend_x(from.roi_extend_x());
    }
    if (from._has_bit(85)) {
      set_roi_extend_y(from.roi_extend_y());
    }
    if (from._has_bit(86)) {
      set_roi_save_num_samples(from.roi_save_num_samples());
    }
    if (from._has_bit(87)) {
      set_compute_max(from.compute_max());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from._has_bit(88)) {
      set_reweight_inference(from.reweight_inference());
    }
    if (from._has_bit(89)) {
      set_save_root_marginal(from.save_root_marginal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParam::CopyFrom(const ExpParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParam::IsInitialized() const {
  
  return true;
}

void ExpParam::Swap(ExpParam* other) {
  if (other != this) {
    train_dataset_.Swap(&other->train_dataset_);
    validation_dataset_.Swap(&other->validation_dataset_);
    test_dataset_.Swap(&other->test_dataset_);
    neg_dataset_.Swap(&other->neg_dataset_);
    bootstrap_dataset_.Swap(&other->bootstrap_dataset_);
    train_dataset_reshaped_.Swap(&other->train_dataset_reshaped_);
    std::swap(log_dir_, other->log_dir_);
    std::swap(log_subdir_, other->log_subdir_);
    std::swap(class_dir_, other->class_dir_);
    comp_class_dir_.Swap(&other->comp_class_dir_);
    std::swap(scoregrid_dir_, other->scoregrid_dir_);
    std::swap(scoregrid_train_dir_, other->scoregrid_train_dir_);
    std::swap(normalize_kmeans_, other->normalize_kmeans_);
    std::swap(ndim_joint_, other->ndim_joint_);
    std::swap(poselet_strip_, other->poselet_strip_);
    std::swap(vis_weight_, other->vis_weight_);
    std::swap(vp_weight_, other->vp_weight_);
    std::swap(bootstrap_threshold_, other->bootstrap_threshold_);
    std::swap(num_best_part_det_vis_, other->num_best_part_det_vis_);
    std::swap(min_clus_size_, other->min_clus_size_);
    std::swap(pred_unary_rot_, other->pred_unary_rot_);
    std::swap(pred_unary_pos_weight_, other->pred_unary_pos_weight_);
    std::swap(pred_unary_rot_weight_, other->pred_unary_rot_weight_);
    std::swap(pred_unary_rot_comp_, other->pred_unary_rot_comp_);
    std::swap(pred_data_dir_, other->pred_data_dir_);
    std::swap(pred_data_test_dir_, other->pred_data_test_dir_);
    std::swap(poselet_resp_val_dir_, other->poselet_resp_val_dir_);
    std::swap(poselet_resp_test_dir_, other->poselet_resp_test_dir_);
    std::swap(spatial_dir_, other->spatial_dir_);
    std::swap(dpm_torso_weight_, other->dpm_torso_weight_);
    std::swap(force_recompute_scores_, other->force_recompute_scores_);
    std::swap(torso_pos_prior_weight_, other->torso_pos_prior_weight_);
    std::swap(torso_det_test_dir_, other->torso_det_test_dir_);
    std::swap(torso_det_train_dir_, other->torso_det_train_dir_);
    std::swap(poselet_rot_strip_, other->poselet_rot_strip_);
    std::swap(rootidx_det_, other->rootidx_det_);
    std::swap(use_gt_torso_, other->use_gt_torso_);
    std::swap(use_dpm_torso_, other->use_dpm_torso_);
    std::swap(pred_unary_pos_, other->pred_unary_pos_);
    std::swap(use_torso_pos_prior_, other->use_torso_pos_prior_);
    std::swap(use_dpm_head_, other->use_dpm_head_);
    std::swap(dpm_head_weight_, other->dpm_head_weight_);
    std::swap(test_dpm_unary_dir_, other->test_dpm_unary_dir_);
    std::swap(dpm_unary_weight_, other->dpm_unary_weight_);
    std::swap(use_dpm_unary_, other->use_dpm_unary_);
    std::swap(do_dpm_rot_, other->do_dpm_rot_);
    std::swap(use_pairwise_, other->use_pairwise_);
    std::swap(save_part_marginals_, other->save_part_marginals_);
    std::swap(dpm_model_dir_, other->dpm_model_dir_);
    std::swap(unary_weight_, other->unary_weight_);
    std::swap(interpolate_, other->interpolate_);
    std::swap(pos_dpm_torso_dir_, other->pos_dpm_torso_dir_);
    std::swap(test_dpm_torso_dir_, other->test_dpm_torso_dir_);
    std::swap(torso_hyp_idx_, other->torso_hyp_idx_);
    std::swap(part_marginals_dir_, other->part_marginals_dir_);
    std::swap(part_conf_, other->part_conf_);
    std::swap(part_conf_eval_, other->part_conf_eval_);
    std::swap(part_conf_type_, other->part_conf_type_);
    std::swap(abc_param_, other->abc_param_);
    std::swap(min_object_scale_, other->min_object_scale_);
    std::swap(max_object_scale_, other->max_object_scale_);
    std::swap(num_scale_steps_, other->num_scale_steps_);
    std::swap(min_part_rotation_, other->min_part_rotation_);
    std::swap(max_part_rotation_, other->max_part_rotation_);
    std::swap(num_rotation_steps_, other->num_rotation_steps_);
    std::swap(flip_orientation_, other->flip_orientation_);
    std::swap(object_height_width_ratio_, other->object_height_width_ratio_);
    std::swap(compute_part_marginals_, other->compute_part_marginals_);
    std::swap(num_pose_samples_, other->num_pose_samples_);
    std::swap(is_multicomponent_, other->is_multicomponent_);
    std::swap(num_components_, other->num_components_);
    std::swap(mix_dir_, other->mix_dir_);
    std::swap(strip_border_detections_, other->strip_border_detections_);
    std::swap(save_image_scoregrid_, other->save_image_scoregrid_);
    std::swap(dai_num_samples_, other->dai_num_samples_);
    std::swap(dai_factors_, other->dai_factors_);
    std::swap(dai_samples_dir_, other->dai_samples_dir_);
    std::swap(dai_bp_type_, other->dai_bp_type_);
    std::swap(dai_samples_type_, other->dai_samples_type_);
    std::swap(dai_bbox_prior_, other->dai_bbox_prior_);
    std::swap(dai_bbox_prior_annopoints_, other->dai_bbox_prior_annopoints_);
    std::swap(dai_multiperson_, other->dai_multiperson_);
    std::swap(detection_masks_dir_, other->detection_masks_dir_);
    std::swap(roi_annolist_, other->roi_annolist_);
    std::swap(roi_extend_x_, other->roi_extend_x_);
    std::swap(roi_extend_y_, other->roi_extend_y_);
    std::swap(roi_save_num_samples_, other->roi_save_num_samples_);
    std::swap(compute_max_, other->compute_max_);
    std::swap(reweight_inference_, other->reweight_inference_);
    std::swap(save_root_marginal_, other->save_root_marginal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParam_descriptor_;
  metadata.reflection = ExpParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
